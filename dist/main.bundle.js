"use strict";(self.webpackChunkodin_todo_list=self.webpackChunkodin_todo_list||[]).push([[179],{426:(e,t,n)=>{n.d(t,{Z:()=>o});var A=n(537),a=n.n(A),r=n(645),i=n.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu&display=swap);"]),i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Teko:wght@600&display=swap);"]),i.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  font-size: 1.6rem;\n}\n\np, li, legend, h1, h2 {\n  font-family: "Ubuntu", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\ni, button {\n  cursor: pointer;\n}\n\n.wrapper {\n  background-color: rgb(223, 222, 222);\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n/*=========\n  Nav Bar\n===========*/\nnav, footer {\n  z-index: 1;\n  position: relative;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 1.2rem;\n  background-color: #9d9dfc;\n}\n\nnav i {\n  color: white;\n  font-size: 2.3rem;\n}\n\nnav .user-alerts {\n  position: relative;\n}\n\n.user-alerts i:last-child {\n  position: absolute;\n}\n\n.user-notify {\n  z-index: 1;\n  top: -0.1rem;\n  left: 1.3rem;\n  transition: 0.9s;\n  font-size: 3rem;\n  color: transparent;\n}\n\n.notify {\n  color: red;\n  font-size: 1.1rem;\n}\n\nnav ul {\n  width: 35%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.pointer, i {\n  cursor: pointer;\n}\n\nnav .logo {\n  width: 35%;\n  cursor: auto;\n  font-size: 4rem;\n  margin-right: 1rem;\n}\n\n.nav-search {\n  width: 80%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nav-search input {\n  width: 60%;\n  height: 3rem;\n  margin: 0 1rem;\n  padding: 0.5rem;\n  font-size: 1.4rem;\n  border-radius: 0.5rem;\n  border: none;\n}\n\n.nav-search input:focus-visible {\n  outline: 0.2rem solid lightblue;\n}\n\n@media (max-width: 620px) {\n  .nav-settings li:last-child i {\n    position: absolute;\n    left: -100vw;\n    visibility: hidden;\n  }\n}\n\n/*===========\n  Dashboard\napp-window: div\n  -aside\n    -ul: app-aside-calendar\n    -ul: app-aside-projects-list\n\n  -main: app-main-task-window\n    -dashboard\n=============*/\n.app-window {\n  flex: auto;\n  display: flex;\n}\n\naside {\n  width: 28rem;\n  min-width: 28rem;\n  position: relative;\n  background-color: #fafafa;\n  padding: 2rem 2rem 5rem 2rem;\n  filter: drop-shadow(0 0.1rem 0.2rem rgba(0, 0, 0, 0.5));\n  display: flex;\n  flex-direction: column;\n  transition: 0.3s;\n}\n@media (max-width: 880px) {\n  aside {\n    top: 0;\n    z-index: 2;\n    position: absolute;\n    height: 100%;\n    left: -28rem;\n  }\n}\n\n.js-aside-drawer-animation {\n  left: 0;\n}\n\n.aside-drawer-icon {\n  width: 3rem;\n  height: 5rem;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  padding: 0.5rem 0.5rem;\n  position: absolute;\n  visibility: hidden;\n  border-top-right-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n  background-color: inherit;\n  cursor: pointer;\n  right: -2rem;\n  top: 13.5rem;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n}\n.aside-drawer-icon i {\n  right: -0.3rem;\n  position: relative;\n  font-size: 3rem;\n  color: #9d9dfc;\n}\n@media (max-width: 880px) {\n  .aside-drawer-icon {\n    visibility: visible;\n  }\n}\n\naside ul {\n  margin-bottom: 2rem;\n}\n\naside li {\n  gap: 1rem;\n  width: 100%;\n  padding: 1rem;\n  height: 3.5rem;\n  cursor: pointer;\n  font-size: 1.7rem;\n  border-radius: 0.5rem;\n  display: flex;\n  align-items: center;\n}\n\n/*==================\n  Aside:\n    Task Overview\n====================*/\n.app-aside-calendar {\n  height: 20rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.js-aside-highlight {\n  background-color: #efefef;\n}\n\n/*==================\n  <li> Button Mask\n====================*/\nli {\n  position: relative;\n}\n\n.mask-button {\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  position: absolute;\n}\n\n/*============\n  Aside:\n    Projects\n==============*/\naside ul:last-child {\n  flex: 1;\n  height: auto;\n  display: flex;\n  overflow: hidden;\n  flex-direction: column;\n  transition: 0.3s;\n}\naside ul:last-child li {\n  display: flex;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\naside ul:last-child li:not(:first-child) {\n  width: calc(100% - 2rem);\n  margin-top: 1rem;\n  margin-left: 2rem;\n  display: flex;\n  justify-content: space-between;\n}\naside ul:last-child li:not(:first-child) i {\n  color: blue;\n  font-size: 1.3rem;\n}\naside ul:last-child li:not(:first-child) .project-info {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.projects-dropdown-icon {\n  font-size: 2.2rem;\n  transition: 0.3s;\n  transform: rotate(0);\n}\n\n.dropdown-state {\n  transition: 0.3s;\n  transform: rotate(-90deg);\n}\n\naside ul:last-child.dropdown-menu {\n  flex: 0 0 4.9rem;\n  transition: 0.3s;\n}\n\n/*=============\n  Dashboard:\n    Task view\n===============*/\nmain {\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 3rem 4rem 3rem 7rem;\n  background-color: white;\n  overflow-y: hidden;\n}\n@media (max-width: 880px) {\n  main {\n    padding: 3rem 2.8rem;\n  }\n}\n\nmain h2 {\n  margin-bottom: 4rem;\n}\n\n.new-task {\n  gap: 1rem;\n  display: flex;\n  margin-left: 1.5rem;\n  margin-bottom: 2rem;\n  color: rgb(110, 110, 110);\n}\n\n.dashboard-tasks,\n.dashboard-today,\n.dashboard-upcoming,\n.dashboard-search,\n.dashboard-project {\n  overflow: hidden;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  margin-bottom: 2rem;\n  position: absolute;\n}\n\n.dashboard-tasks {\n  position: relative;\n}\n\n.complete-task {\n  transform: translate(0, 100vw);\n}\n\n.remove-task {\n  transform: translate(-100vw);\n}\n\n.congrats-mask {\n  z-index: -1;\n  visibility: hidden;\n  background-color: transparent;\n  transition: 0.3s;\n  inset: 0;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n.congrats-mask p {\n  top: 0.5rem;\n  position: relative;\n  color: white;\n  transition: 0.3s;\n  font-size: 5rem;\n  font-family: "Teko", sans-serif;\n}\n\n.show-congrats-mask {\n  z-index: 20;\n  visibility: visible;\n  background-color: #9d9dfc;\n}\n.show-congrats-mask p {\n  color: white;\n}\n\n.task-card {\n  width: 100%;\n  display: flex;\n  padding: 1.5rem;\n  position: relative;\n  background-color: rgb(240, 240, 240);\n  border-bottom: 0.1rem solid lightgray;\n  margin-bottom: 1rem;\n  transition: 1.2s;\n}\n\n.task-check-col-1 {\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  justify-content: space-between;\n  margin-right: 1rem;\n}\n.task-check-col-1 i:first-child {\n  color: #9d9dfc;\n  font-size: 2.25rem;\n}\n\n.task-info {\n  gap: 1rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.task-details {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.task-details li {\n  gap: 1rem;\n  display: flex;\n  overflow: hidden;\n}\n.task-details li p {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.task-details li:not(:last-child) {\n  width: 35%;\n}\n@media (max-width: 1080px) {\n  .task-details li:not(:last-child) {\n    width: 100%;\n  }\n}\n.task-details li:first-child {\n  min-width: 10rem;\n}\n.task-details .task-project {\n  width: -webkit-max-content;\n  width: -moz-max-content;\n  width: max-content;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n@media (max-width: 1080px) {\n  .task-details .task-project {\n    width: -webkit-max-content;\n    width: -moz-max-content;\n    width: max-content;\n  }\n}\n.task-details .task-project i {\n  color: blue;\n}\n.task-details .task-project p {\n  text-align: right;\n}\n\n.task-card .task-remove {\n  position: absolute;\n  top: 1rem;\n  right: 1.6rem;\n}\n\n/*================\n  New Task Modal\n==================*/\ndialog {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  margin: auto;\n  border: none;\n  background-color: transparent;\n}\n\n.dialog-task-bar {\n  width: 70%;\n  min-height: 13rem;\n  height: -webkit-max-content;\n  height: -moz-max-content;\n  height: max-content;\n  padding: 2.5rem 1.5rem 1.5rem;\n  margin: 6rem 4rem 0 auto;\n  border: none;\n  border-radius: 1rem;\n  background-color: white;\n  box-shadow: 0 0 0.5rem 0.1rem black;\n}\n@media (max-width: 1080px) {\n  .dialog-task-bar {\n    width: 95%;\n    margin: 6rem auto 0;\n  }\n}\n\n.js-task-icon {\n  height: 4rem;\n  width: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0.5rem;\n  border: 0.2rem solid transparent;\n  transition: 0.3s;\n}\n\n.modal-icon-select {\n  border: 0.2rem dashed #9d9dfc;\n}\n\nform {\n  margin-bottom: 1.5rem;\n}\n\nform input {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  border: 0.2rem solid #9d9dfc;\n}\n\n.inputs {\n  width: 35%;\n  height: 3.9rem;\n  position: relative;\n}\n@media (max-width: 880px) {\n  .inputs {\n    width: 57.5%;\n  }\n}\n\n.inputs input {\n  width: 100%;\n  background-color: white;\n}\n\n.inputs .input-task {\n  position: absolute;\n  visibility: visible;\n}\n\n.inputs input:focus-visible {\n  outline: none;\n}\n\n.dropdown-set-project,\n.dropdown-set-date,\n.input-date,\n.input-time,\n.input-comment {\n  width: 100%;\n  height: 100%;\n  visibility: hidden;\n}\n.dropdown-set-project i,\n.dropdown-set-date i,\n.input-date i,\n.input-time i,\n.input-comment i {\n  width: 3rem;\n  height: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0.2rem;\n  right: 0.2rem;\n  position: absolute;\n  border-radius: 0.1rem;\n  background-color: white;\n}\n@media (max-width: 620px) {\n  .dropdown-set-project i,\n.dropdown-set-date i,\n.input-date i,\n.input-time i,\n.input-comment i {\n    height: 85%;\n    top: 0.3rem;\n    left: auto;\n  }\n}\n\n.project-select-menu {\n  z-index: 5;\n  padding: 1rem;\n  border: 0.1rem dashed lightblue;\n  border-top: none;\n  background-color: white;\n  border-bottom-left-radius: 1rem;\n  border-bottom-right-radius: 1rem;\n  gap: 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-selector {\n  overflow: hidden;\n  transition: 0.2s;\n  padding: 1rem 1rem;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  border-radius: 0.5rem;\n  border: 0.1rem solid transparent;\n  background-color: rgb(253, 237, 240);\n}\n\n.project-selector:hover {\n  border: 0.1rem solid black;\n}\n\n.input-date,\n.input-time,\n.input-comment,\n.dropdown-set-date {\n  top: 0;\n  position: absolute;\n}\n\n.input-year {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.dropdown-set-date {\n  height: 100%;\n  gap: 0.5rem;\n  display: grid;\n  grid-template-columns: repeat(3, 33.3333333333%);\n}\n@media (max-width: 620px) {\n  .dropdown-set-date {\n    grid-template-columns: repeat(3, 8rem);\n  }\n}\n\n.input-calendar {\n  z-index: 5;\n  min-width: 20rem;\n  grid-column: span 3;\n  position: relative;\n  top: -13rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar {\n    top: -9.3rem;\n  }\n}\n@media (max-width: 620px) {\n  .input-calendar {\n    top: -7rem;\n  }\n}\n\n.input-calendar button {\n  position: absolute;\n  bottom: 0.6rem;\n  right: 1.5rem;\n  width: 10rem;\n  height: 3rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar button {\n    width: 8rem;\n    bottom: 0.6rem;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n  }\n}\n\n.dropdown-set-date li {\n  height: 100%;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 0.5rem;\n  background-color: white;\n  border: 0.2rem solid #9d9dfc;\n}\n\n.dropdown-set-date li:first-child .js-calendar-icon-btn {\n  z-index: 5;\n  width: 2.5rem;\n  height: 2.5rem;\n  position: absolute;\n  top: 15%;\n  right: -1.7rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid #9d9dfc;\n  padding-bottom: 0.1rem;\n  padding-left: 0.05rem;\n}\n\n.dropdown-set-date p {\n  padding: 1rem;\n}\n\n.dropdown-set-date li p:first-child {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\ni.year-nav {\n  width: 50%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\ni.year-nav-up {\n  top: -2.75rem;\n  left: -5%;\n}\n\ni.year-nav-down {\n  top: -2.75rem;\n  right: -5%;\n}\n\nfieldset {\n  gap: 1rem;\n  width: 100%;\n  border: none;\n  display: flex;\n}\n@media (max-width: 880px) {\n  fieldset {\n    flex-wrap: wrap;\n  }\n}\n@media (max-width: 620px) {\n  fieldset {\n    display: grid;\n    flex-wrap: nowrap;\n  }\n}\n\nlegend {\n  color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 0.5rem;\n}\n\nfieldset .task-icons {\n  min-width: 26rem;\n  flex: auto;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-self: flex-start;\n  justify-content: space-evenly;\n}\n@media (max-width: 880px) {\n  fieldset .task-icons {\n    gap: 1rem;\n    margin-right: 0;\n  }\n}\n@media (max-width: 620px) {\n  fieldset .task-icons {\n    justify-self: end;\n    width: 100%;\n  }\n}\n\n.task-icons i.fas,\n.task-icons i.far {\n  font-size: 2rem;\n  position: relative;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.task-icons i.fa-exclamation {\n  color: transparent;\n  position: absolute;\n  bottom: calc(-100% + 0.4rem);\n  transition: 0.3s;\n}\n\n.task-icons i.show-error {\n  color: orange;\n}\n\n.flag-icon-group {\n  height: 100%;\n  width: 100%;\n  inset: 0;\n  visibility: hidden;\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 0.5rem;\n  border: 0.2rem solid #9d9dfc;\n}\n\n.task-icons i.fa-flag {\n  color: white;\n  -webkit-text-stroke: 0.15rem rgb(126, 126, 126);\n}\n\ni.fa-flag {\n  -webkit-text-stroke: 0.15rem rgb(126, 126, 126);\n}\n\n.flag-icon-group li {\n  margin: 0 1rem;\n}\n\ni.fa-flag.flag-r,\ni.fa-flag.flag-o,\ni.fa-flag.flag-y,\ni.fa-flag.flag-w {\n  font-size: 2rem;\n  z-index: -1;\n  visibility: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  border: none;\n}\n\ni.fa-flag.flag-r {\n  color: red;\n}\n\ni.fa-flag.flag-o {\n  color: orange;\n}\n\ni.fa-flag.flag-y {\n  color: yellow;\n}\n\ni.fa-flag.flag-w {\n  color: white;\n}\n\ni.fa-flag .icon-selector-visibility {\n  z-index: 10;\n  transition: 0.3s;\n  -webkit-user-select: auto;\n     -moz-user-select: auto;\n      -ms-user-select: auto;\n          user-select: auto;\n  visibility: visible;\n  transform: translate(0, 0);\n}\n\nfieldset .task-buttons {\n  gap: 1rem;\n  justify-self: flex-end;\n  display: flex;\n}\n\n.cancel,\n.add {\n  padding: 0.5rem;\n  min-width: 8rem;\n  height: 3.5rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid black;\n}\n\n.cancel {\n  background-color: white;\n}\n\n.add {\n  color: white;\n  background-color: rgb(157, 157, 252);\n}\n\n/*==========\n  Calendar\n============*/\n.calendar {\n  width: 100%;\n  margin: 0 auto;\n  height: 20rem;\n  border-radius: 0.5rem;\n  background-color: white;\n  outline: 0.1rem solid blue;\n  border: 0.1rem solid lightgrey;\n}\n@media (max-width: 1080px) {\n  .calendar {\n    height: 16.1rem;\n  }\n}\n\n.month h3 {\n  margin: 1rem 0 1rem;\n}\n\n.day {\n  margin: 0.4rem;\n  height: 2.125rem;\n  outline: 0.1rem solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n@media (max-width: 1080px) {\n  .day {\n    margin: 0;\n    height: 2.125rem;\n  }\n}\n\n.day p {\n  position: absolute;\n  font-size: 1.2rem;\n}\n\n.calendar button i {\n  width: 96%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\nfooter, footer ul {\n  width: 100%;\n  display: flex;\n  color: white;\n  font-weight: bold;\n  align-items: center;\n  justify-content: space-around;\n}\n\ni.fa-chevron-circle-left {\n  left: 1rem;\n}\n\ni.fa-chevron-circle-right {\n  right: 1rem;\n}\n\ni.fa-chevron-circle-left,\ni.fa-chevron-circle-right {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  background-color: transparent;\n  top: 1.25rem;\n}/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"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",sourceRoot:""}]);const o=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",A=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),A&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),A&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,A,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(A)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);A&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),r="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,A=0;A<t.length;A++)if(t[A].identifier===e){n=A;break}return n}function A(e,A){for(var r={},i=[],o=0;o<e.length;o++){var s=e[o],d=A.base?s[0]+A.base:s[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=n(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var h=a(m,A);A.byIndex=o,t.splice(o,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=A(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=n(r[i]);t[o].references--}for(var s=A(e,a),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=s}}},569:e=>{var t={};e.exports=function(e,n){var A=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var A="";n.supports&&(A+="@supports (".concat(n.supports,") {")),n.media&&(A+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(A+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),A+=n.css,a&&(A+="}"),n.media&&(A+="}"),n.supports&&(A+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(A+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(A,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},922:(e,t,n)=>{var A=n(379),a=n.n(A),r=n(795),i=n.n(r),o=n(569),s=n.n(o),d=n(565),c=n.n(d),l=n(216),u=n.n(l),m=n(589),h=n.n(m),C=n(426),f={};f.styleTagTransform=h(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=u(),a()(C.Z,f),C.Z&&C.Z.locals&&C.Z.locals;var E,p=new Uint8Array(16);function g(){if(!E&&!(E="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return E(p)}const w=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,y=function(e){return"string"==typeof e&&w.test(e)};for(var b=[],v=0;v<256;++v)b.push((v+256).toString(16).substr(1));const B=function(e,t,n){var A=(e=e||{}).random||(e.rng||g)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=A[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(b[e[t+0]]+b[e[t+1]]+b[e[t+2]]+b[e[t+3]]+"-"+b[e[t+4]]+b[e[t+5]]+"-"+b[e[t+6]]+b[e[t+7]]+"-"+b[e[t+8]]+b[e[t+9]]+"-"+b[e[t+10]]+b[e[t+11]]+b[e[t+12]]+b[e[t+13]]+b[e[t+14]]+b[e[t+15]]).toLowerCase();if(!y(n))throw TypeError("Stringified UUID is invalid");return n}(A)},k=(e="New task",t="User",n={},A={},a="white")=>{if(void 0!==e)return{name:e,project:t,dueDate:n,creationDate:A,priorityFlag:a,id:B()}},D=[],x=(e="default")=>({name:e,tasks:[],id:B(),index:{value:0,last:0}}),F=(e,t)=>{!1===((e,t)=>{let n=!1;return t.forEach((t=>e.id===t.id?n=!0:0)),n})(e,t)&&t.push(e)},j=function(e,t){switch(e){case"create":return document.createElement(t);case"selectOne":return document.querySelector(t);case"selectAll":return document.querySelectorAll(t)}};function L(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function T(e){L(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function S(e){L(1,arguments);var t=T(e),n=t.getMonth();return n}function q(e){L(1,arguments);var t=T(e),n=t.getFullYear();return n%400==0||n%4==0&&n%100!=0}let M="";function U(e,t,n){e.style[t]=n}function I(e,t){for(let n=1;n<=e;n++){let e=j("create","div");e.classList.add("day");let A=j("create","p");A.textContent=n,e.appendChild(A),e.addEventListener("click",(e=>{""!==M&&(M.style.backgroundColor="transparent"),e.target.style.backgroundColor="lightgrey",M=e.target})),t.appendChild(e)}}const Y=function(){const e=j("create","div");e.classList.add("calendar"),U(e,"display","grid"),U(e,"align-items","center");const t=[];for(let n=1;n<=12;n++){let A,a=j("create","div");a.classList.add("calendar-month");let r=j("create","h3"),i=j("create","div");switch(i.classList.add("calendar-days"),n){case 1:A="January",I(31,i);break;case 2:A="February",q(Date.now())?I(29,i):I(28,i);break;case 3:A="March",I(31,i);break;case 4:A="April",I(30,i);break;case 5:A="May",I(31,i);break;case 6:A="June",I(30,i);break;case 7:A="July",I(31,i);break;case 8:A="August",I(31,i);break;case 9:A="September",I(30,i);break;case 10:A="October",I(31,i);break;case 11:A="November",I(30,i);break;case 12:A="December",I(31,i)}r.textContent=A,a.appendChild(r),a.appendChild(i),a.id=n,a.classList.add(A),a.classList.add("month"),e.appendChild(a),Number(a.id)!==S(Date.now())+1&&U(a,"visibility","hidden"),U(a,"width","90%"),U(a,"height","100%"),U(i,"display","grid"),U(a,"textAlign","center"),U(a,"position","absolute"),U(a,"backgroundColor","white"),U(a,"justify-self","center"),U(i,"grid-template-columns","repeat(7, 1fr)"),t.push(a)}U(e,"position","relative");const n=j("create","button");n.type="button",n.classList.add("js-close-calendar-btn"),n.textContent="close",e.appendChild(n);const A=j("create","i");A.classList.add("fas"),A.classList.add("fa-chevron-circle-left");const a=j("create","i");return a.classList.add("fas"),a.classList.add("fa-chevron-circle-right"),e.appendChild(A),e.appendChild(a),U(A,"position","absolute"),U(a,"position","absolute"),U(A,"fontSize","2rem"),U(a,"fontSize","2rem"),U(A,"margin-left","0.65rem"),U(a,"margin-right","0.65rem"),a.dataset.index=S(Date.now())+1,a.addEventListener("click",(()=>{!function(e,t,n){e.dataset.index=Number(e.dataset.index),t.dataset.index=Number(t.dataset.index),e.dataset.index++,t.dataset.index++,Number(e.dataset.index)>=13&&(e.dataset.index=1,t.dataset.index=1);for(let t of n.children)"DIV"===t.tagName&&(Number(e.dataset.index)===Number(t.id)?t.style.visibility="visible":t.style.visibility="hidden")}(a,A,e)})),A.dataset.index=S(Date.now())+1,A.addEventListener("click",(()=>{!function(e,t,n){e.dataset.index=Number(e.dataset.index),t.dataset.index=Number(t.dataset.index),e.dataset.index--,t.dataset.index--,Number(e.dataset.index)<=0&&(e.dataset.index=12,t.dataset.index=12);for(let t of n.children)"DIV"===t.tagName&&(Number(e.dataset.index)===Number(t.id)?(t.style.visibility="visible",lastSelectedMonth=t):t.style.visibility="hidden")}(A,a,e)})),{container:e,navLeft:A,navRight:a,closeCal:n,monthTabs:t}};function W(e){return L(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function P(e){if(L(1,arguments),!W(e)&&"number"!=typeof e)return!1;var t=T(e);return!isNaN(Number(t))}var N={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,A=e.formats[n]||e.formats[e.defaultWidth];return A}}const V={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var O={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function H(e){return function(t,n){var A,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):r;A=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;A=e.values[s]||e.values[o]}return A[e.argumentCallback?e.argumentCallback(t):t]}}const J={ordinalNumber:function(e,t){var n=Number(e),A=n%100;if(A>20||A<10)switch(A%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:H({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:H({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:H({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:H({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:H({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function _(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},A=n.width,a=A&&e.matchPatterns[A]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var i,o=r[0],s=A&&e.parsePatterns[A]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?G(s,(function(e){return e.test(o)})):R(s,(function(e){return e.test(o)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=t.slice(o.length);return{value:i,rest:c}}}function R(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function G(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var Q,X={ordinalNumber:(Q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(Q.matchPattern);if(!n)return null;var A=n[0],a=e.match(Q.parsePattern);if(!a)return null;var r=Q.valueCallback?Q.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var i=e.slice(A.length);return{value:r,rest:i}}),era:_({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:_({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:_({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:_({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:_({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const K={code:"en-US",formatDistance:function(e,t,n){var A,a=N[e];return A="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+A:A+" ago":A},formatLong:V,formatRelative:function(e,t,n,A){return O[e]},localize:J,match:X,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Z(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function $(e,t){L(2,arguments);var n=T(e).getTime(),A=Z(t);return new Date(n+A)}function ee(e,t){L(2,arguments);var n=Z(t);return $(e,-n)}var te=864e5;function ne(e){L(1,arguments);var t=1,n=T(e),A=n.getUTCDay(),a=(A<t?7:0)+A-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function Ae(e){L(1,arguments);var t=T(e),n=t.getUTCFullYear(),A=new Date(0);A.setUTCFullYear(n+1,0,4),A.setUTCHours(0,0,0,0);var a=ne(A),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var i=ne(r);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function ae(e){L(1,arguments);var t=Ae(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var A=ne(n);return A}var re=6048e5;function ie(e,t){L(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.weekStartsOn,r=null==a?0:Z(a),i=null==n.weekStartsOn?r:Z(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var o=T(e),s=o.getUTCDay(),d=(s<i?7:0)+s-i;return o.setUTCDate(o.getUTCDate()-d),o.setUTCHours(0,0,0,0),o}function oe(e,t){L(1,arguments);var n=T(e),A=n.getUTCFullYear(),a=t||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:Z(i),s=null==a.firstWeekContainsDate?o:Z(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(A+1,0,s),d.setUTCHours(0,0,0,0);var c=ie(d,t),l=new Date(0);l.setUTCFullYear(A,0,s),l.setUTCHours(0,0,0,0);var u=ie(l,t);return n.getTime()>=c.getTime()?A+1:n.getTime()>=u.getTime()?A:A-1}function se(e,t){L(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.firstWeekContainsDate,r=null==a?1:Z(a),i=null==n.firstWeekContainsDate?r:Z(n.firstWeekContainsDate),o=oe(e,t),s=new Date(0);s.setUTCFullYear(o,0,i),s.setUTCHours(0,0,0,0);var d=ie(s,t);return d}var de=6048e5;function ce(e,t){for(var n=e<0?"-":"",A=Math.abs(e).toString();A.length<t;)A="0"+A;return n+A}const le=function(e,t){var n=e.getUTCFullYear(),A=n>0?n:1-n;return ce("yy"===t?A%100:A,t.length)},ue=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):ce(n+1,2)},me=function(e,t){return ce(e.getUTCDate(),t.length)},he=function(e,t){return ce(e.getUTCHours()%12||12,t.length)},Ce=function(e,t){return ce(e.getUTCHours(),t.length)},fe=function(e,t){return ce(e.getUTCMinutes(),t.length)},Ee=function(e,t){return ce(e.getUTCSeconds(),t.length)},pe=function(e,t){var n=t.length,A=e.getUTCMilliseconds();return ce(Math.floor(A*Math.pow(10,n-3)),t.length)};var ge={G:function(e,t,n){var A=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(A,{width:"abbreviated"});case"GGGGG":return n.era(A,{width:"narrow"});default:return n.era(A,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var A=e.getUTCFullYear(),a=A>0?A:1-A;return n.ordinalNumber(a,{unit:"year"})}return le(e,t)},Y:function(e,t,n,A){var a=oe(e,A),r=a>0?a:1-a;return"YY"===t?ce(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):ce(r,t.length)},R:function(e,t){return ce(Ae(e),t.length)},u:function(e,t){return ce(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(A);case"QQ":return ce(A,2);case"Qo":return n.ordinalNumber(A,{unit:"quarter"});case"QQQ":return n.quarter(A,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(A,{width:"narrow",context:"formatting"});default:return n.quarter(A,{width:"wide",context:"formatting"})}},q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(A);case"qq":return ce(A,2);case"qo":return n.ordinalNumber(A,{unit:"quarter"});case"qqq":return n.quarter(A,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(A,{width:"narrow",context:"standalone"});default:return n.quarter(A,{width:"wide",context:"standalone"})}},M:function(e,t,n){var A=e.getUTCMonth();switch(t){case"M":case"MM":return ue(e,t);case"Mo":return n.ordinalNumber(A+1,{unit:"month"});case"MMM":return n.month(A,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(A,{width:"narrow",context:"formatting"});default:return n.month(A,{width:"wide",context:"formatting"})}},L:function(e,t,n){var A=e.getUTCMonth();switch(t){case"L":return String(A+1);case"LL":return ce(A+1,2);case"Lo":return n.ordinalNumber(A+1,{unit:"month"});case"LLL":return n.month(A,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(A,{width:"narrow",context:"standalone"});default:return n.month(A,{width:"wide",context:"standalone"})}},w:function(e,t,n,A){var a=function(e,t){L(1,arguments);var n=T(e),A=ie(n,t).getTime()-se(n,t).getTime();return Math.round(A/de)+1}(e,A);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):ce(a,t.length)},I:function(e,t,n){var A=function(e){L(1,arguments);var t=T(e),n=ne(t).getTime()-ae(t).getTime();return Math.round(n/re)+1}(e);return"Io"===t?n.ordinalNumber(A,{unit:"week"}):ce(A,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):me(e,t)},D:function(e,t,n){var A=function(e){L(1,arguments);var t=T(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var A=t.getTime(),a=n-A;return Math.floor(a/te)+1}(e);return"Do"===t?n.ordinalNumber(A,{unit:"dayOfYear"}):ce(A,t.length)},E:function(e,t,n){var A=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(A,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(A,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},e:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return ce(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return ce(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var A=e.getUTCDay(),a=0===A?7:A;switch(t){case"i":return String(a);case"ii":return ce(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(A,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(A,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},a:function(e,t,n){var A=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},b:function(e,t,n){var A,a=e.getUTCHours();switch(A=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},B:function(e,t,n){var A,a=e.getUTCHours();switch(A=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var A=e.getUTCHours()%12;return 0===A&&(A=12),n.ordinalNumber(A,{unit:"hour"})}return he(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Ce(e,t)},K:function(e,t,n){var A=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(A,{unit:"hour"}):ce(A,t.length)},k:function(e,t,n){var A=e.getUTCHours();return 0===A&&(A=24),"ko"===t?n.ordinalNumber(A,{unit:"hour"}):ce(A,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):fe(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Ee(e,t)},S:function(e,t){return pe(e,t)},X:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return ye(a);case"XXXX":case"XX":return be(a);default:return be(a,":")}},x:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"x":return ye(a);case"xxxx":case"xx":return be(a);default:return be(a,":")}},O:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+we(a,":");default:return"GMT"+be(a,":")}},z:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+we(a,":");default:return"GMT"+be(a,":")}},t:function(e,t,n,A){var a=A._originalDate||e;return ce(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,A){return ce((A._originalDate||e).getTime(),t.length)}};function we(e,t){var n=e>0?"-":"+",A=Math.abs(e),a=Math.floor(A/60),r=A%60;if(0===r)return n+String(a);var i=t||"";return n+String(a)+i+ce(r,2)}function ye(e,t){return e%60==0?(e>0?"-":"+")+ce(Math.abs(e)/60,2):be(e,t)}function be(e,t){var n=t||"",A=e>0?"-":"+",a=Math.abs(e);return A+ce(Math.floor(a/60),2)+n+ce(a%60,2)}const ve=ge;function Be(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function ke(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const De={p:ke,P:function(e,t){var n,A=e.match(/(P+)(p+)?/)||[],a=A[1],r=A[2];if(!r)return Be(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Be(a,t)).replace("{{time}}",ke(r,t))}};function xe(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Fe=["D","DD"],je=["YY","YYYY"];function Le(e){return-1!==Fe.indexOf(e)}function Te(e){return-1!==je.indexOf(e)}function Se(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var qe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ue=/^'([^]*?)'?$/,Ie=/''/g,Ye=/[a-zA-Z]/;function We(e){return e.match(Ue)[1].replace(Ie,"'")}function Pe(e){return L(1,arguments),T(e).getTime()>Date.now()}function Ne(e){return L(1,arguments),T(e).getFullYear()}function ze(e){L(1,arguments);var t=T(e),n=t.getDate();return n}function Ve(e){L(1,arguments);var t=T(e);return t.setHours(0,0,0,0),t}function Oe(e,t){L(2,arguments);var n=Ve(e),A=Ve(t);return n.getTime()===A.getTime()}function He(e){return L(1,arguments),Oe(e,Date.now())}let Je;const _e=(()=>{const e=D,t=localStorage.getItem("projectList"),n=document.querySelector(".app-aside-projects"),A=()=>localStorage.setItem("projectList",JSON.stringify(e)),a=(t,n)=>{for(const A of e)A.tasks.forEach(((e,a)=>{switch(n){case"add":e.id===t.id&&A.tasks.push(e);break;case"remove":e.id===t.id&&A.tasks.splice(a,1)}}))},r=(e,t)=>{for(const n of t)if(e===n.name)return n;return x(e)},i=(e,t)=>{t.tasks.push(e),e.projectID=t.id},o=(e,t)=>{F(e,t)},s=e=>{const t=e.tasks;0!==t.length&&t.splice(0,t.length-1)},d={modal:{task:{icons:document.querySelectorAll(".js-task-icon")}},calendar:Y(),notifications:document.querySelector(".user-notify"),aside:document.querySelector(".app-aside-projects"),aside_dates:document.querySelector(".app-aside-calendar"),mainWindow:document.querySelector(".app-main-task-window"),dbHeading:document.querySelector(".dashboard-title"),dashboard:document.querySelector(".dashboard-tasks"),today:document.querySelector(".dashboard-today"),upcoming:document.querySelector(".dashboard-upcoming"),search:document.querySelector(".dashboard-search"),dbProject:document.querySelector(".dashboard-project")};document.querySelector(".input-calendar").appendChild(d.calendar.container);const c={calendar:{show:document.querySelector(".js-calendar-icon-btn"),hide:document.querySelector(".js-close-calendar-btn"),daysInMonths:d.calendar.container.childNodes}};c.calendar.show.addEventListener("click",(()=>{d.calendar.container.style.visibility="visible",d.calendar.monthTabs.forEach((e=>{e.id===d.calendar.navLeft.dataset.index&&(e.style.visibility="visible")}))})),c.calendar.hide.addEventListener("click",(()=>{d.calendar.monthTabs.forEach((e=>e.style.visibility="hidden")),d.calendar.container.style.visibility="hidden"}));const l={task:{input:document.querySelector(".input-task")},project:{input:document.querySelector(".input-project"),drpDn:document.querySelector(".input-dropdown-icon"),group:document.querySelector(".dropdown-set-project"),menu:[]},date:{day:document.querySelector(".input-day"),year:document.querySelector(".input-year"),month:document.querySelector(".input-month"),myDay:document.querySelector(".input-day").children[0],myYear:document.querySelector(".input-year").children[0],myMonth:document.querySelector(".input-month").children[0],yearUp:document.querySelector(".year-nav-up"),yearDn:document.querySelector(".year-nav-down")},priorityFlag:{icon:document.querySelector(".flg"),group:document.querySelector(".flag-icon-group")}};function u(){_e.userInputs.date.myYear.textContent=Ne(Date.now()),"day"===l.date.myDay.textContent&&(l.date.myDay.textContent=ze(Date.now())),"month"===l.date.myMonth.textContent&&(l.date.myMonth.textContent=S(Date.now())+1)}l.date.group=[l.date.day,l.date.year,l.date.month],c.calendar.daysInMonths.forEach((e=>{"DIV"===e.tagName&&e.children[1].childNodes.forEach((t=>t.addEventListener("click",(t=>function(e,t){l.date.myDay.textContent=e.target.textContent,l.date.myMonth.textContent=t.id,"year"===l.date.myYear.textContent&&(l.date.myYear.textContent=Ne(Date.now()))}(t,e)))))})),l.date.yearUp.addEventListener("click",(e=>{if("year"===l.date.myYear.textContent)return u();let t=Number(l.date.myYear.textContent);t++,l.date.myYear.textContent=t})),l.date.yearDn.addEventListener("click",(e=>{if("year"===l.date.myYear.textContent)return u();let t=Number(l.date.myYear.textContent);t--,l.date.myYear.textContent=t})),l.project.drpDn.addEventListener("click",(()=>{if(0===l.project.menu.length){const t=document.createElement("ul");if(t.classList.add("project-select-menu"),t.style.width="100%",t.style.height="auto",t.style.position="relative",t.style.visibility="visible",0===e.length){const e=document.createElement("li");e.classList.add("project-selector"),e.textContent="Empty",e.style.position="relative",e.style.cursor="pointer",t.appendChild(e)}else for(const n of e){const e=document.createElement("li");e.classList.add("project-selector"),e.style.cursor="pointer",e.textContent=n.name,e.addEventListener("click",(t=>{l.project.input.value=e.textContent})),t.appendChild(e)}l.project.menu.push(t),l.project.group.appendChild(t)}else l.project.menu[0].remove(),l.project.menu=[]}));const m=[l.task.input,l.project.input,l.project.drpDn,l.date.day,l.date.month,l.date.year,d.calendar.container,l.priorityFlag.group],h={lastView:d.dashboard,currentView:d.dashboard,updateProjectTaskTotal:function(e){for(const t of e)for(const e of d.aside.children)if(t.id===e.id){if(0===t.tasks.length)return e.children[1].textContent="";e.children[1].textContent=t.tasks.length}},updateNotifications:function(e){for(const t of e)if(0!==t.tasks.length)return d.notifications.classList.add("notify");d.notifications.classList.remove("notify")},clearLastView:e=>{let t=[];if(0!==e.children.length)for(const n of e.children)t.push(n);t.forEach((e=>e.remove())),t=[]},populateByProject:function(t,n){this.currentView=t,this.lastView.style.position="absolute",this.currentView.style.position="relative";let A=[],a=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)a.push(e);a.forEach((e=>e.remove())),a=[];for(const t of e)0!==t.tasks.length&&t.tasks.forEach((e=>{t.id===n&&A.push(tt(e))}));A.forEach((e=>this.currentView.appendChild(e))),A=[],this.lastView=this.currentView},search:function(e,t){this.currentView=e,this.clearLastView(this.lastView),this.lastView.style.position="absolute",this.currentView.style.position="relative";let n=[];t.forEach((e=>n.push(tt(e)))),n.forEach((e=>this.currentView.appendChild(e))),n=[],this.lastView=this.currentView},sort:function(t,n){if(this.currentView=t,this.currentView===this.lastView)return;this.clearLastView(this.lastView),this.lastView.style.position="absolute",this.currentView.style.position="relative";let A=[];for(const t of e)0!==t.tasks.length&&t.tasks.forEach((e=>{(null===n||n(new Date(e.dueDate.year,e.dueDate.month-1,e.dueDate.day)))&&A.push(tt(e))}));A.forEach((e=>this.currentView.appendChild(e))),A=[],this.lastView=this.currentView}},C={observers:{config:{attributes:!0,childList:!0,subtree:!0}},notify:(e,t,n)=>{a(e,t),A(),n.remove()}};return C.observers.mainWindow=new MutationObserver(((t,n)=>{h.updateProjectTaskTotal(e),h.updateNotifications(e)})),C.observers.mainWindow.observe(d.mainWindow,C.observers.config),{projects:e,elements:d,userInputs:l,keyInputGroup:m,view:h,controller:C,_notifyProject:a,_projectViewHandler:(e,t)=>{d.dbHeading.textContent=t.name,h.populateByProject(d.dbProject,t.id);for(let e of d.aside_dates.children)e.classList.remove("js-aside-highlight");void 0!==Je&&Je.remove("js-aside-highlight"),e.target.classList.add("js-aside-highlight"),Je=e.target.classList},restore:()=>{t&&t.length&&JSON.parse(t).forEach((t=>{if(0!==t.tasks.length)for(const A of t.tasks){const t=r(A.project,e);i(A,t);let a=e.length;o(t,e),a!==e.length&&nt(t,n);const s=tt(A);switch(h.currentView){case d.dashboard:h.currentView.appendChild(s);break;case d.today:Pe(new Date(A.dueDate.year,A.dueDate.month-1,A.dueDate.day))||h.currentView.appendChild(s);break;case d.upcoming:Pe(new Date(A.dueDate.year,A.dueDate.month-1,A.dueDate.day))&&h.currentView.appendChild(s)}}}))},_updateStorage:A,_getTaskProject:r,_addTaskToProject:i,_removeProjectFromList:(e,t)=>{0!==t.length&&t.forEach(((n,A)=>{e.id===n.id&&(s(n),t.splice(A))}))},_removeAllTasksFromProject:s,_addProjectToProjectsIndex:o}})();document.querySelectorAll(".pointer").forEach((e=>{e.addEventListener("click",Qe)}));const Re=document.querySelector("dialog"),Ge=document.querySelector(".flg");function Qe(e){Re.showModal();const t=k(),n=document.querySelector("form"),A=n.elements;A.task.addEventListener("input",(e=>{document.querySelector(".fa-exclamation").classList.remove("show-error")}));const a=document.querySelectorAll(".priority-flag"),r=document.querySelector(".cancel");function i(e){if(e.preventDefault(),t.name=A.task.value,document.querySelector(".fa-exclamation").classList.remove("show-error"),""===t.name)return document.querySelector(".fa-exclamation").classList.add("show-error");t.project=A.project.value,""===t.project&&(t.project="User");const d=_e._getTaskProject(t.project,_e.projects);_e._addTaskToProject(t,d);const c=Date.now();t.creationDate.year=Ne(c),t.creationDate.month=S(c)+1,t.creationDate.day=ze(c);const l=[Number(_e.userInputs.date.myYear.textContent),Number(_e.userInputs.date.myMonth.textContent),Number(_e.userInputs.date.myDay.textContent)];l.forEach((e=>{isNaN(e)?t.dueDate="":(t.dueDate.year=l[0],t.dueDate.month=l[1],t.dueDate.day=l[2])})),t.time=A.time.value,t.comment=A.comment.value;let u=_e.projects.length;_e._addProjectToProjectsIndex(d,_e.projects),u!==_e.projects.length&&nt(d,document.querySelector(".app-aside-projects")).addEventListener("click",(e=>{_e._projectViewHandler(e,d)}));const m=tt(t),h=m.querySelector(".task-complete"),C=m.querySelector(".congrats-mask"),f=m.querySelector(".fa-trash-alt");switch(h.addEventListener("click",(e=>{e.target.classList.remove("far"),e.target.classList.remove("fa-circle"),e.target.classList.add("fas"),e.target.classList.add("fa-check-circle"),e.target.style.color="green",setTimeout((()=>{C.classList.add("show-congrats-mask")}),1200),setTimeout((()=>{m.classList.add("remove-task")}),2400),setTimeout((()=>{_e._notifyProject(t,"remove"),_e._updateStorage(),m.remove()}),3600)})),f.addEventListener("click",(e=>{m.classList.add("remove-task"),setTimeout((()=>{_e._notifyProject(t,"remove"),_e._updateStorage(),m.remove()}),1200)})),_e.view.currentView){case _e.elements.dashboard:_e.view.currentView.appendChild(m);break;case _e.elements.today:Pe(t.dueDate)||_e.view.currentView.appendChild(m);break;case _e.elements.upcoming:Pe(t.dueDate)&&_e.view.currentView.appendChild(m)}_e._updateStorage(),Re.close(),n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}function o(e){t.priorityFlag=getComputedStyle(e.target).color,Ge.style.color=getComputedStyle(e.target).color}function s(e){e.preventDefault(),Re.close();for(let e in t)delete t[e];n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}n.addEventListener("submit",i),a.forEach((e=>{e.addEventListener("click",o)})),r.addEventListener("click",s)}_e.elements.modal.task.icons.forEach((e=>{e.addEventListener("click",(e=>{for(const e of _e.elements.modal.task.icons)e.classList.remove("modal-icon-select");for(const e of _e.userInputs.priorityFlag.group.children)e.children[0].style.visibility="hidden";switch(_e.keyInputGroup.forEach((e=>{""!==e&&(e.style.visibility="hidden")})),e.target.classList.add("modal-icon-select"),e.target.classList[2]){case"pen":_e.userInputs.task.input.style.visibility="visible",_e.userInputs.task.input.focus();break;case"prj":_e.userInputs.project.input.style.visibility="visible",_e.userInputs.project.drpDn.style.visibility="visible",_e.userInputs.project.input.focus();break;case"cal":for(const e of _e.userInputs.date.group)e.style.visibility="visible";break;case"flg":_e.userInputs.priorityFlag.group.style.visibility="visible";for(const e of _e.userInputs.priorityFlag.group.children)e.children[0].style.visibility="visible"}}))}));const Xe=document.querySelector("aside");document.querySelector(".aside-drawer-icon").addEventListener("click",(()=>Xe.classList.toggle("js-aside-drawer-animation")));for(let e of _e.elements.aside_dates.children)e.addEventListener("click",(e=>{void 0!==Je&&Je.remove("js-aside-highlight");for(let e of _e.elements.aside_dates.children)e.classList.remove("js-aside-highlight");e.target.classList.add("js-aside-highlight"),Ze(e)}));let Ke="Tasks";function Ze(e){switch(e.target.textContent.trim()){case"Tasks":Ke="Tasks",_e.elements.dbHeading.textContent="Tasks",_e.view.sort(_e.elements.dashboard,null);break;case"Today":Ke="Today",_e.elements.dbHeading.textContent="Today",_e.view.sort(_e.elements.today,He);break;case"Upcoming":Ke="Upcoming",_e.elements.dbHeading.textContent="Upcoming",_e.view.sort(_e.elements.upcoming,Pe)}}document.querySelector(".js-projects-dropdown").addEventListener("click",(e=>{e.target.style.backgroundColor="transparent",e.target.parentNode.parentNode.classList.toggle("dropdown-menu"),e.target.parentNode.children[1].classList.toggle("dropdown-state"),e.target.classList.add("js-aside-highlight")}));let $e=[];document.querySelector(".new-task");const et=document.querySelector(".js-search");function tt(e){const t=document.createElement("li");t.id=e.id,t.dataset.project=e.projectID,t.classList.add("task-card");const n=document.createElement("div");n.classList.add("congrats-mask"),n.style.position="absolute",n.style.width="100%",n.style.height="100%";const A=document.createElement("p");A.classList.add("congrats-message"),A.textContent="Great Work!",n.appendChild(A),t.appendChild(n);const a=document.createElement("div");a.classList.add("task-check-col-1");const r=document.createElement("i");r.classList.add("far"),r.classList.add("fa-circle"),r.classList.add("task-complete"),r.addEventListener("click",(A=>{A.target.classList.remove("far"),A.target.classList.remove("fa-circle"),A.target.classList.add("fas"),A.target.classList.add("fa-check-circle"),A.target.style.color="green",setTimeout((()=>n.classList.add("show-congrats-mask")),1200),setTimeout((()=>t.classList.add("remove-task")),2400),setTimeout((()=>_e.controller.notify(e,"remove",t)),3600)}));const i=document.createElement("i");i.classList.add("fas"),i.classList.add("fa-flag"),i.classList.add("task-priority"),i.style.color=e.priorityFlag,a.appendChild(r),a.appendChild(i),t.appendChild(a);const o=document.createElement("div");o.classList.add("task-info");const s=document.createElement("h4");s.classList.add("task-heading"),s.textContent=e.name,o.appendChild(s);const d=document.createElement("ul");d.classList.add("task-details"),o.appendChild(d);const c=document.createElement("li");c.classList.add("task-date");const l=document.createElement("i");l.classList.add("far"),""===e.dueDate?l.classList.add("fa-calendar"):l.classList.add("fa-calendar-check"),l.classList.add("task-date-icon"),c.appendChild(l);const u=document.createElement("p");u.classList.add("task-date-text"),""!==e.dueDate?u.textContent=function(e,t,n){L(2,arguments);var A=String(t),a=n||{},r=a.locale||K,i=r.options&&r.options.firstWeekContainsDate,o=null==i?1:Z(i),s=null==a.firstWeekContainsDate?o:Z(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=r.options&&r.options.weekStartsOn,c=null==d?0:Z(d),l=null==a.weekStartsOn?c:Z(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var u=T(e);if(!P(u))throw new RangeError("Invalid time value");var m=xe(u),h=ee(u,m),C={firstWeekContainsDate:s,weekStartsOn:l,locale:r,_originalDate:u};return A.match(Me).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,De[t])(e,r.formatLong,C):e})).join("").match(qe).map((function(n){if("''"===n)return"'";var A=n[0];if("'"===A)return We(n);var i=ve[A];if(i)return!a.useAdditionalWeekYearTokens&&Te(n)&&Se(n,t,e),!a.useAdditionalDayOfYearTokens&&Le(n)&&Se(n,t,e),i(h,n,r.localize,C);if(A.match(Ye))throw new RangeError("Format string contains an unescaped latin alphabet character `"+A+"`");return n})).join("")}(new Date(e.dueDate.year,e.dueDate.month-1,e.dueDate.day),"eee dd MMM yyyy"):u.textContent="",""===e.dueDate&&(u.textContent="",l.style.color="lightgrey"),c.appendChild(u),d.appendChild(c);const m=document.createElement("li");m.classList.add("task-project"),m.style.width="45%";const h=document.createElement("p");h.classList.add("task-project-text"),h.textContent=e.project,m.appendChild(h);const C=document.createElement("i");C.classList.add("fas"),C.classList.add("fa-circle"),C.classList.add("task-project-icon"),m.appendChild(C),d.appendChild(m);const f=document.createElement("li");f.classList.add("task-remove");const E=document.createElement("i");return E.classList.add("far"),E.classList.add("fa-trash-alt"),E.addEventListener("click",(()=>{t.classList.add("remove-task"),setTimeout((()=>_e.controller.notify(e,"remove",t)),1200)})),C.classList.add("task-remove-icon"),f.appendChild(E),d.appendChild(f),t.appendChild(o),t}function nt(e,t){const n=document.createElement("li");n.id=e.id,n.classList.add("project");const A=document.createElement("div");A.classList.add("project-info");const a=document.createElement("i");a.classList.add("fas"),a.classList.add("fa-circle"),a.classList.add("project-icon"),A.appendChild(a);const r=document.createElement("p");r.classList.add("project-name"),r.textContent=e.name,A.appendChild(r),n.appendChild(A);const i=document.createElement("p");return i.classList.add("project-task-count"),i.textContent=e.tasks.length,n.appendChild(i),n.addEventListener("click",(t=>{_e.elements.dbHeading.textContent=e.name,_e.view.populateByProject(_e.elements.dbProject,e.id);for(let e of _e.elements.aside_dates.children)e.classList.remove("js-aside-highlight");void 0!==Je&&Je.remove("js-aside-highlight"),t.target.classList.add("js-aside-highlight"),Je=n.classList})),t.appendChild(n),n}et.addEventListener("input",(e=>{_e.projects.forEach((t=>{for(const n of t.tasks)n.name.toLowerCase()===e.target.value.toLowerCase()&&$e.push(n)})),_e.view.search(_e.elements.search,$e),$e=[]})),et.addEventListener("blur",(e=>{$e=[]})),_e.restore()}},e=>{e(e.s=922)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU1vVixLQUFRcFYsRUFBUUksTUFDckJnVixFQUFLclYsS0FBS0YsZ0JBQWtCckMsRUFBRVIsT0FBT3FELE1BQU1SLGVBQzdDMGMsR0FBWTlqQixLQUFLMmMsTUFJdkJWLEdBQUt1RCxLQUFLM0IsT0FBTzVCLEdBQUtpQixTQUFTVyxPQUFRaUcsSUFDdkNBLEdBQWMsTUFHaEJqRyxHQUFPelQsaUJBQWlCLFFBQVNyRixJQUcvQitlLEdBQWMsTUFtTGhCN0gsR0FBS29GLFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvVGFzay5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9Qcm9qZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL0RvYy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZ2V0TW9udGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzTGVhcFllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvQ2FsZW5kYXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0Z1dHVyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZ2V0WWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZ2V0RGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RvZGF5L2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1VYnVudHUmZGlzcGxheT1zd2FwKTtcIl0pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9VGVrbzp3Z2h0QDYwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG46cm9vdCB7XFxuICBmb250LXNpemU6IDYyLjUlO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbn1cXG5cXG5wLCBsaSwgbGVnZW5kLCBoMSwgaDIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJVYnVudHVcXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5pLCBidXR0b24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ud3JhcHBlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjIzLCAyMjIsIDIyMik7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi8qPT09PT09PT09XFxuICBOYXYgQmFyXFxuPT09PT09PT09PT0qL1xcbm5hdiwgZm9vdGVyIHtcXG4gIHotaW5kZXg6IDE7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMS4ycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlkOWRmYztcXG59XFxuXFxubmF2IGkge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAyLjNyZW07XFxufVxcblxcbm5hdiAudXNlci1hbGVydHMge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4udXNlci1hbGVydHMgaTpsYXN0LWNoaWxkIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLnVzZXItbm90aWZ5IHtcXG4gIHotaW5kZXg6IDE7XFxuICB0b3A6IC0wLjFyZW07XFxuICBsZWZ0OiAxLjNyZW07XFxuICB0cmFuc2l0aW9uOiAwLjlzO1xcbiAgZm9udC1zaXplOiAzcmVtO1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubm90aWZ5IHtcXG4gIGNvbG9yOiByZWQ7XFxuICBmb250LXNpemU6IDEuMXJlbTtcXG59XFxuXFxubmF2IHVsIHtcXG4gIHdpZHRoOiAzNSU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5wb2ludGVyLCBpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxubmF2IC5sb2dvIHtcXG4gIHdpZHRoOiAzNSU7XFxuICBjdXJzb3I6IGF1dG87XFxuICBmb250LXNpemU6IDRyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxufVxcblxcbi5uYXYtc2VhcmNoIHtcXG4gIHdpZHRoOiA4MCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLm5hdi1zZWFyY2ggaW5wdXQge1xcbiAgd2lkdGg6IDYwJTtcXG4gIGhlaWdodDogM3JlbTtcXG4gIG1hcmdpbjogMCAxcmVtO1xcbiAgcGFkZGluZzogMC41cmVtO1xcbiAgZm9udC1zaXplOiAxLjRyZW07XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbi5uYXYtc2VhcmNoIGlucHV0OmZvY3VzLXZpc2libGUge1xcbiAgb3V0bGluZTogMC4ycmVtIHNvbGlkIGxpZ2h0Ymx1ZTtcXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDYyMHB4KSB7XFxuICAubmF2LXNldHRpbmdzIGxpOmxhc3QtY2hpbGQgaSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogLTEwMHZ3O1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICB9XFxufVxcblxcbi8qPT09PT09PT09PT1cXG4gIERhc2hib2FyZFxcbmFwcC13aW5kb3c6IGRpdlxcbiAgLWFzaWRlXFxuICAgIC11bDogYXBwLWFzaWRlLWNhbGVuZGFyXFxuICAgIC11bDogYXBwLWFzaWRlLXByb2plY3RzLWxpc3RcXG5cXG4gIC1tYWluOiBhcHAtbWFpbi10YXNrLXdpbmRvd1xcbiAgICAtZGFzaGJvYXJkXFxuPT09PT09PT09PT09PSovXFxuLmFwcC13aW5kb3cge1xcbiAgZmxleDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbmFzaWRlIHtcXG4gIHdpZHRoOiAyOHJlbTtcXG4gIG1pbi13aWR0aDogMjhyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xcbiAgcGFkZGluZzogMnJlbSAycmVtIDVyZW0gMnJlbTtcXG4gIGZpbHRlcjogZHJvcC1zaGFkb3coMCAwLjFyZW0gMC4ycmVtIHJnYmEoMCwgMCwgMCwgMC41KSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA4ODBweCkge1xcbiAgYXNpZGUge1xcbiAgICB0b3A6IDA7XFxuICAgIHotaW5kZXg6IDI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBsZWZ0OiAtMjhyZW07XFxuICB9XFxufVxcblxcbi5qcy1hc2lkZS1kcmF3ZXItYW5pbWF0aW9uIHtcXG4gIGxlZnQ6IDA7XFxufVxcblxcbi5hc2lkZS1kcmF3ZXItaWNvbiB7XFxuICB3aWR0aDogM3JlbTtcXG4gIGhlaWdodDogNXJlbTtcXG4gIGhlaWdodDogLXdlYmtpdC1maXQtY29udGVudDtcXG4gIGhlaWdodDogLW1vei1maXQtY29udGVudDtcXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICBwYWRkaW5nOiAwLjVyZW0gMC41cmVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuNXJlbTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcmlnaHQ6IC0ycmVtO1xcbiAgdG9wOiAxMy41cmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uYXNpZGUtZHJhd2VyLWljb24gaSB7XFxuICByaWdodDogLTAuM3JlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG4gIGNvbG9yOiAjOWQ5ZGZjO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogODgwcHgpIHtcXG4gIC5hc2lkZS1kcmF3ZXItaWNvbiB7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB9XFxufVxcblxcbmFzaWRlIHVsIHtcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxufVxcblxcbmFzaWRlIGxpIHtcXG4gIGdhcDogMXJlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGhlaWdodDogMy41cmVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAxLjdyZW07XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLyo9PT09PT09PT09PT09PT09PT1cXG4gIEFzaWRlOlxcbiAgICBUYXNrIE92ZXJ2aWV3XFxuPT09PT09PT09PT09PT09PT09PT0qL1xcbi5hcHAtYXNpZGUtY2FsZW5kYXIge1xcbiAgaGVpZ2h0OiAyMHJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5qcy1hc2lkZS1oaWdobGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZWZlZjtcXG59XFxuXFxuLyo9PT09PT09PT09PT09PT09PT1cXG4gIDxsaT4gQnV0dG9uIE1hc2tcXG49PT09PT09PT09PT09PT09PT09PSovXFxubGkge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubWFzay1idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB6LWluZGV4OiAxO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4vKj09PT09PT09PT09PVxcbiAgQXNpZGU6XFxuICAgIFByb2plY3RzXFxuPT09PT09PT09PT09PT0qL1xcbmFzaWRlIHVsOmxhc3QtY2hpbGQge1xcbiAgZmxleDogMTtcXG4gIGhlaWdodDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogLXdlYmtpdC1maXQtY29udGVudDtcXG4gIGhlaWdodDogLW1vei1maXQtY29udGVudDtcXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGk6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDJyZW0pO1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAycmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuYXNpZGUgdWw6bGFzdC1jaGlsZCBsaTpub3QoOmZpcnN0LWNoaWxkKSBpIHtcXG4gIGNvbG9yOiBibHVlO1xcbiAgZm9udC1zaXplOiAxLjNyZW07XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGk6bm90KDpmaXJzdC1jaGlsZCkgLnByb2plY3QtaW5mbyB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnByb2plY3RzLWRyb3Bkb3duLWljb24ge1xcbiAgZm9udC1zaXplOiAyLjJyZW07XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMCk7XFxufVxcblxcbi5kcm9wZG93bi1zdGF0ZSB7XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcXG59XFxuXFxuYXNpZGUgdWw6bGFzdC1jaGlsZC5kcm9wZG93bi1tZW51IHtcXG4gIGZsZXg6IDAgMCA0LjlyZW07XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbn1cXG5cXG4vKj09PT09PT09PT09PT1cXG4gIERhc2hib2FyZDpcXG4gICAgVGFzayB2aWV3XFxuPT09PT09PT09PT09PT09Ki9cXG5tYWluIHtcXG4gIGZsZXg6IDE7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogM3JlbSA0cmVtIDNyZW0gN3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogODgwcHgpIHtcXG4gIG1haW4ge1xcbiAgICBwYWRkaW5nOiAzcmVtIDIuOHJlbTtcXG4gIH1cXG59XFxuXFxubWFpbiBoMiB7XFxuICBtYXJnaW4tYm90dG9tOiA0cmVtO1xcbn1cXG5cXG4ubmV3LXRhc2sge1xcbiAgZ2FwOiAxcmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1sZWZ0OiAxLjVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbiAgY29sb3I6IHJnYigxMTAsIDExMCwgMTEwKTtcXG59XFxuXFxuLmRhc2hib2FyZC10YXNrcyxcXG4uZGFzaGJvYXJkLXRvZGF5LFxcbi5kYXNoYm9hcmQtdXBjb21pbmcsXFxuLmRhc2hib2FyZC1zZWFyY2gsXFxuLmRhc2hib2FyZC1wcm9qZWN0IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IC13ZWJraXQtZml0LWNvbnRlbnQ7XFxuICBoZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLmRhc2hib2FyZC10YXNrcyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jb21wbGV0ZS10YXNrIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDEwMHZ3KTtcXG59XFxuXFxuLnJlbW92ZS10YXNrIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDB2dyk7XFxufVxcblxcbi5jb25ncmF0cy1tYXNrIHtcXG4gIHotaW5kZXg6IC0xO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgaW5zZXQ6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLmNvbmdyYXRzLW1hc2sgcCB7XFxuICB0b3A6IDAuNXJlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxuICBmb250LXNpemU6IDVyZW07XFxuICBmb250LWZhbWlseTogXFxcIlRla29cXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4uc2hvdy1jb25ncmF0cy1tYXNrIHtcXG4gIHotaW5kZXg6IDIwO1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5ZDlkZmM7XFxufVxcbi5zaG93LWNvbmdyYXRzLW1hc2sgcCB7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi50YXNrLWNhcmQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZzogMS41cmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0MCwgMjQwLCAyNDApO1xcbiAgYm9yZGVyLWJvdHRvbTogMC4xcmVtIHNvbGlkIGxpZ2h0Z3JheTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICB0cmFuc2l0aW9uOiAxLjJzO1xcbn1cXG5cXG4udGFzay1jaGVjay1jb2wtMSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxuLnRhc2stY2hlY2stY29sLTEgaTpmaXJzdC1jaGlsZCB7XFxuICBjb2xvcjogIzlkOWRmYztcXG4gIGZvbnQtc2l6ZTogMi4yNXJlbTtcXG59XFxuXFxuLnRhc2staW5mbyB7XFxuICBnYXA6IDFyZW07XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnRhc2stZGV0YWlscyB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLnRhc2stZGV0YWlscyBsaSB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnRhc2stZGV0YWlscyBsaSBwIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcbi50YXNrLWRldGFpbHMgbGk6bm90KDpsYXN0LWNoaWxkKSB7XFxuICB3aWR0aDogMzUlO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAudGFzay1kZXRhaWxzIGxpOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG59XFxuLnRhc2stZGV0YWlscyBsaTpmaXJzdC1jaGlsZCB7XFxuICBtaW4td2lkdGg6IDEwcmVtO1xcbn1cXG4udGFzay1kZXRhaWxzIC50YXNrLXByb2plY3Qge1xcbiAgd2lkdGg6IC13ZWJraXQtbWF4LWNvbnRlbnQ7XFxuICB3aWR0aDogLW1vei1tYXgtY29udGVudDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDEwODBweCkge1xcbiAgLnRhc2stZGV0YWlscyAudGFzay1wcm9qZWN0IHtcXG4gICAgd2lkdGg6IC13ZWJraXQtbWF4LWNvbnRlbnQ7XFxuICAgIHdpZHRoOiAtbW96LW1heC1jb250ZW50O1xcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxuICB9XFxufVxcbi50YXNrLWRldGFpbHMgLnRhc2stcHJvamVjdCBpIHtcXG4gIGNvbG9yOiBibHVlO1xcbn1cXG4udGFzay1kZXRhaWxzIC50YXNrLXByb2plY3QgcCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxuLnRhc2stY2FyZCAudGFzay1yZW1vdmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxcmVtO1xcbiAgcmlnaHQ6IDEuNnJlbTtcXG59XFxuXFxuLyo9PT09PT09PT09PT09PT09XFxuICBOZXcgVGFzayBNb2RhbFxcbj09PT09PT09PT09PT09PT09PSovXFxuZGlhbG9nIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZGlhbG9nLXRhc2stYmFyIHtcXG4gIHdpZHRoOiA3MCU7XFxuICBtaW4taGVpZ2h0OiAxM3JlbTtcXG4gIGhlaWdodDogLXdlYmtpdC1tYXgtY29udGVudDtcXG4gIGhlaWdodDogLW1vei1tYXgtY29udGVudDtcXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICBwYWRkaW5nOiAyLjVyZW0gMS41cmVtIDEuNXJlbTtcXG4gIG1hcmdpbjogNnJlbSA0cmVtIDAgYXV0bztcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJveC1zaGFkb3c6IDAgMCAwLjVyZW0gMC4xcmVtIGJsYWNrO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuZGlhbG9nLXRhc2stYmFyIHtcXG4gICAgd2lkdGg6IDk1JTtcXG4gICAgbWFyZ2luOiA2cmVtIGF1dG8gMDtcXG4gIH1cXG59XFxuXFxuLmpzLXRhc2staWNvbiB7XFxuICBoZWlnaHQ6IDRyZW07XFxuICB3aWR0aDogNHJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBib3JkZXI6IDAuMnJlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcblxcbi5tb2RhbC1pY29uLXNlbGVjdCB7XFxuICBib3JkZXI6IDAuMnJlbSBkYXNoZWQgIzlkOWRmYztcXG59XFxuXFxuZm9ybSB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XFxufVxcblxcbmZvcm0gaW5wdXQge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gIGJvcmRlcjogMC4ycmVtIHNvbGlkICM5ZDlkZmM7XFxufVxcblxcbi5pbnB1dHMge1xcbiAgd2lkdGg6IDM1JTtcXG4gIGhlaWdodDogMy45cmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogODgwcHgpIHtcXG4gIC5pbnB1dHMge1xcbiAgICB3aWR0aDogNTcuNSU7XFxuICB9XFxufVxcblxcbi5pbnB1dHMgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmlucHV0cyAuaW5wdXQtdGFzayB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG5cXG4uaW5wdXRzIGlucHV0OmZvY3VzLXZpc2libGUge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLmRyb3Bkb3duLXNldC1wcm9qZWN0LFxcbi5kcm9wZG93bi1zZXQtZGF0ZSxcXG4uaW5wdXQtZGF0ZSxcXG4uaW5wdXQtdGltZSxcXG4uaW5wdXQtY29tbWVudCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLmRyb3Bkb3duLXNldC1wcm9qZWN0IGksXFxuLmRyb3Bkb3duLXNldC1kYXRlIGksXFxuLmlucHV0LWRhdGUgaSxcXG4uaW5wdXQtdGltZSBpLFxcbi5pbnB1dC1jb21tZW50IGkge1xcbiAgd2lkdGg6IDNyZW07XFxuICBoZWlnaHQ6IDkwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB0b3A6IDAuMnJlbTtcXG4gIHJpZ2h0OiAwLjJyZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3JkZXItcmFkaXVzOiAwLjFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDYyMHB4KSB7XFxuICAuZHJvcGRvd24tc2V0LXByb2plY3QgaSxcXG4uZHJvcGRvd24tc2V0LWRhdGUgaSxcXG4uaW5wdXQtZGF0ZSBpLFxcbi5pbnB1dC10aW1lIGksXFxuLmlucHV0LWNvbW1lbnQgaSB7XFxuICAgIGhlaWdodDogODUlO1xcbiAgICB0b3A6IDAuM3JlbTtcXG4gICAgbGVmdDogYXV0bztcXG4gIH1cXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0LW1lbnUge1xcbiAgei1pbmRleDogNTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXI6IDAuMXJlbSBkYXNoZWQgbGlnaHRibHVlO1xcbiAgYm9yZGVyLXRvcDogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMXJlbTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxcmVtO1xcbiAgZ2FwOiAxcmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0cmFuc2l0aW9uOiAwLjJzO1xcbiAgcGFkZGluZzogMXJlbSAxcmVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUzLCAyMzcsIDI0MCk7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yOmhvdmVyIHtcXG4gIGJvcmRlcjogMC4xcmVtIHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4uaW5wdXQtZGF0ZSxcXG4uaW5wdXQtdGltZSxcXG4uaW5wdXQtY29tbWVudCxcXG4uZHJvcGRvd24tc2V0LWRhdGUge1xcbiAgdG9wOiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4uaW5wdXQteWVhciB7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4uZHJvcGRvd24tc2V0LWRhdGUge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZ2FwOiAwLjVyZW07XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMzMuMzMzMzMzMzMzMyUpO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogNjIwcHgpIHtcXG4gIC5kcm9wZG93bi1zZXQtZGF0ZSB7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDhyZW0pO1xcbiAgfVxcbn1cXG5cXG4uaW5wdXQtY2FsZW5kYXIge1xcbiAgei1pbmRleDogNTtcXG4gIG1pbi13aWR0aDogMjByZW07XFxuICBncmlkLWNvbHVtbjogc3BhbiAzO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAtMTNyZW07XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMDgwcHgpIHtcXG4gIC5pbnB1dC1jYWxlbmRhciB7XFxuICAgIHRvcDogLTkuM3JlbTtcXG4gIH1cXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDYyMHB4KSB7XFxuICAuaW5wdXQtY2FsZW5kYXIge1xcbiAgICB0b3A6IC03cmVtO1xcbiAgfVxcbn1cXG5cXG4uaW5wdXQtY2FsZW5kYXIgYnV0dG9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMC42cmVtO1xcbiAgcmlnaHQ6IDEuNXJlbTtcXG4gIHdpZHRoOiAxMHJlbTtcXG4gIGhlaWdodDogM3JlbTtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDEwODBweCkge1xcbiAgLmlucHV0LWNhbGVuZGFyIGJ1dHRvbiB7XFxuICAgIHdpZHRoOiA4cmVtO1xcbiAgICBib3R0b206IDAuNnJlbTtcXG4gICAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICBoZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICB9XFxufVxcblxcbi5kcm9wZG93bi1zZXQtZGF0ZSBsaSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IDAuMnJlbSBzb2xpZCAjOWQ5ZGZjO1xcbn1cXG5cXG4uZHJvcGRvd24tc2V0LWRhdGUgbGk6Zmlyc3QtY2hpbGQgLmpzLWNhbGVuZGFyLWljb24tYnRuIHtcXG4gIHotaW5kZXg6IDU7XFxuICB3aWR0aDogMi41cmVtO1xcbiAgaGVpZ2h0OiAyLjVyZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDE1JTtcXG4gIHJpZ2h0OiAtMS43cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgIzlkOWRmYztcXG4gIHBhZGRpbmctYm90dG9tOiAwLjFyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDAuMDVyZW07XFxufVxcblxcbi5kcm9wZG93bi1zZXQtZGF0ZSBwIHtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcblxcbi5kcm9wZG93bi1zZXQtZGF0ZSBsaSBwOmZpcnN0LWNoaWxkIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcblxcbmkueWVhci1uYXYge1xcbiAgd2lkdGg6IDUwJTtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5pLnllYXItbmF2LXVwIHtcXG4gIHRvcDogLTIuNzVyZW07XFxuICBsZWZ0OiAtNSU7XFxufVxcblxcbmkueWVhci1uYXYtZG93biB7XFxuICB0b3A6IC0yLjc1cmVtO1xcbiAgcmlnaHQ6IC01JTtcXG59XFxuXFxuZmllbGRzZXQge1xcbiAgZ2FwOiAxcmVtO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogODgwcHgpIHtcXG4gIGZpZWxkc2V0IHtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgfVxcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogNjIwcHgpIHtcXG4gIGZpZWxkc2V0IHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICB9XFxufVxcblxcbmxlZ2VuZCB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG5cXG5maWVsZHNldCAudGFzay1pY29ucyB7XFxuICBtaW4td2lkdGg6IDI2cmVtO1xcbiAgZmxleDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA4ODBweCkge1xcbiAgZmllbGRzZXQgLnRhc2staWNvbnMge1xcbiAgICBnYXA6IDFyZW07XFxuICAgIG1hcmdpbi1yaWdodDogMDtcXG4gIH1cXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDYyMHB4KSB7XFxuICBmaWVsZHNldCAudGFzay1pY29ucyB7XFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG59XFxuXFxuLnRhc2staWNvbnMgaS5mYXMsXFxuLnRhc2staWNvbnMgaS5mYXIge1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTtcXG59XFxuXFxuLnRhc2staWNvbnMgaS5mYS1leGNsYW1hdGlvbiB7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IGNhbGMoLTEwMCUgKyAwLjRyZW0pO1xcbiAgdHJhbnNpdGlvbjogMC4zcztcXG59XFxuXFxuLnRhc2staWNvbnMgaS5zaG93LWVycm9yIHtcXG4gIGNvbG9yOiBvcmFuZ2U7XFxufVxcblxcbi5mbGFnLWljb24tZ3JvdXAge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBpbnNldDogMDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyOiAwLjJyZW0gc29saWQgIzlkOWRmYztcXG59XFxuXFxuLnRhc2staWNvbnMgaS5mYS1mbGFnIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIC13ZWJraXQtdGV4dC1zdHJva2U6IDAuMTVyZW0gcmdiKDEyNiwgMTI2LCAxMjYpO1xcbn1cXG5cXG5pLmZhLWZsYWcge1xcbiAgLXdlYmtpdC10ZXh0LXN0cm9rZTogMC4xNXJlbSByZ2IoMTI2LCAxMjYsIDEyNik7XFxufVxcblxcbi5mbGFnLWljb24tZ3JvdXAgbGkge1xcbiAgbWFyZ2luOiAwIDFyZW07XFxufVxcblxcbmkuZmEtZmxhZy5mbGFnLXIsXFxuaS5mYS1mbGFnLmZsYWctbyxcXG5pLmZhLWZsYWcuZmxhZy15LFxcbmkuZmEtZmxhZy5mbGFnLXcge1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgei1pbmRleDogLTE7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG5cXG5pLmZhLWZsYWcuZmxhZy1yIHtcXG4gIGNvbG9yOiByZWQ7XFxufVxcblxcbmkuZmEtZmxhZy5mbGFnLW8ge1xcbiAgY29sb3I6IG9yYW5nZTtcXG59XFxuXFxuaS5mYS1mbGFnLmZsYWcteSB7XFxuICBjb2xvcjogeWVsbG93O1xcbn1cXG5cXG5pLmZhLWZsYWcuZmxhZy13IHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuaS5mYS1mbGFnIC5pY29uLXNlbGVjdG9yLXZpc2liaWxpdHkge1xcbiAgei1pbmRleDogMTA7XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogYXV0bztcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IGF1dG87XFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBhdXRvO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogYXV0bztcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAwKTtcXG59XFxuXFxuZmllbGRzZXQgLnRhc2stYnV0dG9ucyB7XFxuICBnYXA6IDFyZW07XFxuICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmNhbmNlbCxcXG4uYWRkIHtcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXG4gIG1pbi13aWR0aDogOHJlbTtcXG4gIGhlaWdodDogMy41cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgYmxhY2s7XFxufVxcblxcbi5jYW5jZWwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5hZGQge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE1NywgMTU3LCAyNTIpO1xcbn1cXG5cXG4vKj09PT09PT09PT1cXG4gIENhbGVuZGFyXFxuPT09PT09PT09PT09Ki9cXG4uY2FsZW5kYXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIGhlaWdodDogMjByZW07XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIG91dGxpbmU6IDAuMXJlbSBzb2xpZCBibHVlO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgbGlnaHRncmV5O1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuY2FsZW5kYXIge1xcbiAgICBoZWlnaHQ6IDE2LjFyZW07XFxuICB9XFxufVxcblxcbi5tb250aCBoMyB7XFxuICBtYXJnaW46IDFyZW0gMCAxcmVtO1xcbn1cXG5cXG4uZGF5IHtcXG4gIG1hcmdpbjogMC40cmVtO1xcbiAgaGVpZ2h0OiAyLjEyNXJlbTtcXG4gIG91dGxpbmU6IDAuMXJlbSBzb2xpZCBsaWdodGdyYXk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuZGF5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBoZWlnaHQ6IDIuMTI1cmVtO1xcbiAgfVxcbn1cXG5cXG4uZGF5IHAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxufVxcblxcbi5jYWxlbmRhciBidXR0b24gaSB7XFxuICB3aWR0aDogOTYlO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmZvb3RlciwgZm9vdGVyIHVsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cXG5pLmZhLWNoZXZyb24tY2lyY2xlLWxlZnQge1xcbiAgbGVmdDogMXJlbTtcXG59XFxuXFxuaS5mYS1jaGV2cm9uLWNpcmNsZS1yaWdodCB7XFxuICByaWdodDogMXJlbTtcXG59XFxuXFxuaS5mYS1jaGV2cm9uLWNpcmNsZS1sZWZ0LFxcbmkuZmEtY2hldnJvbi1jaXJjbGUtcmlnaHQge1xcbiAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgaGVpZ2h0OiAtbW96LWZpdC1jb250ZW50O1xcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgdG9wOiAxLjI1cmVtO1xcbn0vKiMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS5jc3MubWFwICovXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBbUJBO0VBQ0UsU0FBQTtFQUNBLFVBQUE7RUFDQSxzQkFBQTtBQ2hCRjs7QURvQkE7RUFDRSxnQkFBQTtBQ2pCRjs7QURxQkE7RUFDRSxpQkFBQTtBQ2xCRjs7QURxQkE7RUFDRSxpQ0FBQTtBQ2xCRjs7QURxQkE7RUFDRSxnQkFBQTtBQ2xCRjs7QURxQkE7RUFDRSxlQUFBO0FDbEJGOztBRHFCQTtFQUNFLG9DQUFBO0VBQ0EsaUJBQUE7RUFFQSxXQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsOEJBQUE7QUNuQkY7O0FEc0JBOztZQUFBO0FBR0E7RUFDRSxVQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLHlCQUFBO0FDbkJGOztBRHNCQTtFQUNFLFlBQUE7RUFDQSxpQkFBQTtBQ25CRjs7QURzQkE7RUFDRSxrQkFBQTtBQ25CRjs7QURzQkE7RUFDRSxrQkFBQTtBQ25CRjs7QURzQkE7RUFDRSxVQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7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Q0EsK0JBQUE7RUFFQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUVBLGtCQUFBO0FDcEVGO0FEMTJCRTtFQXE2QkY7SUFZSSxTQUFBO0lBQ0EsZ0JBQUE7RUNuRUY7QUFDRjs7QURzRUE7RUFDRSxrQkFBQTtFQUNBLGlCQUFBO0FDbkVGOztBRHNFQTtFQUNFLFVBQUE7RUFDQSxlQUFBO0VBQ0EsNkJBQUE7QUNuRUY7O0FEc0VBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLDZCQUFBO0FDbkVGOztBRHNFQTtFQUNFLFVBQUE7QUNuRUY7O0FEcUVBO0VBQ0UsV0FBQTtBQ2xFRjs7QURxRUE7O0VBRUUsMkJBQUE7RUFBQSx3QkFBQTtFQUFBLG1CQUFBO0VBQ0EsNkJBQUE7RUFDQSxZQUFBO0FDbEVGLENBQUEsb0NBQUFcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcclxuXHJcbmNvbnN0IFRhc2sgPSAoKCkgPT4ge1xyXG5cclxuICBjb25zdCBjcmVhdGUgPSAobmFtZSA9ICdOZXcgdGFzaycsIHByb2plY3QgPSAnVXNlcicsIGR1ZURhdGUgPSB7fSwgY3JlYXRpb25EYXRlID0ge30sIHByaW9yaXR5RmxhZyA9ICd3aGl0ZScpID0+IHtcclxuICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIHJldHVybiB7IG5hbWUsIHByb2plY3QsIGR1ZURhdGUsIGNyZWF0aW9uRGF0ZSwgcHJpb3JpdHlGbGFnLCBpZDogdXVpZHY0KCl9XHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBjcmVhdGUgfSA7XHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhc2s7IiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XHJcblxyXG5jb25zdCBQcm9qZWN0ID0gKCgpID0+IHtcclxuICBjb25zdCBwcm9qZWN0cyA9IFtdXHJcbiAgXHJcbiAgY29uc3QgY3JlYXRlID0gKG5hbWUgPSAnZGVmYXVsdCcpID0+IHtcclxuICAgIHJldHVybiB7IG5hbWUsIHRhc2tzOiBbXSwgaWQ6IHV1aWR2NCgpLCBpbmRleDoge3ZhbHVlOiAwLCBsYXN0OiAwfSB9XHJcbiAgfVxyXG5cclxuICAvLyBEb2VzIHByb2plY3QgZXhpc3QgYnkgSUQ/XHJcbiAgY29uc3QgX2V4aXN0cyA9IChpdGVtVG9DaGVjaywgbGlzdCkgPT4ge1xyXG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xyXG4gIFxyXG4gICAgbGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbVRvQ2hlY2suaWQgPT09IGl0ZW0uaWQgPyBleGlzdHMgPSB0cnVlIDogMCApO1xyXG4gICAgcmV0dXJuIGV4aXN0cztcclxuICB9XHJcbiAgXHJcbiAgLy8gQWRkIHByb2plY3QgdG8gaW5kZXhcclxuICBjb25zdCBhZGRQcm9qZWN0VG9Qcm9qZWN0c0luZGV4ID0gKHByb2plY3QsIHByb2plY3RzVG9TZWFyY2gpID0+IHtcclxuICAgIGlmIChfZXhpc3RzKHByb2plY3QsIHByb2plY3RzVG9TZWFyY2gpID09PSBmYWxzZSkgcHJvamVjdHNUb1NlYXJjaC5wdXNoKHByb2plY3QpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYWRkVGFza1RvUHJvamVjdCA9ICh0YXNrLCBwcm9qZWN0KSA9PiB7XHJcbiAgICBwcm9qZWN0LnRhc2tzLnB1c2godGFzayk7XHJcbiAgICB0YXNrLnByb2plY3RJRCA9IHByb2plY3QuaWQ7IC8vbW92ZSB0aGlzXHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBcclxuICAgIHByb2plY3RzLFxyXG5cclxuICAgIGNyZWF0ZSxcclxuICAgIGFkZFRhc2tUb1Byb2plY3QsXHJcbiAgICBhZGRQcm9qZWN0VG9Qcm9qZWN0c0luZGV4XHJcbiAgIH1cclxufSkoKTtcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdDsiLCJmdW5jdGlvbiBEb2MoYWN0aW9uLCBlbGVtZW50KSB7XHJcbiAgc3dpdGNoKGFjdGlvbikge1xyXG4gICAgY2FzZSAnY3JlYXRlJzpcclxuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XHJcbiAgICBjYXNlICdzZWxlY3RPbmUnOlxyXG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcclxuICAgIGNhc2UgJ3NlbGVjdEFsbCc6XHJcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRG9jOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZ2V0TW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggbW9udGggaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldE1vbnRoKG5ldyBEYXRlKDIwMTIsIDEsIDI5KSlcbiAqIC8vPT4gMVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1vbnRoKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICByZXR1cm4gbW9udGg7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0xlYXBZZWFyXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgbGVhcCB5ZWFyP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIGxlYXAgeWVhcj9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIGluIHRoZSBsZWFwIHllYXJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAxIFNlcHRlbWJlciAyMDEyIGluIHRoZSBsZWFwIHllYXI/XG4gKiB2YXIgcmVzdWx0ID0gaXNMZWFwWWVhcihuZXcgRGF0ZSgyMDEyLCA4LCAxKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGVhcFllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn0iLCJpbXBvcnQgRG9jIGZyb20gJy4vRG9jJztcclxuXHJcbmltcG9ydCB7IGdldE1vbnRoIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBpc0xlYXBZZWFyIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5cclxubGV0IGxhc3REYXkgPSAnJztcclxuXHJcbmZ1bmN0aW9uIHN0eWxlKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRGF5cyhkYXlzLCBwYXJlbnQpIHtcclxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBkYXlzOyBpKyspIHtcclxuXHJcbiAgICBsZXQgZGF5ID0gRG9jKCdjcmVhdGUnLCAnZGl2Jyk7XHJcbiAgICBkYXkuY2xhc3NMaXN0LmFkZCgnZGF5Jyk7XHJcblxyXG4gICAgbGV0IG5hbWUgPSBEb2MoJ2NyZWF0ZScsICdwJyk7XHJcbiAgICBuYW1lLnRleHRDb250ZW50ID0gaTtcclxuXHJcbiAgICBkYXkuYXBwZW5kQ2hpbGQobmFtZSk7XHJcblxyXG4gICAgZGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKGxhc3REYXkgIT09ICcnKSB7XHJcbiAgICAgICAgbGFzdERheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgICB9XHJcbiAgICAgIGUudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdsaWdodGdyZXknO1xyXG4gICAgICBsYXN0RGF5ID0gZS50YXJnZXQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGF5KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENhbGVuZGFyKCkge1xyXG5cclxuICAvLyBDYWxlbmRhciBkaXYgY29udGFpbmVyXHJcbiAgY29uc3QgY29udGFpbmVyID0gRG9jKCdjcmVhdGUnLCAnZGl2Jyk7XHJcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NhbGVuZGFyJyk7XHJcblxyXG4gIHN0eWxlKGNvbnRhaW5lciwgJ2Rpc3BsYXknLCAnZ3JpZCcpO1xyXG4gIHN0eWxlKGNvbnRhaW5lciwgJ2FsaWduLWl0ZW1zJywgJ2NlbnRlcicpO1xyXG5cclxuICBjb25zdCBtb250aFRhYnMgPSBbXTtcclxuXHJcbiAgLy8gMTIgbW9udGhzIDopXHJcbiAgZm9yKGxldCBpID0gMTsgaSA8PSAxMjsgaSsrKSB7XHJcbiAgICBsZXQgbmFtZTtcclxuICAgIFxyXG4gICAgLy8gbW9udGggZGl2IC0gaG9sZHMgZGF5IGVsZW1lbnRzXHJcbiAgICBsZXQgbW9udGggPSBEb2MoJ2NyZWF0ZScsICdkaXYnKTtcclxuICAgIG1vbnRoLmNsYXNzTGlzdC5hZGQoJ2NhbGVuZGFyLW1vbnRoJyk7XHJcbiAgICBcclxuICAgIC8vIG1vbnRoIHRpdGxlXHJcbiAgICBsZXQgaDIgPSBEb2MoJ2NyZWF0ZScsICdoMycpO1xyXG5cclxuICAgIC8vIGRheXNcclxuICAgIGxldCBkYXlzID0gRG9jKCdjcmVhdGUnLCAnZGl2Jyk7XHJcbiAgICBkYXlzLmNsYXNzTGlzdC5hZGQoJ2NhbGVuZGFyLWRheXMnKTtcclxuXHJcbiAgICBzd2l0Y2goaSkge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgbmFtZSA9ICdKYW51YXJ5JztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDI6XHJcbiAgICAgICAgbmFtZSA9ICdGZWJydWFyeSc7XHJcbiAgICAgICAgaXNMZWFwWWVhciggRGF0ZS5ub3coKSApID8gZ2VuZXJhdGVEYXlzKDI5LCBkYXlzKSA6IGdlbmVyYXRlRGF5cygyOCwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMzpcclxuICAgICAgICBuYW1lID0gJ01hcmNoJztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDQ6XHJcbiAgICAgICAgbmFtZSA9ICdBcHJpbCc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMwLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA1OlxyXG4gICAgICAgIG5hbWUgPSAnTWF5JztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDY6XHJcbiAgICAgICAgbmFtZSA9ICdKdW5lJztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzAsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDc6XHJcbiAgICAgICAgbmFtZSA9ICdKdWx5JztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDg6XHJcbiAgICAgICAgbmFtZSA9ICdBdWd1c3QnO1xyXG4gICAgICAgIGdlbmVyYXRlRGF5cygzMSwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgOTpcclxuICAgICAgICBuYW1lID0gJ1NlcHRlbWJlcic7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMwLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAxMDpcclxuICAgICAgICBuYW1lID0gJ09jdG9iZXInO1xyXG4gICAgICAgIGdlbmVyYXRlRGF5cygzMSwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgbmFtZSA9ICdOb3ZlbWJlcic7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMwLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAxMjpcclxuICAgICAgICBuYW1lID0gJ0RlY2VtYmVyJztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrOyAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGl0bGUgPHA+XHJcbiAgICBoMi50ZXh0Q29udGVudCA9IG5hbWU7XHJcblxyXG4gICAgbW9udGguYXBwZW5kQ2hpbGQoaDIpO1xyXG4gICAgbW9udGguYXBwZW5kQ2hpbGQoZGF5cyk7XHJcblxyXG4gICAgbW9udGguaWQgPSBpO1xyXG4gICAgbW9udGguY2xhc3NMaXN0LmFkZChuYW1lKTtcclxuICAgIG1vbnRoLmNsYXNzTGlzdC5hZGQoJ21vbnRoJylcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtb250aCk7XHJcblxyXG4gICAgLy8gQ3VycmVudCBtb250aCB2aWV3XHJcbiAgICBpZiAoTnVtYmVyKG1vbnRoLmlkKSAhPT0gZ2V0TW9udGgoIERhdGUubm93KCkgKSsxICkge1xyXG4gICAgICBzdHlsZShtb250aCwgJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbW9udGggPGRpdj5cclxuICAgIHN0eWxlKG1vbnRoLCAnd2lkdGgnLCAnOTAlJyk7XHJcbiAgICBzdHlsZShtb250aCwgJ2hlaWdodCcsICcxMDAlJyk7XHJcbiAgICBzdHlsZShkYXlzLCAnZGlzcGxheScsICdncmlkJyk7XHJcbiAgICBzdHlsZShtb250aCwgJ3RleHRBbGlnbicsICdjZW50ZXInKTtcclxuICAgIHN0eWxlKG1vbnRoLCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcclxuICAgIHN0eWxlKG1vbnRoLCAnYmFja2dyb3VuZENvbG9yJywgJ3doaXRlJyk7XHJcbiAgICBzdHlsZShtb250aCwgJ2p1c3RpZnktc2VsZicsICdjZW50ZXInKTtcclxuICAgIHN0eWxlKGRheXMsICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnLCAncmVwZWF0KDcsIDFmciknKTtcclxuXHJcbiAgICBtb250aFRhYnMucHVzaChtb250aCk7XHJcbiAgfVxyXG4gIHN0eWxlKGNvbnRhaW5lciwgJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XHJcblxyXG4gIGNvbnN0IGNsb3NlQ2FsID0gRG9jKCdjcmVhdGUnLCAnYnV0dG9uJyk7XHJcbiAgY2xvc2VDYWwudHlwZSA9ICdidXR0b24nO1xyXG4gIGNsb3NlQ2FsLmNsYXNzTGlzdC5hZGQoJ2pzLWNsb3NlLWNhbGVuZGFyLWJ0bicpO1xyXG4gIGNsb3NlQ2FsLnRleHRDb250ZW50ID0gJ2Nsb3NlJztcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VDYWwpO1xyXG5cclxuICBjb25zdCBuYXZMZWZ0ID0gRG9jKCdjcmVhdGUnLCAnaScpO1xyXG4gIG5hdkxlZnQuY2xhc3NMaXN0LmFkZCgnZmFzJyk7XHJcbiAgbmF2TGVmdC5jbGFzc0xpc3QuYWRkKCdmYS1jaGV2cm9uLWNpcmNsZS1sZWZ0Jyk7XHJcblxyXG4gIGNvbnN0IG5hdlJpZ2h0ID0gRG9jKCdjcmVhdGUnLCAnaScpO1xyXG4gIG5hdlJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gIG5hdlJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2ZhLWNoZXZyb24tY2lyY2xlLXJpZ2h0Jyk7XHJcblxyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChuYXZMZWZ0KTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobmF2UmlnaHQpO1xyXG5cclxuICBzdHlsZShuYXZMZWZ0LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcclxuICBzdHlsZShuYXZSaWdodCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XHJcblxyXG4gIHN0eWxlKG5hdkxlZnQsICdmb250U2l6ZScsICcycmVtJyk7XHJcbiAgc3R5bGUobmF2UmlnaHQsICdmb250U2l6ZScsICcycmVtJyk7XHJcblxyXG4gIHN0eWxlKG5hdkxlZnQsICdtYXJnaW4tbGVmdCcsICcwLjY1cmVtJyk7XHJcbiAgc3R5bGUobmF2UmlnaHQsICdtYXJnaW4tcmlnaHQnLCAnMC42NXJlbScpO1xyXG5cclxuICBuYXZSaWdodC5kYXRhc2V0LmluZGV4ID0gZ2V0TW9udGgoIERhdGUubm93KCkgKSsxO1xyXG4gIG5hdlJpZ2h0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgbmF2UmlnaHRIYW5kbGVyKG5hdlJpZ2h0LCBuYXZMZWZ0LCBjb250YWluZXIpXHJcbiAgfSk7XHJcblxyXG4gIG5hdkxlZnQuZGF0YXNldC5pbmRleCA9IGdldE1vbnRoKCBEYXRlLm5vdygpICkrMTtcclxuICBuYXZMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgbmF2TGVmdEhhbmRsZXIobmF2TGVmdCwgbmF2UmlnaHQsIGNvbnRhaW5lcilcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHsgY29udGFpbmVyLCBuYXZMZWZ0LCBuYXZSaWdodCwgY2xvc2VDYWwsIG1vbnRoVGFicyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5hdlJpZ2h0SGFuZGxlcihuYXYsIG5hdkFsdCwgY29udGFpbmVyKSB7XHJcbiAgbmF2LmRhdGFzZXQuaW5kZXggPSBOdW1iZXIobmF2LmRhdGFzZXQuaW5kZXgpO1xyXG4gIG5hdkFsdC5kYXRhc2V0LmluZGV4ID0gTnVtYmVyKG5hdkFsdC5kYXRhc2V0LmluZGV4KTtcclxuICBcclxuICBuYXYuZGF0YXNldC5pbmRleCsrO1xyXG4gIG5hdkFsdC5kYXRhc2V0LmluZGV4Kys7XHJcbiAgXHJcbiAgaWYgKE51bWJlcihuYXYuZGF0YXNldC5pbmRleCkgPj0gMTMpIHtcclxuICAgIG5hdi5kYXRhc2V0LmluZGV4ID0gMTsgXHJcbiAgICBuYXZBbHQuZGF0YXNldC5pbmRleCAgPSAxO1xyXG4gIH1cclxuXHJcbiAgZm9yKGxldCBtb250aCBvZiBjb250YWluZXIuY2hpbGRyZW4pIHtcclxuICAgIC8vY29uc29sZS5kaXIobW9udGgpO1xyXG4gIFxyXG4gICAgaWYgKG1vbnRoLnRhZ05hbWUgPT09ICdESVYnKSB7XHJcbiAgXHJcbiAgICAgIGlmIChOdW1iZXIobmF2LmRhdGFzZXQuaW5kZXgpID09PSBOdW1iZXIobW9udGguaWQpKSB7XHJcbiAgICAgICAgbW9udGguc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgfSBcclxuICAgICAgZWxzZSB7IFxyXG4gICAgICAgIG1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gIH07IFxyXG59XHJcblxyXG5mdW5jdGlvbiBuYXZMZWZ0SGFuZGxlcihuYXYsIG5hdkFsdCwgY29udGFpbmVyKSB7XHJcbiAgXHJcbiAgbmF2LmRhdGFzZXQuaW5kZXggPSBOdW1iZXIobmF2LmRhdGFzZXQuaW5kZXgpO1xyXG4gIG5hdkFsdC5kYXRhc2V0LmluZGV4ID0gTnVtYmVyKG5hdkFsdC5kYXRhc2V0LmluZGV4KTtcclxuICAgICAgXHJcbiAgbmF2LmRhdGFzZXQuaW5kZXgtLTtcclxuICBuYXZBbHQuZGF0YXNldC5pbmRleC0tO1xyXG4gIFxyXG4gIGlmIChOdW1iZXIobmF2LmRhdGFzZXQuaW5kZXgpIDw9IDApIHtcclxuICAgIG5hdi5kYXRhc2V0LmluZGV4ICA9IDEyOyBcclxuICAgIG5hdkFsdC5kYXRhc2V0LmluZGV4ID0gMTI7XHJcbiAgfVxyXG4gIFxyXG4gIGZvcihsZXQgbW9udGggb2YgY29udGFpbmVyLmNoaWxkcmVuKSB7XHJcbiAgICAvL2NvbnNvbGUuZGlyKG1vbnRoKTtcclxuICAgICAgICBcclxuICAgIGlmIChtb250aC50YWdOYW1lID09PSAnRElWJykge1xyXG4gIFxyXG4gICAgICBpZiAoTnVtYmVyKG5hdi5kYXRhc2V0LmluZGV4KSA9PT0gTnVtYmVyKG1vbnRoLmlkKSkge1xyXG4gICAgICAgIG1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgbGFzdFNlbGVjdGVkTW9udGggPSBtb250aDtcclxuICAgICAgfSBcclxuICAgICAgZWxzZSB7IFxyXG4gICAgICAgIG1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYWxlbmRhcjsiLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRnV0dXJlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBmdXR1cmU/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIGZ1dHVyZT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyBpbiB0aGUgZnV0dXJlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQsIGlzIDMxIERlY2VtYmVyIDIwMTQgaW4gdGhlIGZ1dHVyZT9cbiAqIHZhciByZXN1bHQgPSBpc0Z1dHVyZShuZXcgRGF0ZSgyMDE0LCAxMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGdXR1cmUoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpID4gRGF0ZS5ub3coKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGdldFllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHllYXJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB5ZWFyIGlzIDIgSnVseSAyMDE0P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0WWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMjAxNFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0RnVsbFllYXIoKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGdldERhdGVcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZGF5IG9mIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSBtb250aCBpcyAyOSBGZWJydWFyeSAyMDEyP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0RGF0ZShuZXcgRGF0ZSgyMDEyLCAxLCAyOSkpXG4gKiAvLz0+IDI5XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RGF0ZShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXlPZk1vbnRoID0gZGF0ZS5nZXREYXRlKCk7XG4gIHJldHVybiBkYXlPZk1vbnRoO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBzdGFydE9mRGF5IGZyb20gXCIuLi9zdGFydE9mRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciAwNjowMDowMCBhbmQgNCBTZXB0ZW1iZXIgMTg6MDA6MDAgaW4gdGhlIHNhbWUgZGF5P1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0LCA2LCAwKSwgbmV3IERhdGUoMjAxNCwgOCwgNCwgMTgsIDApKVxuICogLy89PiB0cnVlXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgYW5kIDQgT2N0b2JlciBpbiB0aGUgc2FtZSBkYXk/XG4gKiB2YXIgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE0LCA5LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciwgMjAxNCBhbmQgNCBTZXB0ZW1iZXIsIDIwMTUgaW4gdGhlIHNhbWUgZGF5P1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNSwgOCwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTYW1lRGF5KGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZkRheS5nZXRUaW1lKCkgPT09IGRhdGVSaWdodFN0YXJ0T2ZEYXkuZ2V0VGltZSgpO1xufSIsImltcG9ydCBpc1NhbWVEYXkgZnJvbSBcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNUb2RheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB0b2RheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyA2IE9jdG9iZXIgMTQ6MDA6MDAgdG9kYXk/XG4gKiB2YXIgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RvZGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGlzU2FtZURheShkaXJ0eURhdGUsIERhdGUubm93KCkpO1xufSIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xyXG5cclxuLy8gTW9kZWxcclxuaW1wb3J0IFRhc2sgZnJvbSAnLi9UYXNrJztcclxuaW1wb3J0IFByb2plY3QgZnJvbSAnLi9Qcm9qZWN0JztcclxuaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vQ2FsZW5kYXInO1xyXG5cclxuLy8gRGF0ZS1mbnNcclxuLy8gSlMgbW9udGhzIGFyZSAwIGluZGV4ZWQgKCBwYXNzIC0xIHdpdGggbW9udGggd2hlbiBjYWxsaW5nIGRhdGUtZm5zIG1ldGhvZHMgKVxyXG5cclxuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBpc0xlYXBZZWFyIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBnZXREYXlzSW5Nb250aCB9IGZyb20gJ2RhdGUtZm5zJ1xyXG5pbXBvcnQgeyBnZXREYXRlLCBnZXREYXksIGdldE1vbnRoLCBnZXRZZWFyLCBpc0Z1dHVyZSwgaXNUb2RheSB9IGZyb20gJ2RhdGUtZm5zJztcclxuXHJcbmxldCBsYXN0U2VsZWN0ZWRQcm9qZWN0O1xyXG5cclxuY29uc3QgVG9kbyA9ICgoKSA9PiB7XHJcbiAgLy8gbW9kZWxcclxuICBjb25zdCBwcm9qZWN0cyA9IFByb2plY3QucHJvamVjdHM7XHJcbiAgY29uc3QgcHJvamVjdHNGcm9tTG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RMaXN0Jyk7XHJcblxyXG4gIGNvbnN0IGFzaWRlVGFiX3Byb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcC1hc2lkZS1wcm9qZWN0cycpO1xyXG5cclxuICAvLyBsb2NhbFN0b3JhZ2VcclxuICBjb25zdCBfY2hlY2tTdG9yYWdlID0gKCkgPT4ge1xyXG4gICAgaWYgKHByb2plY3RzRnJvbUxvY2FsU3RvcmFnZSAmJiBwcm9qZWN0c0Zyb21Mb2NhbFN0b3JhZ2UubGVuZ3RoKSB7XHJcbiAgICAgIEpTT04ucGFyc2UocHJvamVjdHNGcm9tTG9jYWxTdG9yYWdlKS5mb3JFYWNoKHByb2plY3QgPT4ge1xyXG4gICAgICAgIGlmIChwcm9qZWN0LnRhc2tzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCB0YXNrIG9mIHByb2plY3QudGFza3MpIHtcclxuICBcclxuICAgICAgICAgICAgLy8gUGFpciB0YXNrIHdpdGggY29ycmVjdCBwcm9qZWN0XHJcbiAgICAgICAgICAgIGNvbnN0IHNldFByb2plY3QgPSBfZ2V0VGFza1Byb2plY3QodGFzay5wcm9qZWN0LCBwcm9qZWN0cyk7XHJcbiAgICAgICAgICAgIF9hZGRUYXNrVG9Qcm9qZWN0KHRhc2ssIHNldFByb2plY3QpO1xyXG4gIFxyXG4gICAgICAgICAgICBsZXQgbGFzdEluZGV4ID0gcHJvamVjdHMubGVuZ3RoO1xyXG4gIFxyXG4gICAgICAgICAgICBfYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleChzZXRQcm9qZWN0LCBwcm9qZWN0cyk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gY3JlYXRlIHByb2plY3QgdGFiXHJcbiAgICAgICAgICAgIGlmIChsYXN0SW5kZXggIT09IHByb2plY3RzLmxlbmd0aCkgR3JvdXAoc2V0UHJvamVjdCwgYXNpZGVUYWJfcHJvamVjdHMpO1xyXG5cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHRhc2sgY2FyZFxyXG4gICAgICAgICAgICBjb25zdCBuZXdUYXNrQ2FyZCA9IENhcmQodGFzayk7XHJcbiAgXHJcbiAgICAgICAgICAgIC8vcmVuZGVyIHRvIGNvcnJlY3Qgdmlld1xyXG4gICAgICAgICAgICBzd2l0Y2godmlldy5jdXJyZW50Vmlldykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5kYXNoYm9hcmQ6XHJcbiAgICAgICAgICAgICAgICB2aWV3LmN1cnJlbnRWaWV3LmFwcGVuZENoaWxkKG5ld1Rhc2tDYXJkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy50b2RheTpcclxuICAgICAgICAgICAgICAgIGlmICghaXNGdXR1cmUobmV3IERhdGUodGFzay5kdWVEYXRlLnllYXIsIHRhc2suZHVlRGF0ZS5tb250aC0xLCB0YXNrLmR1ZURhdGUuZGF5KSkpIHZpZXcuY3VycmVudFZpZXcuYXBwZW5kQ2hpbGQobmV3VGFza0NhcmQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLnVwY29taW5nOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzRnV0dXJlKG5ldyBEYXRlKHRhc2suZHVlRGF0ZS55ZWFyLCB0YXNrLmR1ZURhdGUubW9udGgtMSwgdGFzay5kdWVEYXRlLmRheSkpKSB2aWV3LmN1cnJlbnRWaWV3LmFwcGVuZENoaWxkKG5ld1Rhc2tDYXJkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgY29uc3QgX3VwZGF0ZVN0b3JhZ2UgPSAoKSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdExpc3QnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG5cclxuICAvLyBNb2RlbCA6OiBEYXRhIDo6IFByb2plY3RcclxuICBjb25zdCBfbm90aWZ5UHJvamVjdCA9ICh0YXNrVG9IYW5kbGUsIGFjdGlvbikgPT4ge1xyXG4gICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XHJcblxyXG4gICAgICBwcm9qZWN0LnRhc2tzLmZvckVhY2goKHRhc2ssIGluZGV4KSA9PiB7XHJcblxyXG4gICAgICAgIHN3aXRjaChhY3Rpb24pIHtcclxuICAgICAgICAgIGNhc2UgJ2FkZCc6IFxyXG4gICAgICAgICAgICBpZiAodGFzay5pZCA9PT0gdGFza1RvSGFuZGxlLmlkKSBwcm9qZWN0LnRhc2tzLnB1c2godGFzayk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ3JlbW92ZSc6XHJcbiAgICAgICAgICAgIGlmICh0YXNrLmlkID09PSB0YXNrVG9IYW5kbGUuaWQpIHByb2plY3QudGFza3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSAgICAgICAgICBcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gMSkuIE1vZGVsIDo6IERhdGEgOjogUHJvamVjdCA6OiBNZXRob2RzXHJcbiAgY29uc3QgX2dldFRhc2tQcm9qZWN0ID0gKHByb2plY3ROYW1lLCBwcm9qZWN0cykgPT4ge1xyXG5cclxuICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICBpZiAocHJvamVjdE5hbWUgPT09IHByb2plY3QubmFtZSkgcmV0dXJuIHByb2plY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFByb2plY3QuY3JlYXRlKHByb2plY3ROYW1lKTtcclxuICB9XHJcblxyXG4gIC8vIDIpLlxyXG4gIGNvbnN0IF9hZGRUYXNrVG9Qcm9qZWN0ID0gKHRhc2ssIHByb2plY3QpID0+IHtcclxuICAgIHByb2plY3QudGFza3MucHVzaCh0YXNrKTsgXHJcbiAgICB0YXNrLnByb2plY3RJRCA9IHByb2plY3QuaWQ7XHJcbiAgfVxyXG5cclxuICAvLyAzKS5cclxuICBjb25zdCBfYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleCA9IChwcm9qZWN0LCBwcm9qZWN0c1RvU2VhcmNoKSA9PiB7XHJcbiAgICBQcm9qZWN0LmFkZFByb2plY3RUb1Byb2plY3RzSW5kZXgocHJvamVjdCwgcHJvamVjdHNUb1NlYXJjaCk7XHJcbiAgfVxyXG5cclxuICAvLyA0KS5cclxuICBjb25zdCBfcmVtb3ZlQWxsVGFza3NGcm9tUHJvamVjdCA9IChwcm9qZWN0KSA9PiB7XHJcbiAgICBjb25zdCB0YXNrcyA9IHByb2plY3QudGFza3M7XHJcbiAgICBpZiAodGFza3MubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICB0YXNrcy5zcGxpY2UoMCwgdGFza3MubGVuZ3RoLTEpO1xyXG4gIH1cclxuXHJcbiAgLy8gNSkuXHJcbiAgY29uc3QgX3JlbW92ZVByb2plY3RGcm9tTGlzdCA9IChwcm9qZWN0VG9SZW1vdmUsIHByb2plY3RzKSA9PiB7XHJcbiAgICBpZiAocHJvamVjdHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgcHJvamVjdHMuZm9yRWFjaCgocHJvamVjdCwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHByb2plY3RUb1JlbW92ZS5pZCA9PT0gcHJvamVjdC5pZCkge1xyXG4gICAgICAgIF9yZW1vdmVBbGxUYXNrc0Zyb21Qcm9qZWN0KHByb2plY3QpO1xyXG4gICAgICAgIHByb2plY3RzLnNwbGljZShpbmRleCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvLyBFbmQgb2YgUHJvamVjdCBNZXRob2RzXHJcblxyXG4gIC8vIFZpZXcgLSBET01cclxuICBjb25zdCBlbGVtZW50cyA9IHtcclxuICAgIG1vZGFsICAgICAgICAgOiB7IHRhc2s6IHsgaWNvbnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy10YXNrLWljb24nKSB9IH0sXHJcbiAgICBjYWxlbmRhciAgICAgIDogQ2FsZW5kYXIoKSxcclxuICAgIG5vdGlmaWNhdGlvbnMgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1ub3RpZnknKSxcclxuICAgIGFzaWRlICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWFzaWRlLXByb2plY3RzJyksXHJcbiAgICBhc2lkZV9kYXRlcyAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcC1hc2lkZS1jYWxlbmRhcicpLFxyXG4gICAgbWFpbldpbmRvdyAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcHAtbWFpbi10YXNrLXdpbmRvdycpLFxyXG4gICAgZGJIZWFkaW5nICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQtdGl0bGUnKSxcclxuICAgIGRhc2hib2FyZCAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkLXRhc2tzJyksXHJcbiAgICB0b2RheSAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhc2hib2FyZC10b2RheScpLFxyXG4gICAgdXBjb21pbmcgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQtdXBjb21pbmcnKSxcclxuICAgIHNlYXJjaCAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkLXNlYXJjaCcpLFxyXG4gICAgZGJQcm9qZWN0ICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQtcHJvamVjdCcpLFxyXG4gIH1cclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LWNhbGVuZGFyJykuYXBwZW5kQ2hpbGQoZWxlbWVudHMuY2FsZW5kYXIuY29udGFpbmVyKTtcclxuXHJcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB7XHJcbiAgICBjYWxlbmRhcjoge1xyXG4gICAgICBzaG93ICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNhbGVuZGFyLWljb24tYnRuJyksXHJcbiAgICAgIGhpZGUgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY2xvc2UtY2FsZW5kYXItYnRuJyksXHJcbiAgICAgIGRheXNJbk1vbnRocyAgOiBlbGVtZW50cy5jYWxlbmRhci5jb250YWluZXIuY2hpbGROb2Rlc1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSW5pdGlhbGlzZSBMaXN0ZW5lcnNcclxuICBldmVudExpc3RlbmVycy5jYWxlbmRhci5zaG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cclxuICAgIGVsZW1lbnRzLmNhbGVuZGFyLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgZWxlbWVudHMuY2FsZW5kYXIubW9udGhUYWJzLmZvckVhY2gobW9udGggPT4gIHtcclxuICAgICAgaWYgKG1vbnRoLmlkID09PSBlbGVtZW50cy5jYWxlbmRhci5uYXZMZWZ0LmRhdGFzZXQuaW5kZXgpIG1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcblxyXG4gIGV2ZW50TGlzdGVuZXJzLmNhbGVuZGFyLmhpZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gICAgZWxlbWVudHMuY2FsZW5kYXIubW9udGhUYWJzLmZvckVhY2gobW9udGggPT4gbW9udGguc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nKTtcclxuICAgIGVsZW1lbnRzLmNhbGVuZGFyLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHVzZXJJbnB1dHMgPSB7XHJcbiAgICB0YXNrIDogeyBpbnB1dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LXRhc2snKSB9LFxyXG5cclxuICAgIHByb2plY3Q6IHtcclxuICAgICAgaW5wdXQgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1wcm9qZWN0JyksXHJcbiAgICAgIGRycERuICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZHJvcGRvd24taWNvbicpLFxyXG4gICAgICBncm91cCAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLXNldC1wcm9qZWN0JyksXHJcbiAgICAgIG1lbnUgICAgOiBbXVxyXG4gICAgfSxcclxuXHJcbiAgICBkYXRlOiB7XHJcbiAgICAgIGRheSAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZGF5JyksXHJcbiAgICAgIHllYXIgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQteWVhcicpLFxyXG4gICAgICBtb250aCAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LW1vbnRoJyksXHJcblxyXG4gICAgICBteURheSAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LWRheScpLmNoaWxkcmVuWzBdLCAgIC8vIHBhcmFncmFwaFxyXG4gICAgICBteVllYXIgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LXllYXInKS5jaGlsZHJlblswXSwgIC8vIHBhcmFncmFwaFxyXG4gICAgICBteU1vbnRoIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LW1vbnRoJykuY2hpbGRyZW5bMF0sIC8vIHBhcmFncmFwaFxyXG5cclxuICAgICAgeWVhclVwICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy55ZWFyLW5hdi11cCcpLFxyXG4gICAgICB5ZWFyRG4gIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnllYXItbmF2LWRvd24nKSxcclxuICAgIH0sXHJcblxyXG4gICAgcHJpb3JpdHlGbGFnOiB7XHJcbiAgICAgIGljb24gICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmxnJyksXHJcbiAgICAgIGdyb3VwICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmxhZy1pY29uLWdyb3VwJylcclxuICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBNb2RhbCBWaWV3IDo6IERhdGUgaW5wdXRzXHJcbiAgdXNlcklucHV0cy5kYXRlLmdyb3VwID0gWyB1c2VySW5wdXRzLmRhdGUuZGF5LCB1c2VySW5wdXRzLmRhdGUueWVhciwgdXNlcklucHV0cy5kYXRlLm1vbnRoIF07XHJcblxyXG4gIGV2ZW50TGlzdGVuZXJzLmNhbGVuZGFyLmRheXNJbk1vbnRocy5mb3JFYWNoKG1vbnRoID0+IHtcclxuICAgIGlmIChtb250aC50YWdOYW1lID09PSAnRElWJykgbW9udGguY2hpbGRyZW5bMV0uY2hpbGROb2Rlcy5mb3JFYWNoKGRheSA9PiBcclxuICAgICAgZGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IGhhbmRsZURhdGUoZSwgbW9udGgpKSk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURhdGUoZGF5LCBtb250aCkge1xyXG4gICAgLy8gc2V0IGRheS9tb250aCB0byBkYXRlIHNlbGVjdGVkIGZyb20gY2FsZW5kYXJcclxuICAgIHVzZXJJbnB1dHMuZGF0ZS5teURheS50ZXh0Q29udGVudCA9IGRheS50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICB1c2VySW5wdXRzLmRhdGUubXlNb250aC50ZXh0Q29udGVudCA9IG1vbnRoLmlkO1xyXG5cclxuICAgIC8vIHNldCB0byBjdXJyZW50IHllYXIgaWYgeWVhciBzdGlsbCBzZXQgYXMgcGxhY2Vob2xkZXJcclxuICAgIGlmICh1c2VySW5wdXRzLmRhdGUubXlZZWFyLnRleHRDb250ZW50ID09PSAneWVhcicpIHVzZXJJbnB1dHMuZGF0ZS5teVllYXIudGV4dENvbnRlbnQgPSBnZXRZZWFyKCBEYXRlLm5vdygpICk7XHJcbiAgfVxyXG5cclxuICAvLyBZZWFyIE5hdmlnYXRpb24gSWNvbnNcclxuICB1c2VySW5wdXRzLmRhdGUueWVhclVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgIGlmICh1c2VySW5wdXRzLmRhdGUubXlZZWFyLnRleHRDb250ZW50ID09PSAneWVhcicpIHJldHVybiBzZXRJbnB1dHNUb1RvZGF5c0RhdGUoKTtcclxuICAgICAgXHJcbiAgICBsZXQgaW5jcmVtZW50ID0gTnVtYmVyKHVzZXJJbnB1dHMuZGF0ZS5teVllYXIudGV4dENvbnRlbnQpOyBpbmNyZW1lbnQrKztcclxuICAgIHVzZXJJbnB1dHMuZGF0ZS5teVllYXIudGV4dENvbnRlbnQgPSBpbmNyZW1lbnQ7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNldElucHV0c1RvVG9kYXlzRGF0ZSgpIHtcclxuICAgIFRvZG8udXNlcklucHV0cy5kYXRlLm15WWVhci50ZXh0Q29udGVudCA9IGdldFllYXIoIERhdGUubm93KCkgKTtcclxuXHJcbiAgICBpZiAodXNlcklucHV0cy5kYXRlLm15RGF5LnRleHRDb250ZW50ICAgPT09ICAnZGF5JyApIHVzZXJJbnB1dHMuZGF0ZS5teURheS50ZXh0Q29udGVudCA9IGdldERhdGUoIERhdGUubm93KCkgKTtcclxuICAgIGlmICh1c2VySW5wdXRzLmRhdGUubXlNb250aC50ZXh0Q29udGVudCA9PT0gJ21vbnRoJykgdXNlcklucHV0cy5kYXRlLm15TW9udGgudGV4dENvbnRlbnQgPSBnZXRNb250aCggRGF0ZS5ub3coKSApKzE7XHJcbiAgfVxyXG5cclxuICB1c2VySW5wdXRzLmRhdGUueWVhckRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgIGlmICh1c2VySW5wdXRzLmRhdGUubXlZZWFyLnRleHRDb250ZW50ID09PSAneWVhcicpIHJldHVybiBzZXRJbnB1dHNUb1RvZGF5c0RhdGUoKTtcclxuXHJcbiAgICBsZXQgZGVpbmNyZW1lbnQgPSBOdW1iZXIodXNlcklucHV0cy5kYXRlLm15WWVhci50ZXh0Q29udGVudCk7IGRlaW5jcmVtZW50LS07XHJcbiAgICB1c2VySW5wdXRzLmRhdGUubXlZZWFyLnRleHRDb250ZW50ID0gZGVpbmNyZW1lbnQ7XHJcbiAgfSk7XHJcblxyXG4gIC8vIE1vZGFsIFZpZXcgOjogUHJvamVjdHMgRHJvcGRvd24gXHJcbiAgLy8gcmVuZGVyIHByb2plY3RzIGRyb3Bkb3duIG1lbnUgb25DbGlja1xyXG4gIHVzZXJJbnB1dHMucHJvamVjdC5kcnBEbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHJcbiAgICBpZiAodXNlcklucHV0cy5wcm9qZWN0Lm1lbnUubGVuZ3RoID09PSAwKSB7XHJcbiAgXHJcbiAgICAgIGNvbnN0IHNlbGVjdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgIHNlbGVjdENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXNlbGVjdC1tZW51Jyk7XHJcbiAgICAgIHNlbGVjdENvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuICAgICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgXHJcbiAgICAgIGlmIChwcm9qZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgc2VsZWN0b3IuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1zZWxlY3RvcicpO1xyXG4gICAgICAgIHNlbGVjdG9yLnRleHRDb250ZW50ID0gJ0VtcHR5JztcclxuICAgICAgICBzZWxlY3Rvci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgc2VsZWN0b3Iuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xyXG4gICAgICAgIHNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3Rvcik7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XHJcbiAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgICBzZWxlY3Rvci5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXNlbGVjdG9yJyk7XHJcbiAgICAgICAgICBzZWxlY3Rvci5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcbiAgICAgICAgICBzZWxlY3Rvci50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcclxuICBcclxuICAgICAgICAgIHNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgdXNlcklucHV0cy5wcm9qZWN0LmlucHV0LnZhbHVlID0gc2VsZWN0b3IudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICB9KTtcclxuICBcclxuICAgICAgICAgIHNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB1c2VySW5wdXRzLnByb2plY3QubWVudS5wdXNoKHNlbGVjdENvbnRhaW5lcik7XHJcbiAgICB1c2VySW5wdXRzLnByb2plY3QuZ3JvdXAuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGFpbmVyKTsgIFxyXG4gIH1cclxuICBcclxuICBlbHNlIHtcclxuICAgIHVzZXJJbnB1dHMucHJvamVjdC5tZW51WzBdLnJlbW92ZSgpO1xyXG4gICAgdXNlcklucHV0cy5wcm9qZWN0Lm1lbnUgPSBbXTtcclxuICB9XHJcbiAgXHJcbiAgfSk7XHJcblxyXG4gIC8vIE1vZGFsIFZpZXcgOjogSW5wdXQgZ3JvdXAgZm9yIHF1aWNrIGl0ZXJhdGlvblxyXG4gIGNvbnN0IGtleUlucHV0R3JvdXAgPSBbXHJcbiAgICB1c2VySW5wdXRzLnRhc2suaW5wdXQsXHJcbiAgICB1c2VySW5wdXRzLnByb2plY3QuaW5wdXQsIHVzZXJJbnB1dHMucHJvamVjdC5kcnBEbixcclxuXHJcbiAgICB1c2VySW5wdXRzLmRhdGUuZGF5LCB1c2VySW5wdXRzLmRhdGUubW9udGgsXHJcbiAgICB1c2VySW5wdXRzLmRhdGUueWVhcixcclxuXHJcbiAgICBlbGVtZW50cy5jYWxlbmRhci5jb250YWluZXIsXHJcbiAgICB1c2VySW5wdXRzLnByaW9yaXR5RmxhZy5ncm91cFxyXG4gIF07XHJcblxyXG4gIC8vIFZpZXcgTWV0aG9kc1xyXG4gIGNvbnN0IHZpZXcgPSB7XHJcbiAgICBsYXN0VmlldyAgICA6IGVsZW1lbnRzLmRhc2hib2FyZCxcclxuICAgIGN1cnJlbnRWaWV3IDogZWxlbWVudHMuZGFzaGJvYXJkLFxyXG5cclxuICAgIHVwZGF0ZVByb2plY3RUYXNrVG90YWw6IGZ1bmN0aW9uKHByb2plY3RzKSB7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb2plY3RMaXN0IG9mIGVsZW1lbnRzLmFzaWRlLmNoaWxkcmVuKSB7XHJcblxyXG4gICAgICAgICAgaWYgKHByb2plY3QuaWQgPT09IHByb2plY3RMaXN0LmlkKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9qZWN0LnRhc2tzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHByb2plY3RMaXN0LmNoaWxkcmVuWzFdLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgIHByb2plY3RMaXN0LmNoaWxkcmVuWzFdLnRleHRDb250ZW50ID0gcHJvamVjdC50YXNrcy5sZW5ndGg7XHJcbiAgICAgICAgICB9ICBcclxuICAgICAgICB9IFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZU5vdGlmaWNhdGlvbnM6IGZ1bmN0aW9uKHByb2plY3RzKSB7XHJcbiAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgIGlmIChwcm9qZWN0LnRhc2tzLmxlbmd0aCAhPT0gMCkgIHJldHVybiBlbGVtZW50cy5ub3RpZmljYXRpb25zLmNsYXNzTGlzdC5hZGQoJ25vdGlmeScpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsZW1lbnRzLm5vdGlmaWNhdGlvbnMuY2xhc3NMaXN0LnJlbW92ZSgnbm90aWZ5Jyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNsZWFyTGFzdFZpZXc6ICh2aWV3VG9DbGVhcikgPT4ge1xyXG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXTtcclxuXHJcbiAgICAgIGlmICh2aWV3VG9DbGVhci5jaGlsZHJlbi5sZW5ndGggIT09IDApIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygdmlld1RvQ2xlYXIuY2hpbGRyZW4pIHRvUmVtb3ZlLnB1c2goaXRlbSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goaXRlbSA9PiBpdGVtLnJlbW92ZSgpKTtcclxuICAgICAgdG9SZW1vdmUgPSBbXTtcclxuICAgIH0sXHJcblxyXG4gICAgcG9wdWxhdGVCeVByb2plY3Q6IGZ1bmN0aW9uKHZpZXcsIElEKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB2aWV3O1xyXG5cclxuICAgICAgdGhpcy5sYXN0Vmlldy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIHRoaXMuY3VycmVudFZpZXcuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgbGV0IHRvQWRkID0gW107XHJcbiAgICAgIGxldCB0b1JlbW92ZSA9IFtdO1xyXG5cclxuICAgICAgaWYgKHRoaXMubGFzdFZpZXcuY2hpbGRyZW4ubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMubGFzdFZpZXcuY2hpbGRyZW4pIHsgdG9SZW1vdmUucHVzaChpdGVtKSB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goaXRlbSA9PiBpdGVtLnJlbW92ZSgpKTtcclxuICAgICAgdG9SZW1vdmUgPSBbXTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgIGlmIChwcm9qZWN0LnRhc2tzLmxlbmd0aCAhPT0gMCkgcHJvamVjdC50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgICAgICAgaWYgKHByb2plY3QuaWQgPT09IElEKSB0b0FkZC5wdXNoKENhcmQodGFzaykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0b0FkZC5mb3JFYWNoKCBpdGVtID0+IHRoaXMuY3VycmVudFZpZXcuYXBwZW5kQ2hpbGQoIGl0ZW0gKSk7XHJcbiAgICAgIHRvQWRkID0gW107XHJcblxyXG4gICAgICB0aGlzLmxhc3RWaWV3ID0gdGhpcy5jdXJyZW50VmlldztcclxuICAgIH0sXHJcblxyXG4gICAgc2VhcmNoOiBmdW5jdGlvbih2aWV3LCB0YXNrcykge1xyXG4gICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmlldztcclxuICAgICAgLy9pZiAodGhpcy5jdXJyZW50VmlldyA9PT0gdGhpcy5sYXN0VmlldykgcmV0dXJuO1xyXG5cclxuICAgICAgdGhpcy5jbGVhckxhc3RWaWV3KHRoaXMubGFzdFZpZXcpO1xyXG5cclxuICAgICAgdGhpcy5sYXN0Vmlldy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIHRoaXMuY3VycmVudFZpZXcuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgbGV0IHRvQWRkID0gW107XHJcblxyXG4gICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4gdG9BZGQucHVzaChDYXJkKHRhc2spKSApO1xyXG5cclxuICAgICAgdG9BZGQuZm9yRWFjaCggaXRlbSA9PiB0aGlzLmN1cnJlbnRWaWV3LmFwcGVuZENoaWxkIChpdGVtICkpO1xyXG4gICAgICB0b0FkZCA9IFtdO1xyXG5cclxuICAgICAgdGhpcy5sYXN0VmlldyA9IHRoaXMuY3VycmVudFZpZXc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNoYW5nZSBzbyBtb3JlIG9wZW4gLSB3aGF0IGlmIG90aGVyIHNvcnQgbWV0aG9kcyByZXF1aXJlZFxyXG4gICAgc29ydDogZnVuY3Rpb24odmlldywgZGF0ZVNvcnRDYWxsYmFjaykge1xyXG4gICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmlldztcclxuICAgICAgaWYgKHRoaXMuY3VycmVudFZpZXcgPT09IHRoaXMubGFzdFZpZXcpIHJldHVybjtcclxuXHJcbiAgICAgIHRoaXMuY2xlYXJMYXN0Vmlldyh0aGlzLmxhc3RWaWV3KTtcclxuXHJcbiAgICAgIHRoaXMubGFzdFZpZXcuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICB0aGlzLmN1cnJlbnRWaWV3LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHJcbiAgICAgIGxldCB0b0FkZCA9IFtdO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XHJcbiAgICAgICAgaWYgKHByb2plY3QudGFza3MubGVuZ3RoICE9PSAwKSBwcm9qZWN0LnRhc2tzLmZvckVhY2godGFzayA9PiB7XHJcblxyXG4gICAgICAgICAgc3dpdGNoKGRhdGVTb3J0Q2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FzZSBudWxsOlxyXG4gICAgICAgICAgICAgIHRvQWRkLnB1c2goQ2FyZCh0YXNrKSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIGlmIChkYXRlU29ydENhbGxiYWNrKG5ldyBEYXRlKHRhc2suZHVlRGF0ZS55ZWFyLCB0YXNrLmR1ZURhdGUubW9udGgtMSwgdGFzay5kdWVEYXRlLmRheSkpKSB0b0FkZC5wdXNoKENhcmQodGFzaykpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfSAgICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0b0FkZC5mb3JFYWNoKCBpdGVtID0+IHRoaXMuY3VycmVudFZpZXcuYXBwZW5kQ2hpbGQoIGl0ZW0gKSApO1xyXG4gICAgICB0b0FkZCA9IFtdO1xyXG5cclxuICAgICAgdGhpcy5sYXN0VmlldyA9IHRoaXMuY3VycmVudFZpZXc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDb250cm9sbGVyIDo6IE9ic2VydmVycyArIE5vdGlmaWVyc1xyXG4gIGNvbnN0IGNvbnRyb2xsZXIgPSB7XHJcbiAgICBvYnNlcnZlcnM6IHtjb25maWcgOiB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9fSxcclxuICAgIG5vdGlmeSAgIDogKGRhdGEsIGFjdGlvbiwgZWxlbWVudCkgPT4ge1xyXG4gICAgICBfbm90aWZ5UHJvamVjdChkYXRhLCBhY3Rpb24pO1xyXG4gICAgICBfdXBkYXRlU3RvcmFnZSgpO1xyXG4gICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udHJvbGxlci5vYnNlcnZlcnMubWFpbldpbmRvdyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbkxpc3QsIG9ic2VydmVyKSA9PiB7XHJcbiAgICB2aWV3LnVwZGF0ZVByb2plY3RUYXNrVG90YWwocHJvamVjdHMpO1xyXG4gICAgdmlldy51cGRhdGVOb3RpZmljYXRpb25zKHByb2plY3RzKTtcclxuICB9KTtcclxuXHJcbiAgY29udHJvbGxlci5vYnNlcnZlcnMubWFpbldpbmRvdy5vYnNlcnZlKGVsZW1lbnRzLm1haW5XaW5kb3csIGNvbnRyb2xsZXIub2JzZXJ2ZXJzLmNvbmZpZyk7XHJcblxyXG4gIGNvbnN0IF9wcm9qZWN0Vmlld0hhbmRsZXIgPSAocHJvamVjdFRhYiwgcHJvamVjdERhdGEpID0+IHtcclxuICAgIGVsZW1lbnRzLmRiSGVhZGluZy50ZXh0Q29udGVudCA9IHByb2plY3REYXRhLm5hbWU7XHJcbiAgICB2aWV3LnBvcHVsYXRlQnlQcm9qZWN0KGVsZW1lbnRzLmRiUHJvamVjdCwgcHJvamVjdERhdGEuaWQpO1xyXG5cclxuICAgIGZvcihsZXQgbm9kZSBvZiBlbGVtZW50cy5hc2lkZV9kYXRlcy5jaGlsZHJlbikgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdqcy1hc2lkZS1oaWdobGlnaHQnKTtcclxuICAgIGlmIChsYXN0U2VsZWN0ZWRQcm9qZWN0ICE9PSB1bmRlZmluZWQpIGxhc3RTZWxlY3RlZFByb2plY3QucmVtb3ZlKCdqcy1hc2lkZS1oaWdobGlnaHQnKTsgIFxyXG4gICAgICAgICAgICBcclxuICAgIHByb2plY3RUYWIudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2pzLWFzaWRlLWhpZ2hsaWdodCcpO1xyXG4gICAgbGFzdFNlbGVjdGVkUHJvamVjdCA9IHByb2plY3RUYWIudGFyZ2V0LmNsYXNzTGlzdDtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcblxyXG4gICAgcHJvamVjdHMsXHJcbiAgICBlbGVtZW50cyxcclxuICAgIHVzZXJJbnB1dHMsXHJcbiAgICBrZXlJbnB1dEdyb3VwLFxyXG4gICAgdmlldyxcclxuICAgIGNvbnRyb2xsZXIsXHJcbiAgICBfbm90aWZ5UHJvamVjdCxcclxuICAgIF9wcm9qZWN0Vmlld0hhbmRsZXIsXHJcblxyXG4gICAgcmVzdG9yZTogKCkgPT4gX2NoZWNrU3RvcmFnZSgpLFxyXG4gICAgX3VwZGF0ZVN0b3JhZ2UsXHJcblxyXG4gICAgX2dldFRhc2tQcm9qZWN0LFxyXG4gICAgX2FkZFRhc2tUb1Byb2plY3QsXHJcbiAgICBfcmVtb3ZlUHJvamVjdEZyb21MaXN0LFxyXG4gICAgX3JlbW92ZUFsbFRhc2tzRnJvbVByb2plY3QsXHJcblxyXG4gICAgX2FkZFByb2plY3RUb1Byb2plY3RzSW5kZXhcclxuICB9XHJcblxyXG59KSgpO1xyXG5cclxuY29uc3QgbmV3VGFza0J1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9pbnRlcicpO1xyXG5cclxubmV3VGFza0J1dHRvbnMuZm9yRWFjaChidG4gPT4ge1xyXG4gIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dUYXNrRm9ybSk7XHJcbn0pO1xyXG5cclxuIC8vIE1vZGFsXHJcbmNvbnN0IHRhc2tNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpYWxvZycpO1xyXG5cclxuY29uc3QgZmxhZ0ljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmxnJyk7XHJcblxyXG5mdW5jdGlvbiBzaG93VGFza0Zvcm0oZSkge1xyXG5cclxuICB0YXNrTW9kYWwuc2hvd01vZGFsKCk7XHJcblxyXG4gIGNvbnN0IG5ld1Rhc2sgPSBUYXNrLmNyZWF0ZSgpO1xyXG5cclxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xyXG4gIGNvbnN0IGlucHV0cyA9IGZvcm0uZWxlbWVudHM7XHJcblxyXG4gIGlucHV0c1tcInRhc2tcIl0uYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhLWV4Y2xhbWF0aW9uJykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1lcnJvcicpO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBmbGFnSWNvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJpb3JpdHktZmxhZycpO1xyXG4gIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbmNlbCcpO1xyXG5cclxuICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZvcm1IYW5kbGVyKTtcclxuXHJcbiAgZmxhZ0ljb25zLmZvckVhY2goZmxhZyA9PiB7XHJcbiAgICBmbGFnLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0UHJpb3J0aXkpO1xyXG4gIH0pO1xyXG5cclxuICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVUYXNrRm9ybSk7XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1IYW5kbGVyKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBuZXdUYXNrLm5hbWUgPSBpbnB1dHNbXCJ0YXNrXCJdLnZhbHVlO1xyXG4gICAgLy9jb25zb2xlLmxvZyhuZXdUYXNrLm5hbWUpO1xyXG5cclxuICAgIC8vIEVtcHR5IHRhc2sgZGVzY3JpcHRpb24/IDo6IHJldHVybiArIHZpc3VhbCBlcnJvclxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhLWV4Y2xhbWF0aW9uJykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1lcnJvcicpO1xyXG4gICAgaWYgKG5ld1Rhc2submFtZSA9PT0gJycpIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmEtZXhjbGFtYXRpb24nKS5jbGFzc0xpc3QuYWRkKCdzaG93LWVycm9yJyk7XHJcblxyXG4gICAgLy8gUHJvY2VzcyB0YXNrXHJcbiAgICBuZXdUYXNrLnByb2plY3QgPSBpbnB1dHNbXCJwcm9qZWN0XCJdLnZhbHVlO1xyXG5cclxuICAgIGlmIChuZXdUYXNrLnByb2plY3QgPT09ICcnKSBuZXdUYXNrLnByb2plY3QgPSAnVXNlcic7XHJcbiAgICAvLyBUT0RPIGFkZCBwcm9qZWN0IGRvdCBjb2xvdXIgIVxyXG5cclxuICAgIGNvbnN0IHByb2plY3QgPSBUb2RvLl9nZXRUYXNrUHJvamVjdChuZXdUYXNrLnByb2plY3QsIFRvZG8ucHJvamVjdHMpO1xyXG4gICAgVG9kby5fYWRkVGFza1RvUHJvamVjdChuZXdUYXNrLCBwcm9qZWN0KTtcclxuXHJcbiAgICAvLyBEYXRlc1xyXG4gICAgY29uc3QgZGF0ZVRvZGF5ID0gRGF0ZS5ub3coKTtcclxuICAgIG5ld1Rhc2suY3JlYXRpb25EYXRlLnllYXIgID0gZ2V0WWVhcihkYXRlVG9kYXkpO1xyXG4gICAgbmV3VGFzay5jcmVhdGlvbkRhdGUubW9udGggPSBnZXRNb250aChkYXRlVG9kYXkpKzE7XHJcbiAgICBuZXdUYXNrLmNyZWF0aW9uRGF0ZS5kYXkgICA9IGdldERhdGUoZGF0ZVRvZGF5KTtcclxuXHJcbiAgICBjb25zdCBteURhdGUgPSBbIE51bWJlcihUb2RvLnVzZXJJbnB1dHMuZGF0ZS5teVllYXIudGV4dENvbnRlbnQpLCBOdW1iZXIoVG9kby51c2VySW5wdXRzLmRhdGUubXlNb250aC50ZXh0Q29udGVudCksIE51bWJlcihUb2RvLnVzZXJJbnB1dHMuZGF0ZS5teURheS50ZXh0Q29udGVudCkgXTtcclxuXHJcbiAgICBteURhdGUuZm9yRWFjaCggZGF0ZSA9PiB7XHJcbiAgICAgIGlmICggaXNOYU4oZGF0ZSkgKSBuZXdUYXNrLmR1ZURhdGUgPSAnJztcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbmV3VGFzay5kdWVEYXRlLnllYXIgID0gbXlEYXRlWzBdO1xyXG4gICAgICAgIG5ld1Rhc2suZHVlRGF0ZS5tb250aCA9IG15RGF0ZVsxXTtcclxuICAgICAgICBuZXdUYXNrLmR1ZURhdGUuZGF5ICAgPSBteURhdGVbMl07XHJcbiAgICAgIH0gXHJcbiAgICB9KTtcclxuXHJcbiAgICBuZXdUYXNrLnRpbWUgPSBpbnB1dHNbXCJ0aW1lXCJdLnZhbHVlO1xyXG4gICAgbmV3VGFzay5jb21tZW50ID0gaW5wdXRzW1wiY29tbWVudFwiXS52YWx1ZTtcclxuXHJcbiAgICBsZXQgbGFzdEluZGV4ID0gVG9kby5wcm9qZWN0cy5sZW5ndGg7XHJcblxyXG4gICAgVG9kby5fYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleChwcm9qZWN0LCBUb2RvLnByb2plY3RzKTtcclxuXHJcbiAgICBpZiAobGFzdEluZGV4ICE9PSBUb2RvLnByb2plY3RzLmxlbmd0aCkge1xyXG4gICAgICAvLyBDcmVhdGUgbmV3IGdyb3VwXHJcbiAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBHcm91cChwcm9qZWN0LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWFzaWRlLXByb2plY3RzJykpIC8vIGNvbnN0IGFzaWRlVGFiX3Byb2plY3RzXHJcblxyXG4gICAgICBuZXdQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBUb2RvLl9wcm9qZWN0Vmlld0hhbmRsZXIoZSwgcHJvamVjdClcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbmV3VGFza0NhcmQgPSBDYXJkKG5ld1Rhc2spO1xyXG5cclxuICAgIGNvbnN0IHRhc2tfZmluID0gbmV3VGFza0NhcmQucXVlcnlTZWxlY3RvcignLnRhc2stY29tcGxldGUnKTtcclxuICAgIGNvbnN0IHRhc2tfd2luID0gbmV3VGFza0NhcmQucXVlcnlTZWxlY3RvcignLmNvbmdyYXRzLW1hc2snKTtcclxuICAgIGNvbnN0IHRhc2tfYmluID0gbmV3VGFza0NhcmQucXVlcnlTZWxlY3RvcignLmZhLXRyYXNoLWFsdCcpO1xyXG5cclxuICAgdGFza19maW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdmYXInKTtcclxuICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZmEtY2lyY2xlJyk7XHJcblxyXG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdmYXMnKTtcclxuICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZmEtY2hlY2stY2lyY2xlJyk7XHJcbiAgICAgIGUudGFyZ2V0LnN0eWxlLmNvbG9yID0gJ2dyZWVuJztcclxuICAgICAgICBcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGFza193aW4uY2xhc3NMaXN0LmFkZCgnc2hvdy1jb25ncmF0cy1tYXNrJyk7XHJcbiAgICAgIH0sIDEyMDApO1xyXG4gICAgICAgIFxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBuZXdUYXNrQ2FyZC5jbGFzc0xpc3QuYWRkKCdyZW1vdmUtdGFzaycpO1xyXG4gICAgICB9LCAyNDAwKTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cclxuICAgICAgICBUb2RvLl9ub3RpZnlQcm9qZWN0KG5ld1Rhc2ssICdyZW1vdmUnKTtcclxuICAgICAgICBUb2RvLl91cGRhdGVTdG9yYWdlKCk7XHJcbiAgICAgICAgbmV3VGFza0NhcmQucmVtb3ZlKCk7XHJcblxyXG4gICAgICB9LCAzNjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRhc2tfYmluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgbmV3VGFza0NhcmQuY2xhc3NMaXN0LmFkZCgncmVtb3ZlLXRhc2snKTtcclxuICBcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcblxyXG4gICAgICAgIFRvZG8uX25vdGlmeVByb2plY3QobmV3VGFzaywgJ3JlbW92ZScpO1xyXG4gICAgICAgIFRvZG8uX3VwZGF0ZVN0b3JhZ2UoKTtcclxuICAgICAgICBuZXdUYXNrQ2FyZC5yZW1vdmUoKTtcclxuXHJcbiAgICAgIH0sIDEyMDApO1xyXG4gIH0pO1xyXG5cclxuICAgIC8vcmVuZGVyIHRvIGNvcnJlY3Qgdmlld1xyXG4gICAgc3dpdGNoKFRvZG8udmlldy5jdXJyZW50Vmlldykge1xyXG5cclxuICAgICAgY2FzZSBUb2RvLmVsZW1lbnRzLmRhc2hib2FyZDpcclxuICAgICAgICBUb2RvLnZpZXcuY3VycmVudFZpZXcuYXBwZW5kQ2hpbGQobmV3VGFza0NhcmQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSBUb2RvLmVsZW1lbnRzLnRvZGF5OlxyXG4gICAgICAgIGlmICghaXNGdXR1cmUobmV3VGFzay5kdWVEYXRlKSkgVG9kby52aWV3LmN1cnJlbnRWaWV3LmFwcGVuZENoaWxkKG5ld1Rhc2tDYXJkKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgVG9kby5lbGVtZW50cy51cGNvbWluZzpcclxuICAgICAgICBpZiAoaXNGdXR1cmUobmV3VGFzay5kdWVEYXRlKSkgVG9kby52aWV3LmN1cnJlbnRWaWV3LmFwcGVuZENoaWxkKG5ld1Rhc2tDYXJkKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICB9XHJcbiAgICBUb2RvLl91cGRhdGVTdG9yYWdlKCk7XHJcblxyXG4gICAgdGFza01vZGFsLmNsb3NlKCk7XHJcbiAgXHJcbiAgICBmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZvcm1IYW5kbGVyKTtcclxuXHJcbiAgICBmbGFnSWNvbnMuZm9yRWFjaChmbGFnID0+IHtcclxuICAgICAgZmxhZy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHNldFByaW9ydGl5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNsb3NlQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZVRhc2tGb3JtKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldFByaW9ydGl5KGUpIHtcclxuICAgIG5ld1Rhc2sucHJpb3JpdHlGbGFnID0gZ2V0Q29tcHV0ZWRTdHlsZShlLnRhcmdldCkuY29sb3I7XHJcbiAgICBmbGFnSWNvbi5zdHlsZS5jb2xvciA9IGdldENvbXB1dGVkU3R5bGUoZS50YXJnZXQpLmNvbG9yO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGlkZVRhc2tGb3JtKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICB0YXNrTW9kYWwuY2xvc2UoKTtcclxuXHJcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiBuZXdUYXNrKSB7IGRlbGV0ZSBuZXdUYXNrW3Byb3BlcnR5XSB9XHJcblxyXG4gICAgZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmb3JtSGFuZGxlcik7XHJcblxyXG4gICAgZmxhZ0ljb25zLmZvckVhY2goZmxhZyA9PiB7XHJcbiAgICAgIGZsYWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRQcmlvcnRpeSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjbG9zZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVUYXNrRm9ybSk7XHJcbiAgfVxyXG59XHJcblxyXG5Ub2RvLmVsZW1lbnRzLm1vZGFsLnRhc2suaWNvbnMuZm9yRWFjaChpY29uID0+IHtcclxuICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGljb24gb2YgVG9kby5lbGVtZW50cy5tb2RhbC50YXNrLmljb25zKSB7XHJcbiAgICAgIGljb24uY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtaWNvbi1zZWxlY3QnKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IGZsYWcgb2YgVG9kby51c2VySW5wdXRzLnByaW9yaXR5RmxhZy5ncm91cC5jaGlsZHJlbikge1xyXG4gICAgICBmbGFnLmNoaWxkcmVuWzBdLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgIH0gXHJcblxyXG4gICAgVG9kby5rZXlJbnB1dEdyb3VwLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICBpZiAoaW5wdXQgIT09ICcnKSBpbnB1dC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdtb2RhbC1pY29uLXNlbGVjdCcpO1xyXG4gICAgXHJcbiAgICBzd2l0Y2goZS50YXJnZXQuY2xhc3NMaXN0WzJdKSB7XHJcbiAgICAgIGNhc2UgJ3Blbic6XHJcbiAgICAgICAgVG9kby51c2VySW5wdXRzLnRhc2suaW5wdXQuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICBUb2RvLnVzZXJJbnB1dHMudGFzay5pbnB1dC5mb2N1cygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAncHJqJzpcclxuICAgICAgICBUb2RvLnVzZXJJbnB1dHMucHJvamVjdC5pbnB1dC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIFRvZG8udXNlcklucHV0cy5wcm9qZWN0LmRycERuLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgVG9kby51c2VySW5wdXRzLnByb2plY3QuaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2NhbCc6XHJcbiAgICAgICAgZm9yKGNvbnN0IGRhdGVJbnB1dCBvZiBUb2RvLnVzZXJJbnB1dHMuZGF0ZS5ncm91cCkge1xyXG4gICAgICAgICAgZGF0ZUlucHV0LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnZmxnJzpcclxuICAgICAgICBUb2RvLnVzZXJJbnB1dHMucHJpb3JpdHlGbGFnLmdyb3VwLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZmxhZyBvZiBUb2RvLnVzZXJJbnB1dHMucHJpb3JpdHlGbGFnLmdyb3VwLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICBmbGFnLmNoaWxkcmVuWzBdLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIGFzaWRlIC0gbWVudSBkcmF3ZXIgaWNvblxyXG5jb25zdCBhc2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FzaWRlJyk7XHJcbmNvbnN0IGFzaWRlSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hc2lkZS1kcmF3ZXItaWNvbicpO1xyXG5hc2lkZUljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBhc2lkZS5jbGFzc0xpc3QudG9nZ2xlKCdqcy1hc2lkZS1kcmF3ZXItYW5pbWF0aW9uJykpO1xyXG5cclxuLy8gYXNpZGUgLSBEYXRlcyBNZW51XHJcbmZvciAobGV0IHNlY3Rpb24gb2YgVG9kby5lbGVtZW50cy5hc2lkZV9kYXRlcy5jaGlsZHJlbikge1xyXG4gIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgaWYgKGxhc3RTZWxlY3RlZFByb2plY3QgIT09IHVuZGVmaW5lZCkgbGFzdFNlbGVjdGVkUHJvamVjdC5yZW1vdmUoJ2pzLWFzaWRlLWhpZ2hsaWdodCcpO1xyXG4gICAgZm9yKGxldCBub2RlIG9mIFRvZG8uZWxlbWVudHMuYXNpZGVfZGF0ZXMuY2hpbGRyZW4pIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnanMtYXNpZGUtaGlnaGxpZ2h0Jyk7XHJcblxyXG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnanMtYXNpZGUtaGlnaGxpZ2h0Jyk7XHJcbiAgICBzb3J0VGFza3MoZSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmxldCBsYXN0SGVhZGluZyA9ICdUYXNrcyc7XHJcblxyXG5mdW5jdGlvbiBzb3J0VGFza3MoZSkge1xyXG4gIHN3aXRjaChlLnRhcmdldC50ZXh0Q29udGVudC50cmltKCkpIHtcclxuXHJcbiAgICBjYXNlICdUYXNrcyc6XHJcbiAgICAgIC8vVG9kby52aWV3LnBvcHVsYXRlQWxsKCk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coJ3Rhc2tzLXRhYicpO1xyXG4gICAgICBsYXN0SGVhZGluZyA9ICdUYXNrcyc7XHJcbiAgICAgIFRvZG8uZWxlbWVudHMuZGJIZWFkaW5nLnRleHRDb250ZW50ID0gJ1Rhc2tzJztcclxuICAgICAgVG9kby52aWV3LnNvcnQoVG9kby5lbGVtZW50cy5kYXNoYm9hcmQsIG51bGwpO1xyXG4gICAgICBicmVhaztcclxuXHJcbiAgICBjYXNlICdUb2RheSc6XHJcbiAgICAgIGxhc3RIZWFkaW5nID0gJ1RvZGF5JztcclxuICAgICAgLy9jb25zb2xlLmxvZygndG9kYXktdGFiJyk7XHJcbiAgICAgIC8vVG9kby52aWV3LnBvcHVsYXRlVG9kYXkoKTtcclxuICAgICAgVG9kby5lbGVtZW50cy5kYkhlYWRpbmcudGV4dENvbnRlbnQgPSAnVG9kYXknO1xyXG4gICAgICBUb2RvLnZpZXcuc29ydChUb2RvLmVsZW1lbnRzLnRvZGF5LCBpc1RvZGF5KTtcclxuICAgICAgYnJlYWs7XHJcblxyXG4gICAgY2FzZSAnVXBjb21pbmcnOlxyXG4gICAgICBsYXN0SGVhZGluZyA9ICdVcGNvbWluZyc7XHJcbiAgICAgIC8vY29uc29sZS5sb2coJ3VwY29taW5nLXRhYicpO1xyXG4gICAgICAvL1RvZG8udmlldy5wb3B1bGF0ZVVwY29taW5nKCk7XHJcbiAgICAgIFRvZG8uZWxlbWVudHMuZGJIZWFkaW5nLnRleHRDb250ZW50ID0gJ1VwY29taW5nJztcclxuICAgICAgVG9kby52aWV3LnNvcnQoVG9kby5lbGVtZW50cy51cGNvbWluZywgaXNGdXR1cmUpO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn1cclxuXHJcbi8vIHR1cm4gaW50byBncm91cCBpZiBtb3JlIGRyb3Bkb3ducyByZXF1aXJlZFxyXG5jb25zdCBwcm9qZWN0c0Ryb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXByb2plY3RzLWRyb3Bkb3duJyk7XHJcbnByb2plY3RzRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gIGUudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XHJcbiAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC50b2dnbGUoJ2Ryb3Bkb3duLW1lbnUnKTtcclxuICBlLnRhcmdldC5wYXJlbnROb2RlLmNoaWxkcmVuWzFdLmNsYXNzTGlzdC50b2dnbGUoJ2Ryb3Bkb3duLXN0YXRlJyk7XHJcbiAgXHJcbiAgXHJcbiAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnanMtYXNpZGUtaGlnaGxpZ2h0Jyk7XHJcbn0pO1xyXG5cclxubGV0IHNlYXJjaEFycmF5ID0gW107XHJcblxyXG5jb25zdCBuZXdUYXNrRGIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LXRhc2snKTtcclxuXHJcbi8vIHNlYXJjaFxyXG5jb25zdCBzZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2VhcmNoJyk7XHJcblxyXG5zZWFyY2guYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xyXG4gIC8vbmV3VGFza0RiLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAvL1RvZG8uZWxlbWVudHMuZGJIZWFkaW5nLnRleHRDb250ZW50ID0gJ1NlYXJjaCc7XHJcbiAgVG9kby5wcm9qZWN0cy5mb3JFYWNoKHByb2plY3QgPT4ge1xyXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHByb2plY3QudGFza3MpIHtcclxuICAgICAgaWYgKHRhc2submFtZS50b0xvd2VyQ2FzZSgpID09PSBlLnRhcmdldC52YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgc2VhcmNoQXJyYXkucHVzaCh0YXNrKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIFRvZG8udmlldy5zZWFyY2goVG9kby5lbGVtZW50cy5zZWFyY2gsIHNlYXJjaEFycmF5KTtcclxuICBzZWFyY2hBcnJheSA9IFtdO1xyXG59KTtcclxuXHJcbnNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKGUpID0+IHtcclxuICAvL25ld1Rhc2tEYi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gIC8vVG9kby5lbGVtZW50cy5kYkhlYWRpbmcgPSBsYXN0SGVhZGluZztcclxuICBzZWFyY2hBcnJheSA9IFtdO1xyXG59KTtcclxuXHJcbi8vIGdlbmVyYXRlIGRhc2hib2FyZCB0YXNrXHJcbmZ1bmN0aW9uIENhcmQodGFzaykge1xyXG4gIGNvbnN0IGNhcmRJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICBjYXJkSXRlbS5pZCA9IHRhc2suaWQ7XHJcbiAgY2FyZEl0ZW0uZGF0YXNldC5wcm9qZWN0ID0gdGFzay5wcm9qZWN0SUQ7XHJcbiAgY2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgndGFzay1jYXJkJyk7XHJcblxyXG4gICAgY29uc3QgY29uZ3JhdHNNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25ncmF0c01hc2suY2xhc3NMaXN0LmFkZCgnY29uZ3JhdHMtbWFzaycpO1xyXG4gICAgY29uZ3JhdHNNYXNrLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGNvbmdyYXRzTWFzay5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgIGNvbmdyYXRzTWFzay5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcblxyXG4gICAgICBjb25zdCBjb25ncmF0TWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgICAgY29uZ3JhdE1lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnY29uZ3JhdHMtbWVzc2FnZScpO1xyXG4gICAgICBjb25ncmF0TWVzc2FnZS50ZXh0Q29udGVudCA9ICdHcmVhdCBXb3JrISc7XHJcblxyXG4gICAgY29uZ3JhdHNNYXNrLmFwcGVuZENoaWxkKGNvbmdyYXRNZXNzYWdlKTtcclxuICBjYXJkSXRlbS5hcHBlbmRDaGlsZChjb25ncmF0c01hc2spO1xyXG5cclxuICAgIGNvbnN0IGNoZWNrQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjaGVja0JveC5jbGFzc0xpc3QuYWRkKCd0YXNrLWNoZWNrLWNvbC0xJyk7XHJcblxyXG4gICAgICBjb25zdCBpQ2hlY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgIGlDaGVjay5jbGFzc0xpc3QuYWRkKCdmYXInKTtcclxuICAgICAgaUNoZWNrLmNsYXNzTGlzdC5hZGQoJ2ZhLWNpcmNsZScpO1xyXG4gICAgICBpQ2hlY2suY2xhc3NMaXN0LmFkZCgndGFzay1jb21wbGV0ZScpO1xyXG5cclxuICAgICAgaUNoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdmYXInKTtcclxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdmYS1jaXJjbGUnKTtcclxuXHJcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZmFzJyk7XHJcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZmEtY2hlY2stY2lyY2xlJyk7XHJcbiAgICAgICAgZS50YXJnZXQuc3R5bGUuY29sb3IgPSAnZ3JlZW4nO1xyXG4gICAgXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjb25ncmF0c01hc2suY2xhc3NMaXN0LmFkZCgnc2hvdy1jb25ncmF0cy1tYXNrJyksIDEyMDApO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgncmVtb3ZlLXRhc2snKSwgMjQwMCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBUb2RvLmNvbnRyb2xsZXIubm90aWZ5KHRhc2ssICdyZW1vdmUnLCBjYXJkSXRlbSksIDM2MDApO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IGlGbGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgICBpRmxhZy5jbGFzc0xpc3QuYWRkKCdmYXMnKTtcclxuICAgICAgaUZsYWcuY2xhc3NMaXN0LmFkZCgnZmEtZmxhZycpO1xyXG4gICAgICBpRmxhZy5jbGFzc0xpc3QuYWRkKCd0YXNrLXByaW9yaXR5Jyk7XHJcbiAgICAgIGlGbGFnLnN0eWxlLmNvbG9yID0gdGFzay5wcmlvcml0eUZsYWc7XHJcblxyXG4gICAgY2hlY2tCb3guYXBwZW5kQ2hpbGQoaUNoZWNrKTtcclxuICAgIGNoZWNrQm94LmFwcGVuZENoaWxkKGlGbGFnKTtcclxuICAgIGNhcmRJdGVtLmFwcGVuZENoaWxkKGNoZWNrQm94KTtcclxuXHJcbiAgICBjb25zdCB0YXNrSW5mb0JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGFza0luZm9Cb3guY2xhc3NMaXN0LmFkZCgndGFzay1pbmZvJyk7XHJcblxyXG4gICAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcclxuICAgICAgaGVhZGluZy5jbGFzc0xpc3QuYWRkKCd0YXNrLWhlYWRpbmcnKTtcclxuICAgICAgaGVhZGluZy50ZXh0Q29udGVudCA9IHRhc2submFtZTtcclxuICAgICAgdGFza0luZm9Cb3guYXBwZW5kQ2hpbGQoaGVhZGluZyk7XHJcblxyXG4gICAgICAvLyB1bFxyXG4gICAgICBjb25zdCB0YXNrTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgIHRhc2tMaXN0LmNsYXNzTGlzdC5hZGQoJ3Rhc2stZGV0YWlscycpO1xyXG4gICAgICB0YXNrSW5mb0JveC5hcHBlbmRDaGlsZCh0YXNrTGlzdCk7XHJcblxyXG4gICAgICAgIC8vIGxpIC0gRGF0ZVxyXG4gICAgICAgIGNvbnN0IGRhdGVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICBkYXRlSXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLWRhdGUnKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICAgIGlEYXRlLmNsYXNzTGlzdC5hZGQoJ2ZhcicpO1xyXG5cclxuICAgICAgICAgIHRhc2suZHVlRGF0ZSA9PT0gJycgPyBpRGF0ZS5jbGFzc0xpc3QuYWRkKCdmYS1jYWxlbmRhcicpIDogaURhdGUuY2xhc3NMaXN0LmFkZCgnZmEtY2FsZW5kYXItY2hlY2snKTtcclxuXHJcbiAgICAgICAgICBpRGF0ZS5jbGFzc0xpc3QuYWRkKCd0YXNrLWRhdGUtaWNvbicpO1xyXG4gICAgICAgICAgZGF0ZUl0ZW0uYXBwZW5kQ2hpbGQoaURhdGUpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHBEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgICAgcERhdGUuY2xhc3NMaXN0LmFkZCgndGFzay1kYXRlLXRleHQnKTtcclxuXHJcbiAgICAgICAgICB0YXNrLmR1ZURhdGUgIT09ICcnID8gcERhdGUudGV4dENvbnRlbnQgPSBmb3JtYXQobmV3IERhdGUoXHJcbiAgICAgICAgICB0YXNrLmR1ZURhdGUueWVhciwgdGFzay5kdWVEYXRlLm1vbnRoLTEsIHRhc2suZHVlRGF0ZS5kYXkpLCAnZWVlIGRkIE1NTSB5eXl5JyApIDogcERhdGUudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICAgICAgICBpZiAodGFzay5kdWVEYXRlID09PSAnJykge1xyXG4gICAgICAgICAgICBwRGF0ZS50ZXh0Q29udGVudCA9ICcnOyBpRGF0ZS5zdHlsZS5jb2xvciA9ICdsaWdodGdyZXknO1xyXG4gICAgICAgICAgfSAgICBcclxuXHJcbiAgICAgICAgZGF0ZUl0ZW0uYXBwZW5kQ2hpbGQocERhdGUpO1xyXG4gICAgICB0YXNrTGlzdC5hcHBlbmRDaGlsZChkYXRlSXRlbSk7XHJcblxyXG4gICAgICAgIC8vIGxpIC0gUHJvamVjdFxyXG4gICAgICAgIGNvbnN0IHByb2plY3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICBwcm9qZWN0SXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLXByb2plY3QnKTtcclxuICAgICAgICBwcm9qZWN0SXRlbS5zdHlsZS53aWR0aCA9ICc0NSUnXHJcblxyXG4gICAgICAgICAgY29uc3QgcFByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgICBwUHJvamVjdC5jbGFzc0xpc3QuYWRkKCd0YXNrLXByb2plY3QtdGV4dCcpO1xyXG4gICAgICAgICAgcFByb2plY3QudGV4dENvbnRlbnQgPSB0YXNrLnByb2plY3Q7XHJcbiAgICAgICAgICBwcm9qZWN0SXRlbS5hcHBlbmRDaGlsZChwUHJvamVjdCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgaVByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgICBpUHJvamVjdC5jbGFzc0xpc3QuYWRkKCdmYXMnKTtcclxuICAgICAgICAgIGlQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ2ZhLWNpcmNsZScpO1xyXG4gICAgICAgICAgaVByb2plY3QuY2xhc3NMaXN0LmFkZCgndGFzay1wcm9qZWN0LWljb24nKTtcclxuXHJcbiAgICAgICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQoaVByb2plY3QpO1xyXG4gICAgICB0YXNrTGlzdC5hcHBlbmRDaGlsZChwcm9qZWN0SXRlbSk7XHJcblxyXG4gICAgICAgIC8vIGxpIC0gUmVtb3ZlXHJcbiAgICAgICAgY29uc3QgcmVtb3ZlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgcmVtb3ZlSXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLXJlbW92ZScpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGlSZW1vdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgICBpUmVtb3ZlLmNsYXNzTGlzdC5hZGQoJ2ZhcicpO1xyXG4gICAgICAgICAgaVJlbW92ZS5jbGFzc0xpc3QuYWRkKCdmYS10cmFzaC1hbHQnKTtcclxuXHJcbiAgICAgICAgICBpUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjYXJkSXRlbS5jbGFzc0xpc3QuYWRkKCdyZW1vdmUtdGFzaycpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IFRvZG8uY29udHJvbGxlci5ub3RpZnkodGFzaywgJ3JlbW92ZScsIGNhcmRJdGVtKSwgMTIwMCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpUHJvamVjdC5jbGFzc0xpc3QuYWRkKCd0YXNrLXJlbW92ZS1pY29uJyk7XHJcbiAgICAgICAgcmVtb3ZlSXRlbS5hcHBlbmRDaGlsZChpUmVtb3ZlKTtcclxuICAgICAgdGFza0xpc3QuYXBwZW5kQ2hpbGQocmVtb3ZlSXRlbSk7XHJcblxyXG4gICAgY2FyZEl0ZW0uYXBwZW5kQ2hpbGQodGFza0luZm9Cb3gpO1xyXG4gIHJldHVybiBjYXJkSXRlbTtcclxufVxyXG5cclxuZnVuY3Rpb24gR3JvdXAocHJvamVjdCwgcGFyZW50KSB7XHJcbiAgLy8gbGlcclxuICBjb25zdCBwcm9qZWN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgcHJvamVjdEl0ZW0uaWQgPSBwcm9qZWN0LmlkO1xyXG4gIHByb2plY3RJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QnKTtcclxuXHJcbiAgICAvLyBkaXZcclxuICAgIGNvbnN0IHByb2plY3RJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBwcm9qZWN0SW5mby5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWluZm8nKTtcclxuXHJcbiAgICAgIC8vIGljb25cclxuICAgICAgY29uc3QgcHJvamVjdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7ICAgICAgXHJcbiAgICAgIHByb2plY3RJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gICAgICBwcm9qZWN0SWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1jaXJjbGUnKTtcclxuICAgICAgcHJvamVjdEljb24uY2xhc3NMaXN0LmFkZCgncHJvamVjdC1pY29uJyk7XHJcbiAgICAgIC8vcHJvamVjdEljb24uc3R5bGUuY29sb3IgPSBwcm9qZWN0LmNvbG9yOyAgLy9zZXRDb2xvclxyXG4gICAgICBwcm9qZWN0SW5mby5hcHBlbmRDaGlsZChwcm9qZWN0SWNvbik7XHJcbiAgICBcclxuICAgICAgLy8gcGFyYWdyYXBoXHJcbiAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICBwcm9qZWN0TmFtZS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LW5hbWUnKTtcclxuICAgICAgcHJvamVjdE5hbWUudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XHJcbiAgICAgIHByb2plY3RJbmZvLmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcclxuICAgIFxyXG4gICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQocHJvamVjdEluZm8pO1xyXG5cclxuICAgIGNvbnN0IHRhc2tDb3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIHRhc2tDb3VudC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXRhc2stY291bnQnKTtcclxuICAgIHRhc2tDb3VudC50ZXh0Q29udGVudCA9IHByb2plY3QudGFza3MubGVuZ3RoO1xyXG4gICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQodGFza0NvdW50KTtcclxuXHJcbiAgICBwcm9qZWN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgIFRvZG8uZWxlbWVudHMuZGJIZWFkaW5nLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICBUb2RvLnZpZXcucG9wdWxhdGVCeVByb2plY3QoVG9kby5lbGVtZW50cy5kYlByb2plY3QsIHByb2plY3QuaWQpO1xyXG5cclxuICAgICAgZm9yKGxldCBub2RlIG9mIFRvZG8uZWxlbWVudHMuYXNpZGVfZGF0ZXMuY2hpbGRyZW4pIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnanMtYXNpZGUtaGlnaGxpZ2h0Jyk7XHJcbiAgICAgIGlmIChsYXN0U2VsZWN0ZWRQcm9qZWN0ICE9PSB1bmRlZmluZWQpIGxhc3RTZWxlY3RlZFByb2plY3QucmVtb3ZlKCdqcy1hc2lkZS1oaWdobGlnaHQnKTsgIFxyXG4gICAgXHJcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2pzLWFzaWRlLWhpZ2hsaWdodCcpO1xyXG5cclxuICAgICAgbGFzdFNlbGVjdGVkUHJvamVjdCA9IHByb2plY3RJdGVtLmNsYXNzTGlzdDtcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChwcm9qZWN0SXRlbSk7XHJcblxyXG4gIHJldHVybiBwcm9qZWN0SXRlbTtcclxufVxyXG5cclxuVG9kby5yZXN0b3JlKCk7XHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImdldFJhbmRvbVZhbHVlcyIsInJuZHM4IiwiVWludDhBcnJheSIsInJuZyIsImNyeXB0byIsImJpbmQiLCJtc0NyeXB0byIsInV1aWQiLCJieXRlVG9IZXgiLCJzdWJzdHIiLCJidWYiLCJvZmZzZXQiLCJybmRzIiwicmFuZG9tIiwiYXJyIiwiYXJndW1lbnRzIiwidG9Mb3dlckNhc2UiLCJUeXBlRXJyb3IiLCJuYW1lIiwicHJvamVjdCIsImR1ZURhdGUiLCJjcmVhdGlvbkRhdGUiLCJwcmlvcml0eUZsYWciLCJ0YXNrcyIsInZhbHVlIiwibGFzdCIsInByb2plY3RzVG9TZWFyY2giLCJpdGVtVG9DaGVjayIsImV4aXN0cyIsImZvckVhY2giLCJfZXhpc3RzIiwiYWN0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsImdldE1vbnRoIiwiZGlydHlEYXRlIiwiZGF0ZSIsIm1vbnRoIiwiaXNMZWFwWWVhciIsInllYXIiLCJnZXRGdWxsWWVhciIsImxhc3REYXkiLCJwcm9wZXJ0eSIsImdlbmVyYXRlRGF5cyIsImRheXMiLCJwYXJlbnQiLCJkYXkiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb250YWluZXIiLCJtb250aFRhYnMiLCJoMiIsIm5vdyIsIk51bWJlciIsImNsb3NlQ2FsIiwidHlwZSIsIm5hdkxlZnQiLCJuYXZSaWdodCIsImRhdGFzZXQiLCJuYXYiLCJuYXZBbHQiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ2aXNpYmlsaXR5IiwibmF2UmlnaHRIYW5kbGVyIiwibGFzdFNlbGVjdGVkTW9udGgiLCJuYXZMZWZ0SGFuZGxlciIsImlzRGF0ZSIsImlzVmFsaWQiLCJpc05hTiIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0IiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsImRpcnR5T3B0aW9ucyIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJfb3B0aW9ucyIsIm51bWJlciIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsIm9iamVjdCIsInByZWRpY2F0ZSIsImhhc093blByb3BlcnR5IiwiYXJyYXkiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW4iLCJ0b2tlblZhbHVlIiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRMb25nIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImxvY2FsaXplIiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeSIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwic3RhcnRPZlVUQ1dlZWsiLCJsb2NhbGUiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwibG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZmlyc3RXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInNpZ25lZFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJ5IiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJiIiwiaG91cnMiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInRpbWVMb25nRm9ybWF0dGVyIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJpbnB1dCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiaXNGdXR1cmUiLCJnZXRZZWFyIiwiZGF5T2ZNb250aCIsInN0YXJ0T2ZEYXkiLCJzZXRIb3VycyIsImlzU2FtZURheSIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0U3RhcnRPZkRheSIsImRhdGVSaWdodFN0YXJ0T2ZEYXkiLCJpc1RvZGF5IiwibGFzdFNlbGVjdGVkUHJvamVjdCIsIlRvZG8iLCJwcm9qZWN0cyIsInByb2plY3RzRnJvbUxvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJhc2lkZVRhYl9wcm9qZWN0cyIsIl91cGRhdGVTdG9yYWdlIiwic2V0SXRlbSIsIl9ub3RpZnlQcm9qZWN0IiwidGFza1RvSGFuZGxlIiwidGFzayIsIl9nZXRUYXNrUHJvamVjdCIsInByb2plY3ROYW1lIiwiX2FkZFRhc2tUb1Byb2plY3QiLCJwcm9qZWN0SUQiLCJfYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleCIsIl9yZW1vdmVBbGxUYXNrc0Zyb21Qcm9qZWN0IiwiZWxlbWVudHMiLCJtb2RhbCIsImljb25zIiwiY2FsZW5kYXIiLCJub3RpZmljYXRpb25zIiwiYXNpZGUiLCJhc2lkZV9kYXRlcyIsIm1haW5XaW5kb3ciLCJkYkhlYWRpbmciLCJkYXNoYm9hcmQiLCJ1cGNvbWluZyIsInNlYXJjaCIsImRiUHJvamVjdCIsImV2ZW50TGlzdGVuZXJzIiwic2hvdyIsImhpZGUiLCJkYXlzSW5Nb250aHMiLCJjaGlsZE5vZGVzIiwidXNlcklucHV0cyIsImRycERuIiwiZ3JvdXAiLCJtZW51IiwibXlEYXkiLCJteVllYXIiLCJteU1vbnRoIiwieWVhclVwIiwieWVhckRuIiwiaWNvbiIsInNldElucHV0c1RvVG9kYXlzRGF0ZSIsImhhbmRsZURhdGUiLCJpbmNyZW1lbnQiLCJkZWluY3JlbWVudCIsInNlbGVjdENvbnRhaW5lciIsImhlaWdodCIsInBvc2l0aW9uIiwic2VsZWN0b3IiLCJjdXJzb3IiLCJrZXlJbnB1dEdyb3VwIiwidmlldyIsImxhc3RWaWV3IiwiY3VycmVudFZpZXciLCJ1cGRhdGVQcm9qZWN0VGFza1RvdGFsIiwicHJvamVjdExpc3QiLCJ1cGRhdGVOb3RpZmljYXRpb25zIiwiY2xlYXJMYXN0VmlldyIsInZpZXdUb0NsZWFyIiwidG9SZW1vdmUiLCJwb3B1bGF0ZUJ5UHJvamVjdCIsIklEIiwidG9BZGQiLCJDYXJkIiwic29ydCIsImRhdGVTb3J0Q2FsbGJhY2siLCJjb250cm9sbGVyIiwib2JzZXJ2ZXJzIiwiY29uZmlnIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm5vdGlmeSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbkxpc3QiLCJvYnNlcnZlciIsIm9ic2VydmUiLCJfcHJvamVjdFZpZXdIYW5kbGVyIiwicHJvamVjdFRhYiIsInByb2plY3REYXRhIiwibm9kZSIsInJlc3RvcmUiLCJwYXJzZSIsInNldFByb2plY3QiLCJsYXN0SW5kZXgiLCJHcm91cCIsIm5ld1Rhc2tDYXJkIiwiX3JlbW92ZVByb2plY3RGcm9tTGlzdCIsInByb2plY3RUb1JlbW92ZSIsImJ0biIsInNob3dUYXNrRm9ybSIsInRhc2tNb2RhbCIsImZsYWdJY29uIiwic2hvd01vZGFsIiwibmV3VGFzayIsImZvcm0iLCJpbnB1dHMiLCJmbGFnSWNvbnMiLCJjbG9zZUJ1dHRvbiIsImZvcm1IYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJkYXRlVG9kYXkiLCJteURhdGUiLCJjb21tZW50IiwidGFza19maW4iLCJ0YXNrX3dpbiIsInRhc2tfYmluIiwiY29sb3IiLCJzZXRUaW1lb3V0IiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmxhZyIsInNldFByaW9ydGl5IiwiaGlkZVRhc2tGb3JtIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZvY3VzIiwiZGF0ZUlucHV0IiwidG9nZ2xlIiwic2VjdGlvbiIsInNvcnRUYXNrcyIsImxhc3RIZWFkaW5nIiwidHJpbSIsInNlYXJjaEFycmF5IiwiY2FyZEl0ZW0iLCJjb25ncmF0c01hc2siLCJjb25ncmF0TWVzc2FnZSIsImNoZWNrQm94IiwiaUNoZWNrIiwiaUZsYWciLCJ0YXNrSW5mb0JveCIsImhlYWRpbmciLCJ0YXNrTGlzdCIsImRhdGVJdGVtIiwiaURhdGUiLCJwRGF0ZSIsImRpcnR5Rm9ybWF0U3RyIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJwcm9qZWN0SXRlbSIsInBQcm9qZWN0IiwiaVByb2plY3QiLCJyZW1vdmVJdGVtIiwiaVJlbW92ZSIsInByb2plY3RJbmZvIiwicHJvamVjdEljb24iLCJ0YXNrQ291bnQiXSwic291cmNlUm9vdCI6IiJ9