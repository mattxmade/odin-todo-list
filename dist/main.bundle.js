"use strict";(self.webpackChunkodin_todo_list=self.webpackChunkodin_todo_list||[]).push([[179],{426:(e,n,t)=>{t.d(n,{Z:()=>o});var A=t(537),a=t.n(A),r=t(645),i=t.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu&display=swap);"]),i.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  font-size: 1.6rem;\n}\n\np, li, legend {\n  font-family: "Ubuntu", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\ni, button {\n  cursor: pointer;\n}\n\n.wrapper {\n  background-color: rgb(223, 222, 222);\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.dialog-task-bar {\n  width: 70%;\n  min-height: 13rem;\n  height: -webkit-max-content;\n  height: -moz-max-content;\n  height: max-content;\n  padding: 2.5rem 1.5rem 1.5rem;\n  margin: 18rem auto 0;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: 0 0 0.5rem 0.1rem black;\n}\n@media (max-width: 880px) {\n  .dialog-task-bar {\n    width: 95%;\n  }\n}\n\nform {\n  margin-bottom: 1.5rem;\n}\n\nform input {\n  min-width: 35%;\n  padding: 1rem;\n}\n\nfieldset {\n  width: 100%;\n  border: none;\n  display: flex;\n}\n@media (max-width: 880px) {\n  fieldset {\n    gap: 1rem;\n    flex-wrap: wrap;\n  }\n}\n\nlegend {\n  color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 0.5rem;\n}\n\nfieldset .task-icons {\n  flex: auto;\n  display: flex;\n  position: relative;\n  margin-right: 10rem;\n  align-items: center;\n  justify-self: flex-start;\n  justify-content: space-evenly;\n}\n@media (max-width: 880px) {\n  fieldset .task-icons {\n    gap: 1rem;\n    margin-right: 0;\n  }\n}\n\n.task-icons i.fas,\n.task-icons i.far {\n  font-size: 2rem;\n  position: relative;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.flag-icon-group {\n  width: 100%;\n  height: 4rem;\n  top: -4.5rem;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  transition: 0.3s;\n}\n\n.task-icons i.fa-flag {\n  -webkit-text-stroke: 0.1rem rgb(126, 126, 126);\n}\n\n.flag-icon-group li {\n  margin: 0 1rem;\n}\n\ni.fa-flag.flag-r,\ni.fa-flag.flag-o,\ni.fa-flag.flag-y,\ni.fa-flag.flag-w {\n  visibility: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  transition: 0.3s;\n}\n\ni.fa-flag.flag-r {\n  color: red;\n  transform: translate(60px, 35px);\n}\n\ni.fa-flag.flag-o {\n  color: orange;\n  transform: translate(20px, 35px);\n}\n\ni.fa-flag.flag-y {\n  color: yellow;\n  transform: translate(-20px, 35px);\n}\n\ni.fa-flag.flag-w {\n  color: white;\n  transform: translate(-60px, 35px);\n}\n\ni.fa-flag .icon-selector-visibility {\n  transition: 0.3s;\n  -webkit-user-select: auto;\n     -moz-user-select: auto;\n      -ms-user-select: auto;\n          user-select: auto;\n  visibility: visible;\n  transform: translate(0, 0);\n}\n\nfieldset .task-buttons {\n  justify-self: flex-end;\n}\n\n.cancel,\n.add {\n  padding: 0.5rem;\n  min-width: 8rem;\n  height: 3.5rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid black;\n}\n\n.cancel {\n  background-color: white;\n}\n\n.add {\n  color: white;\n  background-color: rgb(157, 157, 252);\n}\n\ndialog .dialog-lip {\n  width: 100vw;\n  height: 2rem;\n  left: -0.1rem;\n  position: absolute;\n  inset: auto 0 -0.2rem;\n}\n\n/*==========\n  Calendar\n============*/\n.calendar {\n  margin: 0 auto;\n  height: 30rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid lightgrey;\n}\n\n.month h3 {\n  margin: 1rem 0 1rem;\n}\n\n.day {\n  margin: 0.3rem;\n  height: 4.25rem;\n  outline: 0.1rem solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.day p {\n  position: absolute;\n  font-size: 1.2rem;\n  left: 0.5rem;\n  top: 0.2rem;\n}\n\nnav {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n}\n\nnav ul {\n  display: flex;\n}\n\n.pointer {\n  cursor: pointer;\n}\n\n.app-window {\n  flex: auto;\n  display: flex;\n}\n\nmain {\n  width: 80%;\n}\n\naside {\n  width: 20%;\n}\n\nfooter, footer ul {\n  display: flex;\n}/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"AAkBA;EACE,SAAA;EACA,UAAA;EACA,sBAAA;AChBF;;ADoBA;EACE,gBAAA;ACjBF;;ADqBA;EACE,iBAAA;AClBF;;ADqBA;EACE,iCAAA;AClBF;;ADqBA;EACE,gBAAA;AClBF;;ADqBA;EACE,eAAA;AClBF;;ADqBA;EACE,oCAAA;EACA,iBAAA;EAEA,WAAA;EACA,aAAA;EACA,sBAAA;EACA,8BAAA;ACnBF;;ADsBA;EACE,UAAA;EACA,iBAAA;EACA,2BAAA;EAAA,wBAAA;EAAA,mBAAA;EACA,6BAAA;EAEA,oBAAA;EAEA,YAAA;EACA,mBAAA;EACA,mCAAA;ACrBF;ADlCE;EA6CF;IAaI,UAAA;ECpBF;AACF;;ADuBA;EACE,qBAAA;ACpBF;;ADuBA;EACE,cAAA;EACA,aAAA;ACpBF;;ADuBA;EACE,WAAA;EACA,YAAA;EACA,aAAA;ACpBF;ADtDE;EAuEF;IAMI,SAAA;IACA,eAAA;ECnBF;AACF;;ADsBA;EACE,yBAAA;EACA,qBAAA;ACnBF;;ADsBA;EACE,UAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;EACA,mBAAA;EACA,wBAAA;EACA,6BAAA;ACnBF;AD3EE;EAuFF;IAUI,SAAA;IACA,eAAA;EClBF;AACF;;ADqBA;;EAEE,eAAA;EACA,kBAAA;EACA,yBAAA;AClBF;;ADqBA;EACE,WAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;EACA,uBAAA;EACA,kBAAA;EACA,gBAAA;AClBF;;ADqBA;EACE,8CAAA;AClBF;;ADqBA;EACE,cAAA;AClBF;;ADqBA;;;;EAIE,kBAAA;EACA,yBAAA;KAAA,sBAAA;MAAA,qBAAA;UAAA,iBAAA;EACA,gBAAA;AClBF;;ADqBA;EACE,UAAA;EACA,gCAAA;AClBF;;ADoBA;EACE,aAAA;EACA,gCAAA;ACjBF;;ADmBA;EACE,aAAA;EACA,iCAAA;AChBF;;ADkBA;EACE,YAAA;EACA,iCAAA;ACfF;;ADkBA;EACE,gBAAA;EACA,yBAAA;KAAA,sBAAA;MAAA,qBAAA;UAAA,iBAAA;EACA,mBAAA;EACA,0BAAA;ACfF;;ADkBA;EACE,sBAAA;ACfF;;ADkBA;;EAEE,eAAA;EACA,eAAA;EACA,cAAA;EACA,qBAAA;EACA,0BAAA;ACfF;;ADkBA;EACE,uBAAA;ACfF;;ADkBA;EACE,YAAA;EACA,oCAAA;ACfF;;ADkBA;EACE,YAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,qBAAA;ACfF;;ADkBA;;aAAA;AAGA;EACE,cAAA;EACA,aAAA;EACA,qBAAA;EACA,8BAAA;ACfF;;ADsBA;EACE,mBAAA;ACnBF;;ADsBA;EACE,cAAA;EACA,eAAA;EACA,+BAAA;EAEA,aAAA;EACA,mBAAA;EACA,uBAAA;EAEA,kBAAA;ACrBF;;ADwBA;EACE,kBAAA;EACA,iBAAA;EACA,YAAA;EACA,WAAA;ACrBF;;ADwBA;EACE,WAAA;EACA,aAAA;EACA,8BAAA;ACrBF;;ADwBA;EACE,aAAA;ACrBF;;ADwBA;EACE,eAAA;ACrBF;;ADwBA;EACE,UAAA;EACA,aAAA;ACrBF;;ADwBA;EACE,UAAA;ACrBF;;ADwBA;EACE,UAAA;ACrBF;;ADyBA;EACE,aAAA;ACtBF,CAAA,oCAAA",sourceRoot:""}]);const o=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",A=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),A&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),A&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,A,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(A)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);A&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),r="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,A=0;A<n.length;A++)if(n[A].identifier===e){t=A;break}return t}function A(e,A){for(var r={},i=[],o=0;o<e.length;o++){var s=e[o],c=A.base?s[0]+A.base:s[0],l=r[c]||0,d="".concat(c," ").concat(l);r[c]=l+1;var u=t(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(f);else{var p=a(f,A);A.byIndex=o,n.splice(o,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var r=A(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=t(r[i]);n[o].references--}for(var s=A(e,a),c=0;c<r.length;c++){var l=t(r[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}r=s}}},569:e=>{var n={};e.exports=function(e,t){var A=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var A="";t.supports&&(A+="@supports (".concat(t.supports,") {")),t.media&&(A+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(A+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),A+=t.css,a&&(A+="}"),t.media&&(A+="}"),t.supports&&(A+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(A+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(A,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},769:(e,n,t)=>{var A=t(379),a=t.n(A),r=t(795),i=t.n(r),o=t(569),s=t.n(o),c=t(565),l=t.n(c),d=t(216),u=t.n(d),f=t(589),p=t.n(f),m=t(426),E={};E.styleTagTransform=p(),E.setAttributes=l(),E.insert=s().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=u(),a()(m.Z,E),m.Z&&m.Z.locals&&m.Z.locals;var C,g=new Uint8Array(16);function h(){if(!C&&!(C="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return C(g)}const v=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,B=function(e){return"string"==typeof e&&v.test(e)};for(var b=[],y=0;y<256;++y)b.push((y+256).toString(16).substr(1));const w=function(e,n,t){var A=(e=e||{}).random||(e.rng||h)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,n){t=t||0;for(var a=0;a<16;++a)n[t+a]=A[a];return n}return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(b[e[n+0]]+b[e[n+1]]+b[e[n+2]]+b[e[n+3]]+"-"+b[e[n+4]]+b[e[n+5]]+"-"+b[e[n+6]]+b[e[n+7]]+"-"+b[e[n+8]]+b[e[n+9]]+"-"+b[e[n+10]]+b[e[n+11]]+b[e[n+12]]+b[e[n+13]]+b[e[n+14]]+b[e[n+15]]).toLowerCase();if(!B(t))throw TypeError("Stringified UUID is invalid");return t}(A)},k=(e="default")=>({name:e,tasks:[],id:w()});function x(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function D(e){x(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function F(e){x(1,arguments);var n=D(e),t=n.getMonth();return t}function L(e){x(1,arguments);var n=D(e),t=n.getFullYear();return t%400==0||t%4==0&&t%100!=0}function j(e,n){switch(e){case 0:return document.createElement(n);case 1:return document.querySelector();case 2:return document.querySelectorAll()}}function S(e,n,t){e.style[n]=t}function N(e,n){for(let t=1;t<=e;t++){let e=j(0,"div");e.classList.add("day");let A=j(0,"p");A.textContent=t,e.appendChild(A),n.appendChild(e)}}const q=(()=>{const e=[];return{projects:e,addTaskToProject:n=>{(n=>{for(let t of e)if(n.project===t.name)return t.tasks.push(n),void(n.projectID=t.id);const t=k(n.project);n.projectID=t.id,t.tasks.push(n),e.push(t)})(n)}}})();document.querySelector(".pointer").addEventListener("click",(function(e){I.showModal();const n={name:"",project:"defualt",date:"unset",time:"unset",priority:"white",comment:""},t=document.querySelector("form"),A=t.elements,a=document.querySelectorAll(".priority-flag"),r=document.querySelector(".cancel"),i=function(){const e=j(0,"div");e.classList.add("calendar"),S(e,"width","35rem"),S(e,"display","grid"),S(e,"align-items","center"),S(e,"grid-template-columns","repeat(12, 1fr)");const n=[];for(let t=1;t<=12;t++){let A,a=j(0,"div"),r=j(0,"h3"),i=j(0,"div");switch(t){case 1:A="January",N(31,i);break;case 2:A="February",L(Date.now())?N(29,i):N(28,i);break;case 3:A="March",N(31,i);break;case 4:A="April",N(30,i);break;case 5:A="May",N(31,i);break;case 6:A="June",N(30,i);break;case 7:A="July",N(31,i);break;case 8:A="August",N(31,i);break;case 9:A="September",N(30,i);break;case 10:A="October",N(31,i);break;case 11:A="November",N(30,i);break;case 12:A="December",N(31,i)}r.textContent=A,a.appendChild(r),a.appendChild(i),a.id=t,a.classList.add(A),a.classList.add("month"),e.appendChild(a),Number(a.id)!==F(Date.now())&&S(a,"visibility","hidden"),S(a,"width","80%"),S(a,"height","100%"),S(i,"display","grid"),S(a,"textAlign","center"),S(a,"position","absolute"),S(a,"backgroundColor","white"),S(a,"justify-self","center"),S(i,"grid-template-columns","repeat(7, 1fr)"),n.push(a)}S(e,"position","relative");const t=j(0,"i");t.classList.add("fas"),t.classList.add("fa-chevron-circle-left");const A=j(0,"i");return A.classList.add("fas"),A.classList.add("fa-chevron-circle-right"),e.appendChild(t),e.appendChild(A),S(t,"position","absolute"),S(A,"position","absolute"),S(t,"left","-4rem"),S(A,"right","-4rem"),S(t,"fontSize","3rem"),S(A,"fontSize","3rem"),S(t,"margin-left","0.65rem"),S(A,"margin-right","0.65rem"),{container:e,navLeft:t,navRight:A}}();function o(e){e.preventDefault(),n.name=A.task.value,q.addTaskToProject(n),I.close(),R++,t.removeEventListener("submit",o),i.container.remove(),a.forEach((e=>{e.removeEventListener("click",s)})),r.removeEventListener("click",c),console.log(q.projects)}function s(e){n.priority=getComputedStyle(e.target).color,e.target.parentNode.parentNode.parentNode.style.color=n.priority;for(let n of e.target.parentNode.parentNode.children)n.children[0].classList.toggle("icon-selector-visibility")}function c(){I.close(),R++,t.removeEventListener("submit",o),i.container.remove(),a.forEach((e=>{e.removeEventListener("click",s)})),r.removeEventListener("click",c)}I.appendChild(i.container),t.addEventListener("submit",o),i.navLeft.dataset.index=F(Date.now()),i.navLeft.addEventListener("click",(()=>{i.navLeft.dataset.index=Number(i.navLeft.dataset.index),i.navRight.dataset.index=Number(i.navRight.dataset.index),i.navLeft.dataset.index--,i.navRight.dataset.index--,Number(i.navLeft.dataset.index)<=0&&(i.navLeft.dataset.index=12,i.navRight.dataset.index=12);for(let e of i.container.children)console.dir(e),"DIV"===e.tagName&&(Number(i.navLeft.dataset.index)===Number(e.id)?e.style.visibility="visible":e.style.visibility="hidden")})),i.navRight.dataset.index=F(Date.now()),i.navRight.addEventListener("click",(()=>{i.navRight.dataset.index=Number(i.navRight.dataset.index),i.navLeft.dataset.index=Number(i.navLeft.dataset.index),i.navRight.dataset.index++,i.navLeft.dataset.index++,Number(i.navRight.dataset.index)>=13&&(i.navRight.dataset.index=1,i.navLeft.dataset.index=1);for(let e of i.container.children)console.dir(e),"DIV"===e.tagName&&(Number(i.navRight.dataset.index)===Number(e.id)?e.style.visibility="visible":e.style.visibility="hidden")})),a.forEach((e=>{e.addEventListener("click",s)})),r.addEventListener("click",c),R>2&&(console.log(r),a.forEach((e=>console.log(e))))}));let R=0;const I=document.querySelector("dialog");document.querySelectorAll(".task-icons").forEach((e=>{e.addEventListener("click",(e=>{switch(e.target.classList[2]){case"cal":case"tag":case"clk":case"cmt":break;case"flg":e.target.children[0].childNodes.forEach((e=>{"LI"===e.tagName&&e.childNodes[0].classList.toggle("icon-selector-visibility")}))}}))}))}},e=>{e(e.s=769)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,