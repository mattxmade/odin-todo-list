"use strict";(self.webpackChunkodin_todo_list=self.webpackChunkodin_todo_list||[]).push([[179],{426:(e,t,n)=>{n.d(t,{Z:()=>o});var A=n(537),a=n.n(A),r=n(645),i=n.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu&display=swap);"]),i.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  font-size: 1.6rem;\n}\n\np, li, legend, h1, h2 {\n  font-family: "Ubuntu", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\ni, button {\n  cursor: pointer;\n}\n\n.wrapper {\n  background-color: rgb(223, 222, 222);\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n/*=========\n  Nav Bar\n===========*/\nnav, footer {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 1.2rem;\n  background-color: #9d9dfc;\n}\n\nnav i {\n  color: white;\n  font-size: 2.3rem;\n}\n\nnav .user-alerts {\n  position: relative;\n}\n\n.user-alerts i:last-child {\n  position: absolute;\n}\n\n.user-notify {\n  z-index: 1;\n  top: -0.1rem;\n  left: 1.3rem;\n  transition: 0.9s;\n  font-size: 3rem;\n  color: transparent;\n}\n\n.notify {\n  color: red;\n  font-size: 1.1rem;\n}\n\nnav ul {\n  width: 35%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.pointer, i {\n  cursor: pointer;\n}\n\nnav .logo {\n  width: 35%;\n  cursor: auto;\n  font-size: 4rem;\n  margin-right: 1rem;\n}\n\n.nav-search {\n  width: 80%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nav-search input {\n  width: 60%;\n  height: 3rem;\n  margin: 0 1rem;\n  padding: 0.5rem;\n  font-size: 1.4rem;\n  border-radius: 0.5rem;\n  border: none;\n}\n\n.nav-search input:focus-visible {\n  outline: 0.2rem solid lightblue;\n}\n\n/*===========\n  Dashboard\napp-window: div\n  -aside\n    -ul: app-aside-calendar\n    -ul: app-aside-projects-list\n\n  -main: app-main-task-window\n    -dashboard\n=============*/\n.app-window {\n  flex: auto;\n  display: flex;\n}\n\naside {\n  width: 25%;\n  min-width: 28rem;\n  background-color: #fafafa;\n  padding: 2rem 2rem 5rem 2rem;\n  display: flex;\n  flex-direction: column;\n}\n\naside ul {\n  margin-bottom: 2rem;\n}\n\naside li {\n  gap: 1rem;\n  width: 100%;\n  padding: 1rem;\n  height: 3.5rem;\n  cursor: pointer;\n  font-size: 1.7rem;\n  border-radius: 0.5rem;\n  display: flex;\n  align-items: center;\n}\n\n/*==================\n  Aside:\n    Task Overview\n====================*/\naside ul:first-child {\n  height: 25%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.js-aside-highlight {\n  background-color: #efefef;\n}\n\n/*=============\n  Mask Button\n===============*/\nli {\n  position: relative;\n}\n\n.mask-button {\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  position: absolute;\n}\n\n/*============\n  Aside:\n    Projects\n==============*/\naside ul:last-child {\n  flex: 1;\n  height: auto;\n  display: flex;\n  overflow: hidden;\n  flex-direction: column;\n  transition: 0.3s;\n}\naside ul:last-child li {\n  display: flex;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\naside ul:last-child li:not(:first-child) {\n  width: calc(100% - 2rem);\n  margin-top: 1rem;\n  margin-left: 2rem;\n  display: flex;\n  justify-content: space-between;\n}\naside ul:last-child li:not(:first-child) i {\n  color: blue;\n  font-size: 1.3rem;\n}\naside ul:last-child li:not(:first-child) .project-info {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.projects-dropdown-icon {\n  font-size: 2.2rem;\n  transition: 0.3s;\n  transform: rotate(0);\n}\n\n.dropdown-state {\n  transition: 0.3s;\n  transform: rotate(-90deg);\n}\n\naside ul:last-child.dropdown-menu {\n  flex: 0 0 4.9rem;\n  transition: 0.3s;\n}\n\n/*=============\n  Dashboard:\n    Task view\n===============*/\nmain {\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 3rem 4rem 3rem 7rem;\n  background-color: white;\n  overflow-y: hidden;\n}\n\nmain h2 {\n  margin-bottom: 4rem;\n}\n\n.new-task {\n  gap: 1rem;\n  display: flex;\n  margin-left: 1.5rem;\n  margin-bottom: 2rem;\n  color: rgb(110, 110, 110);\n}\n\n.dashboard-tasks {\n  overflow: hidden;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  margin-bottom: 2rem;\n}\n\n.complete-task {\n  transform: translate(0, 100vw);\n}\n\n.remove-task {\n  transform: translate(-100vw);\n}\n\n.task-card {\n  width: 100%;\n  display: flex;\n  padding: 1.5rem;\n  position: relative;\n  background-color: rgb(240, 240, 240);\n  border-bottom: 0.1rem solid lightgray;\n  transition: 1.2s;\n}\n\n.task-card .fa-flag {\n  margin-right: 1rem;\n  color: orange;\n}\n\n.task-info {\n  gap: 1rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.task-info .task-details {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n}\n.task-info .task-details li {\n  gap: 1rem;\n  display: flex;\n  overflow: hidden;\n}\n.task-info .task-details li p {\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.task-info .task-details li:not(:last-child) {\n  width: 35%;\n}\n.task-info .task-details li:first-child {\n  width: 12%;\n}\n.task-info .task-details .task-project {\n  width: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin-right: 2rem;\n}\n.task-info .task-details .task-project i {\n  color: blue;\n}\n.task-info .task-details .task-project p {\n  text-align: right;\n}\n\n/*================\n  New Task Modal\n==================*/\ndialog {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  margin: auto;\n  border: none;\n  background-color: transparent;\n}\n\n.dialog-task-bar {\n  width: 70%;\n  min-height: 13rem;\n  height: -webkit-max-content;\n  height: -moz-max-content;\n  height: max-content;\n  padding: 2.5rem 1.5rem 1.5rem;\n  margin: 18rem auto 0;\n  border: none;\n  border-radius: 1rem;\n  background-color: white;\n  box-shadow: 0 0 0.5rem 0.1rem black;\n}\n@media (max-width: 880px) {\n  .dialog-task-bar {\n    width: 95%;\n  }\n}\n\n.js-task-icon {\n  height: 4rem;\n  width: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0.5rem;\n  border-bottom: 0.2rem solid transparent;\n  transition: 0.3s;\n}\n\n.modal-icon-select {\n  border-bottom: 0.2rem solid black;\n}\n\nform {\n  margin-bottom: 1.5rem;\n}\n\nform input {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  border: 0.2rem solid rgb(125, 125, 125);\n}\n\n.inputs {\n  width: 35%;\n  height: 3.9rem;\n  position: relative;\n}\n@media (max-width: 880px) {\n  .inputs {\n    width: 50%;\n  }\n}\n\n.inputs input {\n  width: 100%;\n  background-color: white;\n}\n\n.inputs .input-task {\n  position: absolute;\n  visibility: visible;\n}\n\n.dropdown-set-project,\n.dropdown-set-date,\n.input-date,\n.input-time,\n.input-comment {\n  width: 100%;\n  height: 100%;\n  visibility: hidden;\n}\n.dropdown-set-project i,\n.dropdown-set-date i,\n.input-date i,\n.input-time i,\n.input-comment i {\n  width: 3rem;\n  height: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0.2rem;\n  right: 0.2rem;\n  position: absolute;\n  border-radius: 0.1rem;\n  background-color: white;\n}\n\n.project-select-menu {\n  z-index: 5;\n  padding: 1rem;\n  border: 0.1rem dashed lightblue;\n  border-top: none;\n  background-color: white;\n  border-bottom-left-radius: 1rem;\n  border-bottom-right-radius: 1rem;\n  gap: 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-selector {\n  overflow: hidden;\n  transition: 0.2s;\n  padding: 1rem 1rem;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  border-radius: 0.5rem;\n  border: 0.1rem solid transparent;\n  background-color: rgb(253, 237, 240);\n}\n\n.project-selector:hover {\n  border: 0.1rem solid black;\n}\n\n.input-date,\n.input-time,\n.input-comment,\n.dropdown-set-date {\n  top: 0;\n  position: absolute;\n}\n\n.input-year {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.dropdown-set-date {\n  height: 100%;\n  gap: 0.5rem;\n  display: grid;\n  grid-template-columns: repeat(3, 33.3333333333%);\n}\n\n.input-calendar {\n  z-index: 5;\n  min-width: 20rem;\n  grid-column: span 3;\n  position: relative;\n  top: -13rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar {\n    top: -9.3rem;\n  }\n}\n@media (max-width: 620px) {\n  .input-calendar {\n    top: -7rem;\n  }\n}\n\n.input-calendar button {\n  position: absolute;\n  bottom: 0.6rem;\n  right: 1.5rem;\n  width: 10rem;\n  height: 3rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar button {\n    width: 8rem;\n    bottom: 0.6rem;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n  }\n}\n\n.dropdown-set-date li {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 0.5rem;\n  background-color: white;\n  border: 0.1rem solid lightblue;\n}\n\n.dropdown-set-date p {\n  padding: 1rem;\n}\n\n.dropdown-set-date li p:first-child {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\ni.year-nav {\n  width: 50%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\ni.year-nav-up {\n  top: -2.75rem;\n  left: -5%;\n}\n\ni.year-nav-down {\n  top: -2.75rem;\n  right: -5%;\n}\n\nfieldset {\n  gap: 1rem;\n  width: 100%;\n  border: none;\n  display: flex;\n}\n@media (max-width: 880px) {\n  fieldset {\n    flex-wrap: wrap;\n  }\n}\n@media (max-width: 620px) {\n  fieldset {\n    display: grid;\n    flex-wrap: nowrap;\n  }\n}\n\nlegend {\n  color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 0.5rem;\n}\n\nfieldset .task-icons {\n  min-width: 26rem;\n  flex: auto;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-self: flex-start;\n  justify-content: space-evenly;\n}\n@media (max-width: 880px) {\n  fieldset .task-icons {\n    gap: 1rem;\n    margin-right: 0;\n  }\n}\n@media (max-width: 620px) {\n  fieldset .task-icons {\n    justify-self: end;\n    width: 100%;\n  }\n}\n\n.task-icons i.fas,\n.task-icons i.far {\n  font-size: 2rem;\n  position: relative;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.flag-icon-group {\n  width: 100%;\n  height: 4rem;\n  top: -4.5rem;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  transition: 0.3s;\n}\n\ni.fa-flag {\n  -webkit-text-stroke: 0.1rem rgb(126, 126, 126);\n}\n\n.flag-icon-group li {\n  margin: 0 1rem;\n}\n\ni.fa-flag.flag-r,\ni.fa-flag.flag-o,\ni.fa-flag.flag-y,\ni.fa-flag.flag-w {\n  z-index: -1;\n  visibility: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  transition: 0.3s;\n  border: none;\n}\n\ni.fa-flag.flag-r {\n  color: red;\n  transform: translate(60px, 45px);\n}\n\ni.fa-flag.flag-o {\n  color: orange;\n  transform: translate(20px, 45px);\n}\n\ni.fa-flag.flag-y {\n  color: yellow;\n  transform: translate(-20px, 45px);\n}\n\ni.fa-flag.flag-w {\n  color: white;\n  transform: translate(-60px, 45px);\n}\n\ni.fa-flag .icon-selector-visibility {\n  z-index: 10;\n  transition: 0.3s;\n  -webkit-user-select: auto;\n     -moz-user-select: auto;\n      -ms-user-select: auto;\n          user-select: auto;\n  visibility: visible;\n  transform: translate(0, 0);\n}\n\nfieldset .task-buttons {\n  gap: 1rem;\n  justify-self: flex-end;\n  display: flex;\n}\n\n.cancel,\n.add {\n  padding: 0.5rem;\n  min-width: 8rem;\n  height: 3.5rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid black;\n}\n\n.cancel {\n  background-color: white;\n}\n\n.add {\n  color: white;\n  background-color: rgb(157, 157, 252);\n}\n\n/*==========\n  Calendar\n============*/\n.calendar {\n  width: 100%;\n  margin: 0 auto;\n  height: 20rem;\n  border-radius: 0.5rem;\n  background-color: white;\n  outline: 0.1rem solid blue;\n  border: 0.1rem solid lightgrey;\n}\n@media (max-width: 1080px) {\n  .calendar {\n    height: 16.1rem;\n  }\n}\n\n.month h3 {\n  margin: 1rem 0 1rem;\n}\n\n.day {\n  margin: 0.4rem;\n  height: 2.125rem;\n  outline: 0.1rem solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n@media (max-width: 1080px) {\n  .day {\n    margin: 0;\n    height: 2.125rem;\n  }\n}\n\n.day p {\n  position: absolute;\n  font-size: 1.2rem;\n}\n\n.calendar button i {\n  width: 96%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\nfooter, footer ul {\n  width: 100%;\n  display: flex;\n  color: white;\n  font-weight: bold;\n  align-items: center;\n  justify-content: space-around;\n}\n\ni.fa-chevron-circle-left {\n  left: 1rem;\n}\n\ni.fa-chevron-circle-right {\n  right: 1rem;\n}\n\ni.fa-chevron-circle-left,\ni.fa-chevron-circle-right {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  background-color: transparent;\n  top: 1.25rem;\n}/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"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",sourceRoot:""}]);const o=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",A=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),A&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),A&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,A,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(A)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);A&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),r="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,A=0;A<t.length;A++)if(t[A].identifier===e){n=A;break}return n}function A(e,A){for(var r={},i=[],o=0;o<e.length;o++){var s=e[o],d=A.base?s[0]+A.base:s[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=n(l),C={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(C);else{var m=a(C,A);A.byIndex=o,t.splice(o,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=A(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=n(r[i]);t[o].references--}for(var s=A(e,a),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=s}}},569:e=>{var t={};e.exports=function(e,n){var A=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var A="";n.supports&&(A+="@supports (".concat(n.supports,") {")),n.media&&(A+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(A+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),A+=n.css,a&&(A+="}"),n.media&&(A+="}"),n.supports&&(A+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(A+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(A,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},325:(e,t,n)=>{var A=n(379),a=n.n(A),r=n(795),i=n.n(r),o=n(569),s=n.n(o),d=n(565),c=n.n(d),l=n(216),u=n.n(l),C=n(589),m=n.n(C),f=n(426),h={};h.styleTagTransform=m(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),a()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;var g,p=new Uint8Array(16);function E(){if(!g&&!(g="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return g(p)}const w=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,b=function(e){return"string"==typeof e&&w.test(e)};for(var v=[],y=0;y<256;++y)v.push((y+256).toString(16).substr(1));const B=function(e,t,n){var A=(e=e||{}).random||(e.rng||E)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=A[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(v[e[t+0]]+v[e[t+1]]+v[e[t+2]]+v[e[t+3]]+"-"+v[e[t+4]]+v[e[t+5]]+"-"+v[e[t+6]]+v[e[t+7]]+"-"+v[e[t+8]]+v[e[t+9]]+"-"+v[e[t+10]]+v[e[t+11]]+v[e[t+12]]+v[e[t+13]]+v[e[t+14]]+v[e[t+15]]).toLowerCase();if(!b(n))throw TypeError("Stringified UUID is invalid");return n}(A)},k=(e="New task",t="User",n="unset",A="unset",a="unset",r="unset",i="unset",o="unset",s="unset")=>{if(void 0!==e)return{name:e,project:t,dueDate:n,creationDate:A,labelTag:a,time:r,priorityFlag:o,comment:s,id:B()}},x=(e="default")=>({name:e,tasks:[],id:B(),index:{value:0,last:0}});function D(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function F(e){D(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function T(e){D(1,arguments);var t=F(e),n=t.getMonth();return n}function j(e){return D(1,arguments),F(e).getFullYear()}function L(e){return D(1,arguments),F(e).getTime()>Date.now()}function M(e){return D(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function U(e){if(D(1,arguments),!M(e)&&"number"!=typeof e)return!1;var t=F(e);return!isNaN(Number(t))}var S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function N(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,A=e.formats[n]||e.formats[e.defaultWidth];return A}}const W={date:N({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:N({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:N({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(e){return function(t,n){var A,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):r;A=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;A=e.values[s]||e.values[o]}return A[e.argumentCallback?e.argumentCallback(t):t]}}const P={ordinalNumber:function(e,t){var n=Number(e),A=n%100;if(A>20||A<10)switch(A%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},A=n.width,a=A&&e.matchPatterns[A]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var i,o=r[0],s=A&&e.parsePatterns[A]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?O(s,(function(e){return e.test(o)})):z(s,(function(e){return e.test(o)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=t.slice(o.length);return{value:i,rest:c}}}function z(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function O(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var R,H={ordinalNumber:(R={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(R.matchPattern);if(!n)return null;var A=n[0],a=e.match(R.parsePattern);if(!a)return null;var r=R.valueCallback?R.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var i=e.slice(A.length);return{value:r,rest:i}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const G={code:"en-US",formatDistance:function(e,t,n){var A,a=S[e];return A="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+A:A+" ago":A},formatLong:W,formatRelative:function(e,t,n,A){return q[e]},localize:P,match:H,options:{weekStartsOn:0,firstWeekContainsDate:1}};function J(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function _(e,t){D(2,arguments);var n=F(e).getTime(),A=J(t);return new Date(n+A)}function Q(e,t){D(2,arguments);var n=J(t);return _(e,-n)}var X=864e5;function V(e){D(1,arguments);var t=1,n=F(e),A=n.getUTCDay(),a=(A<t?7:0)+A-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function K(e){D(1,arguments);var t=F(e),n=t.getUTCFullYear(),A=new Date(0);A.setUTCFullYear(n+1,0,4),A.setUTCHours(0,0,0,0);var a=V(A),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var i=V(r);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function Z(e){D(1,arguments);var t=K(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var A=V(n);return A}var $=6048e5;function ee(e,t){D(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.weekStartsOn,r=null==a?0:J(a),i=null==n.weekStartsOn?r:J(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var o=F(e),s=o.getUTCDay(),d=(s<i?7:0)+s-i;return o.setUTCDate(o.getUTCDate()-d),o.setUTCHours(0,0,0,0),o}function te(e,t){D(1,arguments);var n=F(e),A=n.getUTCFullYear(),a=t||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:J(i),s=null==a.firstWeekContainsDate?o:J(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(A+1,0,s),d.setUTCHours(0,0,0,0);var c=ee(d,t),l=new Date(0);l.setUTCFullYear(A,0,s),l.setUTCHours(0,0,0,0);var u=ee(l,t);return n.getTime()>=c.getTime()?A+1:n.getTime()>=u.getTime()?A:A-1}function ne(e,t){D(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.firstWeekContainsDate,r=null==a?1:J(a),i=null==n.firstWeekContainsDate?r:J(n.firstWeekContainsDate),o=te(e,t),s=new Date(0);s.setUTCFullYear(o,0,i),s.setUTCHours(0,0,0,0);var d=ee(s,t);return d}var Ae=6048e5;function ae(e,t){for(var n=e<0?"-":"",A=Math.abs(e).toString();A.length<t;)A="0"+A;return n+A}var re={y:function(e,t){var n=e.getUTCFullYear(),A=n>0?n:1-n;return ae("yy"===t?A%100:A,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):ae(n+1,2)},d:function(e,t){return ae(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return ae(e.getUTCHours()%12||12,t.length)},H:function(e,t){return ae(e.getUTCHours(),t.length)},m:function(e,t){return ae(e.getUTCMinutes(),t.length)},s:function(e,t){return ae(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,A=e.getUTCMilliseconds();return ae(Math.floor(A*Math.pow(10,n-3)),t.length)}};const ie=re;var oe={G:function(e,t,n){var A=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(A,{width:"abbreviated"});case"GGGGG":return n.era(A,{width:"narrow"});default:return n.era(A,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var A=e.getUTCFullYear(),a=A>0?A:1-A;return n.ordinalNumber(a,{unit:"year"})}return ie.y(e,t)},Y:function(e,t,n,A){var a=te(e,A),r=a>0?a:1-a;return"YY"===t?ae(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):ae(r,t.length)},R:function(e,t){return ae(K(e),t.length)},u:function(e,t){return ae(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(A);case"QQ":return ae(A,2);case"Qo":return n.ordinalNumber(A,{unit:"quarter"});case"QQQ":return n.quarter(A,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(A,{width:"narrow",context:"formatting"});default:return n.quarter(A,{width:"wide",context:"formatting"})}},q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(A);case"qq":return ae(A,2);case"qo":return n.ordinalNumber(A,{unit:"quarter"});case"qqq":return n.quarter(A,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(A,{width:"narrow",context:"standalone"});default:return n.quarter(A,{width:"wide",context:"standalone"})}},M:function(e,t,n){var A=e.getUTCMonth();switch(t){case"M":case"MM":return ie.M(e,t);case"Mo":return n.ordinalNumber(A+1,{unit:"month"});case"MMM":return n.month(A,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(A,{width:"narrow",context:"formatting"});default:return n.month(A,{width:"wide",context:"formatting"})}},L:function(e,t,n){var A=e.getUTCMonth();switch(t){case"L":return String(A+1);case"LL":return ae(A+1,2);case"Lo":return n.ordinalNumber(A+1,{unit:"month"});case"LLL":return n.month(A,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(A,{width:"narrow",context:"standalone"});default:return n.month(A,{width:"wide",context:"standalone"})}},w:function(e,t,n,A){var a=function(e,t){D(1,arguments);var n=F(e),A=ee(n,t).getTime()-ne(n,t).getTime();return Math.round(A/Ae)+1}(e,A);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):ae(a,t.length)},I:function(e,t,n){var A=function(e){D(1,arguments);var t=F(e),n=V(t).getTime()-Z(t).getTime();return Math.round(n/$)+1}(e);return"Io"===t?n.ordinalNumber(A,{unit:"week"}):ae(A,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ie.d(e,t)},D:function(e,t,n){var A=function(e){D(1,arguments);var t=F(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var A=t.getTime(),a=n-A;return Math.floor(a/X)+1}(e);return"Do"===t?n.ordinalNumber(A,{unit:"dayOfYear"}):ae(A,t.length)},E:function(e,t,n){var A=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(A,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(A,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},e:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return ae(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return ae(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var A=e.getUTCDay(),a=0===A?7:A;switch(t){case"i":return String(a);case"ii":return ae(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(A,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(A,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},a:function(e,t,n){var A=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},b:function(e,t,n){var A,a=e.getUTCHours();switch(A=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},B:function(e,t,n){var A,a=e.getUTCHours();switch(A=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var A=e.getUTCHours()%12;return 0===A&&(A=12),n.ordinalNumber(A,{unit:"hour"})}return ie.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ie.H(e,t)},K:function(e,t,n){var A=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(A,{unit:"hour"}):ae(A,t.length)},k:function(e,t,n){var A=e.getUTCHours();return 0===A&&(A=24),"ko"===t?n.ordinalNumber(A,{unit:"hour"}):ae(A,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ie.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ie.s(e,t)},S:function(e,t){return ie.S(e,t)},X:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return de(a);case"XXXX":case"XX":return ce(a);default:return ce(a,":")}},x:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"x":return de(a);case"xxxx":case"xx":return ce(a);default:return ce(a,":")}},O:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+se(a,":");default:return"GMT"+ce(a,":")}},z:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+se(a,":");default:return"GMT"+ce(a,":")}},t:function(e,t,n,A){var a=A._originalDate||e;return ae(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,A){return ae((A._originalDate||e).getTime(),t.length)}};function se(e,t){var n=e>0?"-":"+",A=Math.abs(e),a=Math.floor(A/60),r=A%60;if(0===r)return n+String(a);var i=t||"";return n+String(a)+i+ae(r,2)}function de(e,t){return e%60==0?(e>0?"-":"+")+ae(Math.abs(e)/60,2):ce(e,t)}function ce(e,t){var n=t||"",A=e>0?"-":"+",a=Math.abs(e);return A+ae(Math.floor(a/60),2)+n+ae(a%60,2)}const le=oe;function ue(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function Ce(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const me={p:Ce,P:function(e,t){var n,A=e.match(/(P+)(p+)?/)||[],a=A[1],r=A[2];if(!r)return ue(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",ue(a,t)).replace("{{time}}",Ce(r,t))}};function fe(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var he=["D","DD"],ge=["YY","YYYY"];function pe(e){return-1!==he.indexOf(e)}function Ee(e){return-1!==ge.indexOf(e)}function we(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var be=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ve=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ye=/^'([^]*?)'?$/,Be=/''/g,ke=/[a-zA-Z]/;function xe(e){return e.match(ye)[1].replace(Be,"'")}function De(e){D(1,arguments);var t=F(e),n=t.getFullYear();return n%400==0||n%4==0&&n%100!=0}function Fe(e,t){switch(e){case 0:return document.createElement(t);case 1:return document.querySelector(t);case 2:return document.querySelectorAll(t)}}function Te(e,t,n){e.style[t]=n}function je(e,t){for(let n=1;n<=e;n++){let e=Fe(0,"div");e.classList.add("day");let A=Fe(0,"p");A.textContent=n,e.appendChild(A),t.appendChild(e)}}const Le=function(e,t){switch(e){case"create":return document.createElement(t);case"selectOne":return document.querySelector(t);case"selectAll":return document.querySelectorAll(t)}},Me=(()=>{const e=[],t=e=>{const t=e.tasks;0!==t.length&&t.splice(0,t.length-1)},n={notifications:document.querySelector(".user-notify"),aside:document.querySelector(".app-aside-projects"),dashboard:document.querySelector(".dashboard-tasks")},A={observers:{config:{attributes:!0,childList:!0,subtree:!0}},projects:e,sort:t=>{if(0!==e.length)return e.filter(((e,t)=>{for(const t of e)t.dueDate===Date.now()&&console.log("match")}))}};return A.observers.dashboard=new MutationObserver(((t,A)=>{(function(e){for(const t of e)for(const e of n.aside.children)if(t.id===e.id){if(0===t.tasks.length)return e.children[1].textContent="";e.children[1].textContent=t.tasks.length}})(e),function(e){for(const t of e)if(0!==t.tasks.length)return n.notifications.classList.add("notify");n.notifications.classList.remove("notify")}(e)})),A.observers.dashboard.observe(n.dashboard,A.observers.config),{projects:e,_notifyProject:(t,n)=>{for(const A of e)A.tasks.forEach(((e,a)=>{switch(n){case"add":e.id===t.id&&A.tasks.push(e);break;case"remove":e.id===t.id&&A.tasks.splice(a,1)}}))},_getTaskProject:(e,t)=>{for(let n of t)if(e===n.name)return n;return x(e)},_addTaskToProject:(e,t)=>{t.tasks.push(e),e.projectID=t.id},_removeProjectFromList:(e,n)=>{0!==n.length&&n.forEach(((A,a)=>{e.id===A.id&&(t(A),n.splice(a))}))},_removeAllTasksFromProject:t,_addProjectToProjectsIndex:(e,t)=>{!1===((e,t)=>{let n=!1;return t.forEach((t=>{if(e.id===t.id)return console.log(e.id,t.id),void(n=!0)})),n})(e,t)&&t.push(e)}}})();let Ue="create",Se="selectOne";const Ne=Le(Se,".dashboard-tasks");document.querySelectorAll(".pointer").forEach((e=>{e.addEventListener("click",He)}));const We=document.querySelector("dialog"),qe=document.querySelector(".input-day").children[0],Ye=document.querySelector(".input-month").children[0],Pe=document.querySelector(".input-year").children[0];qe.textContent="day",Ye.textContent="month",Pe.textContent="year";let Ie="";const ze=function(){const e=Fe(0,"div");e.classList.add("calendar"),Te(e,"display","grid"),Te(e,"align-items","center");const t=[];for(let n=1;n<=12;n++){let A,a=Fe(0,"div");a.classList.add("calendar-month");let r=Fe(0,"h3"),i=Fe(0,"div");switch(i.classList.add("calendar-days"),n){case 1:A="January",je(31,i);break;case 2:A="February",De(Date.now())?je(29,i):je(28,i);break;case 3:A="March",je(31,i);break;case 4:A="April",je(30,i);break;case 5:A="May",je(31,i);break;case 6:A="June",je(30,i);break;case 7:A="July",je(31,i);break;case 8:A="August",je(31,i);break;case 9:A="September",je(30,i);break;case 10:A="October",je(31,i);break;case 11:A="November",je(30,i);break;case 12:A="December",je(31,i)}r.textContent=A,a.appendChild(r),a.appendChild(i),a.id=n,a.classList.add(A),a.classList.add("month"),e.appendChild(a),Number(a.id)!==T(Date.now())+1&&Te(a,"visibility","hidden"),Te(a,"width","90%"),Te(a,"height","100%"),Te(i,"display","grid"),Te(a,"textAlign","center"),Te(a,"position","absolute"),Te(a,"backgroundColor","white"),Te(a,"justify-self","center"),Te(i,"grid-template-columns","repeat(7, 1fr)"),t.push(a)}Te(e,"position","relative");const n=Fe(0,"button");n.type="button",n.classList.add("close-calendar-btn"),n.textContent="close",e.appendChild(n);const A=Fe(0,"i");A.classList.add("fas"),A.classList.add("fa-chevron-circle-left");const a=Fe(0,"i");return a.classList.add("fas"),a.classList.add("fa-chevron-circle-right"),e.appendChild(A),e.appendChild(a),Te(A,"position","absolute"),Te(a,"position","absolute"),Te(A,"fontSize","2rem"),Te(a,"fontSize","2rem"),Te(A,"margin-left","0.65rem"),Te(a,"margin-right","0.65rem"),{container:e,navLeft:A,navRight:a,closeCal:n}}();document.querySelector(".input-calendar").appendChild(ze.container),ze.navLeft.dataset.index=T(Date.now())+1,ze.navLeft.addEventListener("click",(()=>{ze.navLeft.dataset.index=Number(ze.navLeft.dataset.index),ze.navRight.dataset.index=Number(ze.navRight.dataset.index),ze.navLeft.dataset.index--,ze.navRight.dataset.index--,Number(ze.navLeft.dataset.index)<=0&&(ze.navLeft.dataset.index=12,ze.navRight.dataset.index=12);for(let e of ze.container.children)console.dir(e),"DIV"===e.tagName&&(Number(ze.navLeft.dataset.index)===Number(e.id)?(e.style.visibility="visible",Ie=e):e.style.visibility="hidden")})),ze.navRight.dataset.index=T(Date.now())+1,ze.navRight.addEventListener("click",(()=>{ze.navRight.dataset.index=Number(ze.navRight.dataset.index),ze.navLeft.dataset.index=Number(ze.navLeft.dataset.index),ze.navRight.dataset.index++,ze.navLeft.dataset.index++,Number(ze.navRight.dataset.index)>=13&&(ze.navRight.dataset.index=1,ze.navLeft.dataset.index=1);for(let e of ze.container.children)console.dir(e),"DIV"===e.tagName&&(Number(ze.navRight.dataset.index)===Number(e.id)?(e.style.visibility="visible",Ie=e):e.style.visibility="hidden")})),ze.container.childNodes.forEach((e=>{"DIV"===e.tagName&&e.children[1].childNodes.forEach((t=>t.addEventListener("click",(t=>{!function(e,t){qe.textContent=e.target.textContent,Ye.textContent=t.id,"year"===Pe.textContent&&(Pe.textContent=j(Date.now()))}(t,e)}))))})),Le(Se,".close-calendar-btn").addEventListener("click",(()=>{""!==Ie&&(Ie.style.visibility="hidden"),$e.focus(),ze.container.style.visibility="hidden"}));const Oe=document.querySelector(".year-nav-up"),Re=document.querySelector(".year-nav-down");function He(e){We.showModal();const t=k(),n=document.querySelector("form"),A=n.elements,a=document.querySelectorAll(".priority-flag"),r=document.querySelector(".cancel");function i(e){e.preventDefault(),t.name=A.task.value,t.project=A.project.value,""===t.project&&(t.project="User");const d=Me._getTaskProject(t.project,Me.projects);Me._addTaskToProject(t,d),t.creationDate=Date.now();const c=[Number(qe.textContent),Number(Ze.textContent),Number(Pe.textContent)];c.forEach((e=>{isNaN(e)?t.dueDate="":t.dueDate=new Date(c[2],c[1],c[0])})),console.table(t.dueDate,t.creationDate);const l=L(t.dueDate),u=L(t.creationDate);console.log(l,u),t.time=A.time.value,t.comment=A.comment.value;let C=Me.projects.length;Me._addProjectToProjectsIndex(d,Me.projects),C!==Me.projects.length&&function(e){const t=Le(Ue,"li");t.id=e.id,t.classList.add("project");const n=Le(Ue,"div");n.classList.add("project-info");const A=Le(Ue,"i");A.classList.add("fas"),A.classList.add("fa-circle"),A.classList.add("project-icon"),n.appendChild(A);const a=Le(Ue,"p");a.classList.add("project-name"),a.textContent=e.name,n.appendChild(a),t.appendChild(n);const r=Le(Ue,"p");r.classList.add("project-task-count"),r.textContent=e.tasks.length,t.appendChild(r),it.appendChild(t)}(d);const m=function(e){const t=Le(Ue,"li");t.id=e.id,t.dataset.project=e.projectID,t.classList.add("task-card");const n=Le(Ue,"i");n.classList.add("fas"),n.classList.add("fa-flag"),n.classList.add("task-priority"),n.style.color=e.priorityFlag,t.appendChild(n);const A=Le(Ue,"div");A.classList.add("task-info");const a=Le(Ue,"h4");a.classList.add("task-heading"),a.textContent=e.name,A.appendChild(a);const r=Le(Ue,"ul");r.classList.add("task-details"),A.appendChild(r);const i=Le(Ue,"li");i.classList.add("task-time");const o=Le(Ue,"i");o.classList.add("far"),o.classList.add("fa-clock"),o.classList.add("task-time-icon"),i.appendChild(o);const s=Le(Ue,"p");s.classList.add("task-time-text"),s.textContent=`${e.time} PM`,i.appendChild(s),r.appendChild(i);const d=Le(Ue,"li");d.classList.add("task-date");const c=Le(Ue,"i");c.classList.add("fas"),c.classList.add("fa-tag"),c.classList.add("task-date-icon"),d.appendChild(c);const l=Le(Ue,"p");l.classList.add("task-date-text"),""!==e.dueDate?l.textContent=function(e,t,n){D(2,arguments);var A=String(t),a=n||{},r=a.locale||G,i=r.options&&r.options.firstWeekContainsDate,o=null==i?1:J(i),s=null==a.firstWeekContainsDate?o:J(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=r.options&&r.options.weekStartsOn,c=null==d?0:J(d),l=null==a.weekStartsOn?c:J(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var u=F(e);if(!U(u))throw new RangeError("Invalid time value");var C=fe(u),m=Q(u,C),f={firstWeekContainsDate:s,weekStartsOn:l,locale:r,_originalDate:u};return A.match(ve).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,me[t])(e,r.formatLong,f):e})).join("").match(be).map((function(n){if("''"===n)return"'";var A=n[0];if("'"===A)return xe(n);var i=le[A];if(i)return!a.useAdditionalWeekYearTokens&&Ee(n)&&we(n,t,e),!a.useAdditionalDayOfYearTokens&&pe(n)&&we(n,t,e),i(m,n,r.localize,f);if(A.match(ke))throw new RangeError("Format string contains an unescaped latin alphabet character `"+A+"`");return n})).join("")}(e.dueDate,"dd/MM/yyyy"):l.textContent="",d.appendChild(l),r.appendChild(d);const u=Le(Ue,"li");u.classList.add("task-project"),u.style.width="45%";const C=Le(Ue,"p");C.classList.add("task-project-text"),C.textContent=e.project,u.appendChild(C);const m=Le(Ue,"i");m.classList.add("fas"),m.classList.add("fa-circle"),m.classList.add("task-project-icon"),u.appendChild(m),r.appendChild(u);const f=Le(Ue,"li");f.classList.add("task-remove");const h=Le(Ue,"i");return h.classList.add("far"),h.classList.add("fa-trash-alt"),m.classList.add("task-remove-icon"),f.appendChild(h),r.appendChild(f),console.log(`Task ID: ${t.id}`),h.addEventListener("click",(()=>{t.classList.add("remove-task"),setTimeout((()=>{Me._notifyProject(e,"remove"),t.remove()}),1200)})),t.appendChild(A),t}(t);Ne.appendChild(m),We.close(),n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}function o(e){t.priorityFlag=getComputedStyle(e.target).color,e.target.parentNode.parentNode.parentNode.style.color=t.priorityFlag;for(let t of e.target.parentNode.parentNode.children)t.children[0].classList.toggle("icon-selector-visibility")}function s(e){e.preventDefault(),We.close();for(let e in t)delete t[e];n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}n.addEventListener("submit",i),a.forEach((e=>{e.addEventListener("click",o)})),r.addEventListener("click",s)}Oe.addEventListener("click",(e=>{if("year"===Pe.textContent)return Pe.textContent=j(Date.now());let t=Number(Pe.textContent);t++,Pe.textContent=t,"day"===qe.textContent&&(qe.textContent=function(e){return D(1,arguments),F(e).getDay()}(Date.now())),"month"===Ye.textContent&&(qe.textContent=T(Date.now))})),Re.addEventListener("click",(e=>{if("year"===Pe.textContent)return Pe.textContent=j(Date.now());let t=Number(Pe.textContent);t--,Pe.textContent=t}));const Ge=document.querySelectorAll(".js-task-icon"),Je=Le(Se,".input-task");Je.blur();const _e=Le(Se,".input-project"),Qe=Le(Se,".input-dropdown-icon"),Xe=Le(Se,".dropdown-set-project"),Ve={task:{input:Je},project:{group:Xe,input:_e,icon:Qe,menu:[],count:0}},Ke=Le(Se,".input-day"),Ze=Le(Se,".input-month"),$e=Le(Se,".input-year"),et=[Ke,Ze,$e,ze.container],tt=Le(Se,".input-time"),nt=Le(Se,".input-comment"),At=[Je,_e,Qe,Ke,Ze,$e,ze.container,Ie,tt,nt];Qe.addEventListener("click",(()=>{if(0===Ve.project.menu.length){const e=Le(Ue,"ul");if(e.classList.add("project-select-menu"),e.style.width="100%",e.style.height="auto",e.style.position="relative",e.style.visibility="visible",0===Me.projects.length){const t=Le(Ue,"li");t.classList.add("project-selector"),t.textContent="Empty",t.style.position="relative",t.style.cursor="pointer",e.appendChild(t)}else for(const t of Me.projects){const n=Le(Ue,"li");n.classList.add("project-selector"),n.style.cursor="pointer",n.textContent=t.name,n.addEventListener("click",(e=>{_e.value=n.textContent})),e.appendChild(n)}Ve.project.menu.push(e),Ve.project.group.appendChild(e)}else Ve.project.menu[0].remove(),Ve.project.menu=[]})),Ge.forEach((e=>{e.addEventListener("click",(e=>{for(const t of e.target.parentNode.parentNode.children)void 0!==t.childNodes[1]&&t.childNodes[1].classList.remove("modal-icon-select");switch(At.forEach((e=>{""!==e&&(e.style.visibility="hidden")})),e.target.classList.add("modal-icon-select"),e.target.classList[2]){case"pen":Je.style.visibility="visible",Je.focus();break;case"prj":_e.style.visibility="visible",Qe.style.visibility="visible",_e.focus();break;case"tag":""!==Ie&&(Ie.style.visibility="visible",Ie="");for(const e of et)e.style.visibility="visible";break;case"clk":tt.style.visibility="visible",tt.focus();break;case"flg":e.target.children[0].childNodes.forEach((e=>{"LI"===e.tagName&&e.childNodes[0].classList.toggle("icon-selector-visibility")}));break;case"cmt":nt.style.visibility="visible",nt.focus()}}))}));const at=document.querySelector(".app-aside-calendar");for(let e of at.children)e.addEventListener("click",(e=>{for(let e of at.children)e.classList.remove("js-aside-highlight");e.target.classList.add("js-aside-highlight"),rt(e)}));function rt(e){switch(e.target.textContent.trim()){case"Tasks":console.log("tasks-tab");break;case"Today":console.log("today-tab"),Me.con;break;case"Upcoming":console.log("upcoming-tab")}}document.querySelector(".js-projects-dropdown").addEventListener("click",(e=>{e.target.parentNode.parentNode.classList.toggle("dropdown-menu"),e.target.parentNode.children[1].classList.toggle("dropdown-state")}));const it=document.querySelector(".app-aside-projects")}},e=>{e(e.s=325)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJtYXBwaW5ncyI6IjhKQUdJQSxFLE1BQTBCLEdBQTRCLEtBQzFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLCtFQUV6Q0gsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxza1pBQXlrWixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2QkFBNkIsNkJBQTZCLE1BQVEsR0FBRyxTQUFXLHNuTEFBc25MLFdBQWEsTUFFaDJrQixXLFFDRkFELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQTZGWCxPQTNGQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxPQUErQixJQUFaRixFQUFLLEdBNEI1QixPQTFCSUEsRUFBSyxLQUNQQyxHQUFXLGNBQWNFLE9BQU9ILEVBQUssR0FBSSxRQUd2Q0EsRUFBSyxLQUNQQyxHQUFXLFVBQVVFLE9BQU9ILEVBQUssR0FBSSxPQUduQ0UsSUFDRkQsR0FBVyxTQUFTRSxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxPQUc1RUMsR0FBV04sRUFBdUJLLEdBRTlCRSxJQUNGRCxHQUFXLEtBR1RELEVBQUssS0FDUEMsR0FBVyxLQUdURCxFQUFLLEtBQ1BDLEdBQVcsS0FHTkEsS0FDTkksS0FBSyxLQUlWVCxFQUFLVSxFQUFJLFNBQVdDLEVBQVNDLEVBQU9DLEVBQVFDLEVBQVVDLEdBQzdCLGlCQUFaSixJQUNUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxPQUFTSyxLQUc3QixJQUFJQyxFQUF5QixHQUU3QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJaEIsS0FBS00sT0FBUVUsSUFBSyxDQUNwQyxJQUFJckIsRUFBS0ssS0FBS2dCLEdBQUcsR0FFUCxNQUFOckIsSUFDRm9CLEVBQXVCcEIsSUFBTSxHQUtuQyxJQUFLLElBQUlzQixFQUFLLEVBQUdBLEVBQUtSLEVBQVFILE9BQVFXLElBQU0sQ0FDMUMsSUFBSWYsRUFBTyxHQUFHRyxPQUFPSSxFQUFRUSxJQUV6Qk4sR0FBVUksRUFBdUJiLEVBQUssV0FJckIsSUFBVlcsU0FDYyxJQUFaWCxFQUFLLEtBR2RBLEVBQUssR0FBSyxTQUFTRyxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksTUFGL0ZBLEVBQUssR0FBS1csR0FPVkgsSUFDR1IsRUFBSyxJQUdSQSxFQUFLLEdBQUssVUFBVUcsT0FBT0gsRUFBSyxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxLQUMxREEsRUFBSyxHQUFLUSxHQUhWUixFQUFLLEdBQUtRLEdBT1ZFLElBQ0dWLEVBQUssSUFHUkEsRUFBSyxHQUFLLGNBQWNHLE9BQU9ILEVBQUssR0FBSSxPQUFPRyxPQUFPSCxFQUFLLEdBQUksS0FDL0RBLEVBQUssR0FBS1UsR0FIVlYsRUFBSyxHQUFLLEdBQUdHLE9BQU9PLElBT3hCZCxFQUFLTCxLQUFLUyxNQUlQSixJLFFDbEdUSixFQUFPRSxRQUFVLFNBQVVNLEdBQ3pCLElBQUlDLEVBQVVELEVBQUssR0FDZmdCLEVBQWFoQixFQUFLLEdBRXRCLElBQUtnQixFQUNILE9BQU9mLEVBR1QsR0FBb0IsbUJBQVRnQixLQUFxQixDQUM5QixJQUFJQyxFQUFTRCxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVOLE1BQ3pETyxFQUFPLCtEQUErRHBCLE9BQU9lLEdBQzdFTSxFQUFnQixPQUFPckIsT0FBT29CLEVBQU0sT0FDcENFLEVBQWFULEVBQVdVLFFBQVEzQixLQUFJLFNBQVU0QixHQUNoRCxNQUFPLGlCQUFpQnhCLE9BQU9hLEVBQVdZLFlBQWMsSUFBSXpCLE9BQU93QixFQUFRLFVBRTdFLE1BQU8sQ0FBQzFCLEdBQVNFLE9BQU9zQixHQUFZdEIsT0FBTyxDQUFDcUIsSUFBZ0JuQixLQUFLLE1BR25FLE1BQU8sQ0FBQ0osR0FBU0ksS0FBSyxRLFFDbEJ4QixJQUFJd0IsRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJQyxHQUFVLEVBRUwxQixFQUFJLEVBQUdBLEVBQUl1QixFQUFZekIsT0FBUUUsSUFDdEMsR0FBSXVCLEVBQVl2QixHQUFHeUIsYUFBZUEsRUFBWSxDQUM1Q0MsRUFBUzFCLEVBQ1QsTUFJSixPQUFPMEIsRUFHVCxTQUFTQyxFQUFhckMsRUFBTXNDLEdBSTFCLElBSEEsSUFBSUMsRUFBYSxHQUNiQyxFQUFjLEdBRVQ5QixFQUFJLEVBQUdBLEVBQUlWLEVBQUtRLE9BQVFFLElBQUssQ0FDcEMsSUFBSU4sRUFBT0osRUFBS1UsR0FDWmIsRUFBS3lDLEVBQVFHLEtBQU9yQyxFQUFLLEdBQUtrQyxFQUFRRyxLQUFPckMsRUFBSyxHQUNsRHNDLEVBQVFILEVBQVcxQyxJQUFPLEVBQzFCc0MsRUFBYSxHQUFHNUIsT0FBT1YsRUFBSSxLQUFLVSxPQUFPbUMsR0FDM0NILEVBQVcxQyxHQUFNNkMsRUFBUSxFQUN6QixJQUFJQyxFQUFvQlQsRUFBcUJDLEdBQ3pDUyxFQUFNLENBQ1JDLElBQUt6QyxFQUFLLEdBQ1ZRLE1BQU9SLEVBQUssR0FDWjBDLFVBQVcxQyxFQUFLLEdBQ2hCVSxTQUFVVixFQUFLLEdBQ2ZXLE1BQU9YLEVBQUssSUFHZCxJQUEyQixJQUF2QnVDLEVBQ0ZWLEVBQVlVLEdBQW1CSSxhQUMvQmQsRUFBWVUsR0FBbUJLLFFBQVFKLE9BQ2xDLENBQ0wsSUFBSUksRUFBVUMsRUFBZ0JMLEVBQUtOLEdBQ25DQSxFQUFRWSxRQUFVeEMsRUFDbEJ1QixFQUFZa0IsT0FBT3pDLEVBQUcsRUFBRyxDQUN2QnlCLFdBQVlBLEVBQ1phLFFBQVNBLEVBQ1RELFdBQVksSUFJaEJQLEVBQVk3QyxLQUFLd0MsR0FHbkIsT0FBT0ssRUFHVCxTQUFTUyxFQUFnQkwsRUFBS04sR0FDNUIsSUFBSWMsRUFBTWQsRUFBUWUsT0FBT2YsR0FlekIsT0FkQWMsRUFBSUUsT0FBT1YsR0FFRyxTQUFpQlcsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9WLE1BQVFELEVBQUlDLEtBQU9VLEVBQU8zQyxRQUFVZ0MsRUFBSWhDLE9BQVMyQyxFQUFPVCxZQUFjRixFQUFJRSxXQUFhUyxFQUFPekMsV0FBYThCLEVBQUk5QixVQUFZeUMsRUFBT3hDLFFBQVU2QixFQUFJN0IsTUFDekosT0FHRnFDLEVBQUlFLE9BQU9WLEVBQU1XLFFBRWpCSCxFQUFJSSxVQU9WNUQsRUFBT0UsUUFBVSxTQUFVRSxFQUFNc0MsR0FHL0IsSUFBSW1CLEVBQWtCcEIsRUFEdEJyQyxFQUFPQSxHQUFRLEdBRGZzQyxFQUFVQSxHQUFXLElBR3JCLE9BQU8sU0FBZ0JvQixHQUNyQkEsRUFBVUEsR0FBVyxHQUVyQixJQUFLLElBQUloRCxFQUFJLEVBQUdBLEVBQUkrQyxFQUFnQmpELE9BQVFFLElBQUssQ0FDL0MsSUFDSWlELEVBQVF6QixFQURLdUIsRUFBZ0IvQyxJQUVqQ3VCLEVBQVkwQixHQUFPWixhQUtyQixJQUZBLElBQUlhLEVBQXFCdkIsRUFBYXFCLEVBQVNwQixHQUV0Q3VCLEVBQUssRUFBR0EsRUFBS0osRUFBZ0JqRCxPQUFRcUQsSUFBTSxDQUNsRCxJQUVJQyxFQUFTNUIsRUFGS3VCLEVBQWdCSSxJQUlLLElBQW5DNUIsRUFBWTZCLEdBQVFmLGFBQ3RCZCxFQUFZNkIsR0FBUWQsVUFFcEJmLEVBQVlrQixPQUFPVyxFQUFRLElBSS9CTCxFQUFrQkcsSyxRQ25HdEIsSUFBSUcsRUFBTyxHQW9DWG5FLEVBQU9FLFFBVlAsU0FBMEJrRSxFQUFRQyxHQUNoQyxJQUFJQyxFQXhCTixTQUFtQkEsR0FDakIsUUFBNEIsSUFBakJILEVBQUtHLEdBQXlCLENBQ3ZDLElBQUlDLEVBQWNDLFNBQVNDLGNBQWNILEdBRXpDLEdBQUlJLE9BQU9DLG1CQUFxQkosYUFBdUJHLE9BQU9DLGtCQUM1RCxJQUdFSixFQUFjQSxFQUFZSyxnQkFBZ0JDLEtBQzFDLE1BQU9DLEdBRVBQLEVBQWMsS0FJbEJKLEVBQUtHLEdBQVVDLEVBR2pCLE9BQU9KLEVBQUtHLEdBTUNTLENBQVVYLEdBRXZCLElBQUtFLEVBQ0gsTUFBTSxJQUFJVSxNQUFNLDJHQUdsQlYsRUFBT1csWUFBWVosSyxRQ3pCckJyRSxFQUFPRSxRQVBQLFNBQTRCd0MsR0FDMUIsSUFBSXdDLEVBQVVWLFNBQVNXLGNBQWMsU0FHckMsT0FGQXpDLEVBQVEwQyxjQUFjRixFQUFTeEMsRUFBUTJDLFlBQ3ZDM0MsRUFBUTBCLE9BQU9jLEVBQVN4QyxFQUFRQSxTQUN6QndDLEksY0NJVGxGLEVBQU9FLFFBUlAsU0FBd0NvRixHQUN0QyxJQUFJQyxFQUFtRCxLQUVuREEsR0FDRkQsRUFBYUUsYUFBYSxRQUFTRCxLLFFDOER2Q3ZGLEVBQU9FLFFBWlAsU0FBZ0J3QyxHQUNkLElBQUk0QyxFQUFlNUMsRUFBUStDLG1CQUFtQi9DLEdBQzlDLE1BQU8sQ0FDTGdCLE9BQVEsU0FBZ0JWLElBekQ1QixTQUFlc0MsRUFBYzVDLEVBQVNNLEdBQ3BDLElBQUlDLEVBQU0sR0FFTkQsRUFBSTlCLFdBQ04rQixHQUFPLGNBQWN0QyxPQUFPcUMsRUFBSTlCLFNBQVUsUUFHeEM4QixFQUFJaEMsUUFDTmlDLEdBQU8sVUFBVXRDLE9BQU9xQyxFQUFJaEMsTUFBTyxPQUdyQyxJQUFJTixPQUFpQyxJQUFkc0MsRUFBSTdCLE1BRXZCVCxJQUNGdUMsR0FBTyxTQUFTdEMsT0FBT3FDLEVBQUk3QixNQUFNUCxPQUFTLEVBQUksSUFBSUQsT0FBT3FDLEVBQUk3QixPQUFTLEdBQUksT0FHNUU4QixHQUFPRCxFQUFJQyxJQUVQdkMsSUFDRnVDLEdBQU8sS0FHTEQsRUFBSWhDLFFBQ05pQyxHQUFPLEtBR0xELEVBQUk5QixXQUNOK0IsR0FBTyxLQUdULElBQUlDLEVBQVlGLEVBQUlFLFVBRWhCQSxHQUE2QixvQkFBVHpCLE9BQ3RCd0IsR0FBTyx1REFBdUR0QyxPQUFPYyxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVvQixNQUFlLFFBTXRJUixFQUFRZ0Qsa0JBQWtCekMsRUFBS3FDLEVBQWM1QyxFQUFRQSxTQWtCakRpRCxDQUFNTCxFQUFjNUMsRUFBU00sSUFFL0JZLE9BQVEsWUFqQlosU0FBNEIwQixHQUUxQixHQUFnQyxPQUE1QkEsRUFBYU0sV0FDZixPQUFPLEVBR1ROLEVBQWFNLFdBQVdDLFlBQVlQLEdBWWhDUSxDQUFtQlIsTyxRQ2pEekJ0RixFQUFPRSxRQVpQLFNBQTJCK0MsRUFBS3FDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUvQyxNQUM3QixDQUNMLEtBQU9xQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFHeENYLEVBQWFMLFlBQVlULFNBQVMwQixlQUFlakQsTyx1SUNBakRQLEVBQVUsR0FFZEEsRUFBUWdELGtCQUFvQixJQUM1QmhELEVBQVEwQyxjQUFnQixJQUVsQjFDLEVBQVEwQixPQUFTLFNBQWMsS0FBTSxRQUUzQzFCLEVBQVFlLE9BQVMsSUFDakJmLEVBQVErQyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTL0MsR0FLSixLQUFXLFlBQWlCLFdDdkJsRCxJQUFJeUQsRUFDQUMsRUFBUSxJQUFJQyxXQUFXLElBQ1osU0FBU0MsSUFFdEIsSUFBS0gsS0FHSEEsRUFBb0Msb0JBQVhJLFFBQTBCQSxPQUFPSixpQkFBbUJJLE9BQU9KLGdCQUFnQkssS0FBS0QsU0FBK0Isb0JBQWJFLFVBQWdFLG1CQUE3QkEsU0FBU04saUJBQWtDTSxTQUFTTixnQkFBZ0JLLEtBQUtDLFdBR3JPLE1BQU0sSUFBSXpCLE1BQU0sNEdBSXBCLE9BQU9tQixFQUFnQkMsR0NqQnpCLDhIQ01BLEVBSkEsU0FBa0JNLEdBQ2hCLE1BQXVCLGlCQUFUQSxHQUFxQixPQUFXQSxJQ0toRCxJQUZBLElBQUlDLEVBQVksR0FFUDdGLEVBQUksRUFBR0EsRUFBSSxNQUFPQSxFQUN6QjZGLEVBQVU1RyxNQUFNZSxFQUFJLEtBQU9ULFNBQVMsSUFBSXVHLE9BQU8sSUFvQmpELE1DTkEsRUFwQkEsU0FBWWxFLEVBQVNtRSxFQUFLQyxHQUV4QixJQUFJQyxHQURKckUsRUFBVUEsR0FBVyxJQUNGc0UsU0FBV3RFLEVBQVE0RCxLQUFPQSxLQUs3QyxHQUhBUyxFQUFLLEdBQWUsR0FBVkEsRUFBSyxHQUFZLEdBQzNCQSxFQUFLLEdBQWUsR0FBVkEsRUFBSyxHQUFZLElBRXZCRixFQUFLLENBQ1BDLEVBQVNBLEdBQVUsRUFFbkIsSUFBSyxJQUFJaEcsRUFBSSxFQUFHQSxFQUFJLEtBQU1BLEVBQ3hCK0YsRUFBSUMsRUFBU2hHLEdBQUtpRyxFQUFLakcsR0FHekIsT0FBTytGLEVBR1QsT0RSRixTQUFtQkksR0FDakIsSUFBSUgsRUFBU0ksVUFBVXRHLE9BQVMsUUFBc0JRLElBQWpCOEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBRzdFUixHQUFRQyxFQUFVTSxFQUFJSCxFQUFTLElBQU1ILEVBQVVNLEVBQUlILEVBQVMsSUFBTUgsRUFBVU0sRUFBSUgsRUFBUyxJQUFNSCxFQUFVTSxFQUFJSCxFQUFTLElBQU0sSUFBTUgsRUFBVU0sRUFBSUgsRUFBUyxJQUFNSCxFQUFVTSxFQUFJSCxFQUFTLElBQU0sSUFBTUgsRUFBVU0sRUFBSUgsRUFBUyxJQUFNSCxFQUFVTSxFQUFJSCxFQUFTLElBQU0sSUFBTUgsRUFBVU0sRUFBSUgsRUFBUyxJQUFNSCxFQUFVTSxFQUFJSCxFQUFTLElBQU0sSUFBTUgsRUFBVU0sRUFBSUgsRUFBUyxLQUFPSCxFQUFVTSxFQUFJSCxFQUFTLEtBQU9ILEVBQVVNLEVBQUlILEVBQVMsS0FBT0gsRUFBVU0sRUFBSUgsRUFBUyxLQUFPSCxFQUFVTSxFQUFJSCxFQUFTLEtBQU9ILEVBQVVNLEVBQUlILEVBQVMsTUFBTUssY0FNemYsSUFBSyxFQUFTVCxHQUNaLE1BQU1VLFVBQVUsK0JBR2xCLE9BQU9WLEVDTkEsQ0FBVUssSUNObkIsRUFWaUIsQ0FBQ00sRUFBTyxXQUFZQyxFQUFVLE9BQVFDLEVBQVUsUUFBU0MsRUFBZSxRQUFTQyxFQUFXLFFBQVNDLEVBQU8sUUFBU0MsRUFBUSxRQUFTQyxFQUFlLFFBQVNDLEVBQVUsV0FDckwsUUFBYXpHLElBQVRpRyxFQUNKLE1BQU8sQ0FBRUEsS0FBQUEsRUFBTUMsUUFBQUEsRUFBU0MsUUFBQUEsRUFBU0MsYUFBQUEsRUFBY0MsU0FBQUEsRUFBVUMsS0FBQUEsRUFBTUUsYUFBQUEsRUFBY0MsUUFBQUEsRUFBUzVILEdBQUksTUNPOUYsRUFUaUIsQ0FBQ29ILEVBQU8sYUFDZCxDQUFFQSxLQUFBQSxFQUFNUyxNQUFPLEdBQUk3SCxHQUFJLElBQVU4RCxNQUFPLENBQUNnRSxNQUFPLEVBQUdDLEtBQU0sS0NMckQsU0FBU0MsRUFBYUMsRUFBVUMsR0FDN0MsR0FBSUEsRUFBS3ZILE9BQVNzSCxFQUNoQixNQUFNLElBQUlkLFVBQVVjLEVBQVcsYUFBZUEsRUFBVyxFQUFJLElBQU0sSUFBTSx1QkFBeUJDLEVBQUt2SCxPQUFTLFlDOEJyRyxTQUFTd0gsRUFBT0MsR0FDN0JKLEVBQWEsRUFBR2YsV0FDaEIsSUFBSW9CLEVBQVNDLE9BQU9DLFVBQVVuSSxTQUFTb0ksS0FBS0osR0FFNUMsT0FBSUEsYUFBb0JLLE1BQTRCLGlCQUFiTCxHQUFvQyxrQkFBWEMsRUFFdkQsSUFBSUksS0FBS0wsRUFBU00sV0FDSSxpQkFBYk4sR0FBb0Msb0JBQVhDLEVBQ2xDLElBQUlJLEtBQUtMLElBRVMsaUJBQWJBLEdBQW9DLG9CQUFYQyxHQUFvRCxvQkFBWk0sVUFFM0VBLFFBQVFDLEtBQUssb0pBRWJELFFBQVFDLE1BQUssSUFBSTdELE9BQVE4RCxRQUdwQixJQUFJSixLQUFLSyxNQ3pCTCxTQUFTQyxFQUFTQyxHQUMvQmhCLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWdDLEVBQU9kLEVBQU9hLEdBQ2RFLEVBQVFELEVBQUtGLFdBQ2pCLE9BQU9HLEVDSk0sU0FBU0MsRUFBUUgsR0FFOUIsT0FEQWhCLEVBQWEsRUFBR2YsV0FDVGtCLEVBQU9hLEdBQVdJLGNDRVosU0FBU0MsRUFBU0wsR0FFL0IsT0FEQWhCLEVBQWEsRUFBR2YsV0FDVGtCLEVBQU9hLEdBQVdOLFVBQVlELEtBQUthLE1DUTdCLFNBQVNDLEVBQU96QixHQUU3QixPQURBRSxFQUFhLEVBQUdmLFdBQ1RhLGFBQWlCVyxNQUF5QixpQkFBVlgsR0FBZ0Usa0JBQTFDUSxPQUFPQyxVQUFVbkksU0FBU29JLEtBQUtWLEdDcUIvRSxTQUFTMEIsRUFBUVIsR0FHOUIsR0FGQWhCLEVBQWEsRUFBR2YsWUFFWHNDLEVBQU9QLElBQW1DLGlCQUFkQSxFQUMvQixPQUFPLEVBR1QsSUFBSUMsRUFBT2QsRUFBT2EsR0FDbEIsT0FBUVMsTUFBTUMsT0FBT1QsSUNyRXZCLElBQUlVLEVBQXVCLENBQ3pCQyxpQkFBa0IsQ0FDaEJDLElBQUsscUJBQ0xDLE1BQU8sK0JBRVRDLFNBQVUsQ0FDUkYsSUFBSyxXQUNMQyxNQUFPLHFCQUVURSxZQUFhLGdCQUNiQyxpQkFBa0IsQ0FDaEJKLElBQUsscUJBQ0xDLE1BQU8sK0JBRVRJLFNBQVUsQ0FDUkwsSUFBSyxXQUNMQyxNQUFPLHFCQUVUSyxZQUFhLENBQ1hOLElBQUssZUFDTEMsTUFBTyx5QkFFVE0sT0FBUSxDQUNOUCxJQUFLLFNBQ0xDLE1BQU8sbUJBRVRPLE1BQU8sQ0FDTFIsSUFBSyxRQUNMQyxNQUFPLGtCQUVUUSxZQUFhLENBQ1hULElBQUssZUFDTEMsTUFBTyx5QkFFVFMsT0FBUSxDQUNOVixJQUFLLFNBQ0xDLE1BQU8sbUJBRVRVLGFBQWMsQ0FDWlgsSUFBSyxnQkFDTEMsTUFBTywwQkFFVFcsUUFBUyxDQUNQWixJQUFLLFVBQ0xDLE1BQU8sb0JBRVRZLFlBQWEsQ0FDWGIsSUFBSyxlQUNMQyxNQUFPLHlCQUVUYSxPQUFRLENBQ05kLElBQUssU0FDTEMsTUFBTyxtQkFFVGMsV0FBWSxDQUNWZixJQUFLLGNBQ0xDLE1BQU8sd0JBRVRlLGFBQWMsQ0FDWmhCLElBQUssZ0JBQ0xDLE1BQU8sMkJDNURJLFNBQVNnQixFQUFrQjVDLEdBQ3hDLE9BQU8sV0FDTCxJQUFJekYsRUFBVXdFLFVBQVV0RyxPQUFTLFFBQXNCUSxJQUFqQjhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUU5RThELEVBQVF0SSxFQUFRc0ksTUFBUUMsT0FBT3ZJLEVBQVFzSSxPQUFTN0MsRUFBSytDLGFBQ3JEQyxFQUFTaEQsRUFBS2lELFFBQVFKLElBQVU3QyxFQUFLaUQsUUFBUWpELEVBQUsrQyxjQUN0RCxPQUFPQyxHQzJCWCxRQWRpQixDQUNmakMsS0FBTTZCLEVBQWtCLENBQ3RCSyxRQXBCYyxDQUNoQkMsS0FBTSxtQkFDTkMsS0FBTSxhQUNOQyxPQUFRLFdBQ1JDLE1BQU8sY0FpQkxOLGFBQWMsU0FFaEJ4RCxLQUFNcUQsRUFBa0IsQ0FDdEJLLFFBbEJjLENBQ2hCQyxLQUFNLGlCQUNOQyxLQUFNLGNBQ05DLE9BQVEsWUFDUkMsTUFBTyxVQWVMTixhQUFjLFNBRWhCTyxTQUFVVixFQUFrQixDQUMxQkssUUFoQmtCLENBQ3BCQyxLQUFNLHlCQUNOQyxLQUFNLHlCQUNOQyxPQUFRLHFCQUNSQyxNQUFPLHNCQWFMTixhQUFjLFVDOUJsQixJQUFJUSxFQUF1QixDQUN6QkMsU0FBVSxxQkFDVkMsVUFBVyxtQkFDWEMsTUFBTyxlQUNQQyxTQUFVLGtCQUNWQyxTQUFVLGNBQ1ZoQyxNQUFPLEtDTk0sU0FBU2lDLEVBQWdCN0QsR0FDdEMsT0FBTyxTQUFVOEQsRUFBWUMsR0FDM0IsSUFFSUMsRUFGQXpKLEVBQVV3SixHQUFnQixHQUk5QixHQUFnQixnQkFIRnhKLEVBQVEwSixRQUFVbkIsT0FBT3ZJLEVBQVEwSixTQUFXLGVBRzFCakUsRUFBS2tFLGlCQUFrQixDQUNyRCxJQUFJbkIsRUFBZS9DLEVBQUttRSx3QkFBMEJuRSxFQUFLK0MsYUFDbkRGLEVBQVF0SSxFQUFRc0ksTUFBUUMsT0FBT3ZJLEVBQVFzSSxPQUFTRSxFQUNwRGlCLEVBQWNoRSxFQUFLa0UsaUJBQWlCckIsSUFBVTdDLEVBQUtrRSxpQkFBaUJuQixPQUMvRCxDQUNMLElBQUlxQixFQUFnQnBFLEVBQUsrQyxhQUVyQnNCLEVBQVM5SixFQUFRc0ksTUFBUUMsT0FBT3ZJLEVBQVFzSSxPQUFTN0MsRUFBSytDLGFBRTFEaUIsRUFBY2hFLEVBQUtzRSxPQUFPRCxJQUFXckUsRUFBS3NFLE9BQU9GLEdBS25ELE9BQU9KLEVBRktoRSxFQUFLdUUsaUJBQW1CdkUsRUFBS3VFLGlCQUFpQlQsR0FBY0EsSUMrSDVFLFFBNUJlLENBQ2JVLGNBM0JrQixTQUFVQyxFQUFhQyxHQUN6QyxJQUFJQyxFQUFTbkQsT0FBT2lELEdBT2hCRyxFQUFTRCxFQUFTLElBRXRCLEdBQUlDLEVBQVMsSUFBTUEsRUFBUyxHQUMxQixPQUFRQSxFQUFTLElBQ2YsS0FBSyxFQUNILE9BQU9ELEVBQVMsS0FFbEIsS0FBSyxFQUNILE9BQU9BLEVBQVMsS0FFbEIsS0FBSyxFQUNILE9BQU9BLEVBQVMsS0FJdEIsT0FBT0EsRUFBUyxNQUtoQkUsSUFBS2hCLEVBQWdCLENBQ25CUyxPQXZIWSxDQUNkUSxPQUFRLENBQUMsSUFBSyxLQUNkQyxZQUFhLENBQUMsS0FBTSxNQUNwQkMsS0FBTSxDQUFDLGdCQUFpQixnQkFxSHRCakMsYUFBYyxTQUVoQmtDLFFBQVNwQixFQUFnQixDQUN2QlMsT0F0SGdCLENBQ2xCUSxPQUFRLENBQUMsSUFBSyxJQUFLLElBQUssS0FDeEJDLFlBQWEsQ0FBQyxLQUFNLEtBQU0sS0FBTSxNQUNoQ0MsS0FBTSxDQUFDLGNBQWUsY0FBZSxjQUFlLGdCQW9IbERqQyxhQUFjLE9BQ2R3QixpQkFBa0IsU0FBVVUsR0FDMUIsT0FBT0EsRUFBVSxLQUdyQmpFLE1BQU82QyxFQUFnQixDQUNyQlMsT0FwSGMsQ0FDaEJRLE9BQVEsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FDaEVDLFlBQWEsQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDM0ZDLEtBQU0sQ0FBQyxVQUFXLFdBQVksUUFBUyxRQUFTLE1BQU8sT0FBUSxPQUFRLFNBQVUsWUFBYSxVQUFXLFdBQVksYUFrSG5IakMsYUFBYyxTQUVoQm1DLElBQUtyQixFQUFnQixDQUNuQlMsT0FuSFksQ0FDZFEsT0FBUSxDQUFDLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQ3ZDekIsTUFBTyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQzVDMEIsWUFBYSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3hEQyxLQUFNLENBQUMsU0FBVSxTQUFVLFVBQVcsWUFBYSxXQUFZLFNBQVUsYUFnSHZFakMsYUFBYyxTQUVoQm9DLFVBQVd0QixFQUFnQixDQUN6QlMsT0FqSGtCLENBQ3BCUSxPQUFRLENBQ05NLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxTQUFVLEtBQ1ZDLEtBQU0sSUFDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxTQUVUWixZQUFhLENBQ1hLLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxTQUVUWCxLQUFNLENBQ0pJLEdBQUksT0FDSkMsR0FBSSxPQUNKQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxVQXFGUDVDLGFBQWMsT0FDZG1CLGlCQW5GNEIsQ0FDOUJZLE9BQVEsQ0FDTk0sR0FBSSxJQUNKQyxHQUFJLElBQ0pDLFNBQVUsS0FDVkMsS0FBTSxJQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLFlBRVRaLFlBQWEsQ0FDWEssR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFNBQVUsV0FDVkMsS0FBTSxPQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLFlBRVRYLEtBQU0sQ0FDSkksR0FBSSxPQUNKQyxHQUFJLE9BQ0pDLFNBQVUsV0FDVkMsS0FBTSxPQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLGFBdURQeEIsdUJBQXdCLFVDOUliLFNBQVN5QixFQUFhNUYsR0FDbkMsT0FBTyxTQUFVNkYsR0FDZixJQUFJdEwsRUFBVXdFLFVBQVV0RyxPQUFTLFFBQXNCUSxJQUFqQjhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM5RThELEVBQVF0SSxFQUFRc0ksTUFDaEJpRCxFQUFlakQsR0FBUzdDLEVBQUsrRixjQUFjbEQsSUFBVTdDLEVBQUsrRixjQUFjL0YsRUFBS2dHLG1CQUM3RUMsRUFBY0osRUFBT0ssTUFBTUosR0FFL0IsSUFBS0csRUFDSCxPQUFPLEtBR1QsSUFPSXJHLEVBUEF1RyxFQUFnQkYsRUFBWSxHQUM1QkcsRUFBZ0J2RCxHQUFTN0MsRUFBS29HLGNBQWN2RCxJQUFVN0MsRUFBS29HLGNBQWNwRyxFQUFLcUcsbUJBQzlFQyxFQUFNQyxNQUFNQyxRQUFRSixHQUFpQkssRUFBVUwsR0FBZSxTQUFVTSxHQUMxRSxPQUFPQSxFQUFRQyxLQUFLUixNQUNqQlMsRUFBUVIsR0FBZSxTQUFVTSxHQUNwQyxPQUFPQSxFQUFRQyxLQUFLUixNQUd0QnZHLEVBQVFJLEVBQUs2RyxjQUFnQjdHLEVBQUs2RyxjQUFjUCxHQUFPQSxFQUN2RDFHLEVBQVFyRixFQUFRc00sY0FBZ0J0TSxFQUFRc00sY0FBY2pILEdBQVNBLEVBQy9ELElBQUlrSCxFQUFPakIsRUFBT2tCLE1BQU1aLEVBQWMxTixRQUN0QyxNQUFPLENBQ0xtSCxNQUFPQSxFQUNQa0gsS0FBTUEsSUFLWixTQUFTRixFQUFRSSxFQUFRQyxHQUN2QixJQUFLLElBQUlYLEtBQU9VLEVBQ2QsR0FBSUEsRUFBT0UsZUFBZVosSUFBUVcsRUFBVUQsRUFBT1YsSUFDakQsT0FBT0EsRUFPYixTQUFTRyxFQUFVVSxFQUFPRixHQUN4QixJQUFLLElBQUlYLEVBQU0sRUFBR0EsRUFBTWEsRUFBTTFPLE9BQVE2TixJQUNwQyxHQUFJVyxFQUFVRSxFQUFNYixJQUNsQixPQUFPQSxFQ3hDYixJQ0Y0Q3RHLEVEdUR4Q2tHLEVBQVEsQ0FDVjFCLGVDeEQwQ3hFLEVEd0RQLENBQ2pDOEYsYUF2RDRCLHdCQXdENUJzQixhQXZENEIsT0F3RDVCUCxjQUFlLFNBQVVqSCxHQUN2QixPQUFPeUgsU0FBU3pILEVBQU8sTUMzRHBCLFNBQVVpRyxHQUNmLElBQUl0TCxFQUFVd0UsVUFBVXRHLE9BQVMsUUFBc0JRLElBQWpCOEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQzlFa0gsRUFBY0osRUFBT0ssTUFBTWxHLEVBQUs4RixjQUNwQyxJQUFLRyxFQUFhLE9BQU8sS0FDekIsSUFBSUUsRUFBZ0JGLEVBQVksR0FDNUJxQixFQUFjekIsRUFBT0ssTUFBTWxHLEVBQUtvSCxjQUNwQyxJQUFLRSxFQUFhLE9BQU8sS0FDekIsSUFBSTFILEVBQVFJLEVBQUs2RyxjQUFnQjdHLEVBQUs2RyxjQUFjUyxFQUFZLElBQU1BLEVBQVksR0FDbEYxSCxFQUFRckYsRUFBUXNNLGNBQWdCdE0sRUFBUXNNLGNBQWNqSCxHQUFTQSxFQUMvRCxJQUFJa0gsRUFBT2pCLEVBQU9rQixNQUFNWixFQUFjMU4sUUFDdEMsTUFBTyxDQUNMbUgsTUFBT0EsRUFDUGtILEtBQU1BLEtEa0RWakMsSUFBS2UsRUFBYSxDQUNoQkcsY0E1RG1CLENBQ3JCakIsT0FBUSxVQUNSQyxZQUFhLDZEQUNiQyxLQUFNLDhEQTBESmdCLGtCQUFtQixPQUNuQkksY0F6RG1CLENBQ3JCbUIsSUFBSyxDQUFDLE1BQU8sWUF5RFhsQixrQkFBbUIsUUFFckJwQixRQUFTVyxFQUFhLENBQ3BCRyxjQTFEdUIsQ0FDekJqQixPQUFRLFdBQ1JDLFlBQWEsWUFDYkMsS0FBTSxrQ0F3REpnQixrQkFBbUIsT0FDbkJJLGNBdkR1QixDQUN6Qm1CLElBQUssQ0FBQyxLQUFNLEtBQU0sS0FBTSxPQXVEdEJsQixrQkFBbUIsTUFDbkJRLGNBQWUsU0FBVWpMLEdBQ3ZCLE9BQU9BLEVBQVEsS0FHbkJvRixNQUFPNEUsRUFBYSxDQUNsQkcsY0EzRHFCLENBQ3ZCakIsT0FBUSxlQUNSQyxZQUFhLHNEQUNiQyxLQUFNLDZGQXlESmdCLGtCQUFtQixPQUNuQkksY0F4RHFCLENBQ3ZCdEIsT0FBUSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUN0RnlDLElBQUssQ0FBQyxPQUFRLE1BQU8sUUFBUyxPQUFRLFFBQVMsUUFBUyxRQUFTLE9BQVEsTUFBTyxNQUFPLE1BQU8sUUF1RDVGbEIsa0JBQW1CLFFBRXJCbkIsSUFBS1UsRUFBYSxDQUNoQkcsY0F4RG1CLENBQ3JCakIsT0FBUSxZQUNSekIsTUFBTywyQkFDUDBCLFlBQWEsa0NBQ2JDLEtBQU0sZ0VBcURKZ0Isa0JBQW1CLE9BQ25CSSxjQXBEbUIsQ0FDckJ0QixPQUFRLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbkR5QyxJQUFLLENBQUMsT0FBUSxNQUFPLE9BQVEsTUFBTyxPQUFRLE1BQU8sU0FtRGpEbEIsa0JBQW1CLFFBRXJCbEIsVUFBV1MsRUFBYSxDQUN0QkcsY0FwRHlCLENBQzNCakIsT0FBUSw2REFDUnlDLElBQUssa0ZBbURIdkIsa0JBQW1CLE1BQ25CSSxjQWxEeUIsQ0FDM0JtQixJQUFLLENBQ0huQyxHQUFJLE1BQ0pDLEdBQUksTUFDSkMsU0FBVSxPQUNWQyxLQUFNLE9BQ05DLFFBQVMsV0FDVEMsVUFBVyxhQUNYQyxRQUFTLFdBQ1RDLE1BQU8sV0EwQ1BVLGtCQUFtQixTRWpFdkIsUUFkYSxDQUNYbUIsS0FBTSxRQUNOQyxlVCtDbUIsU0FBVUMsRUFBTy9NLEVBQU9KLEdBQzNDLElBQUlGLEVBQ0FzTixFQUFhbEcsRUFBcUJpRyxHQVV0QyxPQVBFck4sRUFEd0IsaUJBQWZzTixFQUNBQSxFQUNVLElBQVZoTixFQUNBZ04sRUFBV2hHLElBRVhnRyxFQUFXL0YsTUFBTWdHLFFBQVEsWUFBYWpOLEVBQU16QyxZQUduRHFDLE1BQUFBLEdBQTBDQSxFQUFRc04sVUFDaER0TixFQUFRdU4sWUFBY3ZOLEVBQVF1TixXQUFhLEVBQ3RDLE1BQVF6TixFQUVSQSxFQUFTLE9BSWJBLEdTbEVQME4sV0FBWSxFQUNaQyxlTlZtQixTQUFVTixFQUFPTyxFQUFPQyxFQUFXeEQsR0FDdEQsT0FBT25CLEVBQXFCbUUsSU1VNUJTLFNBQVUsRUFDVmpDLE1GNEVGLEVFM0VFM0wsUUFBUyxDQUNQNk4sYUFBYyxFQUdkQyxzQkFBdUIsSUMxQlosU0FBU0MsRUFBVTdELEdBQ2hDLEdBQW9CLE9BQWhCQSxJQUF3QyxJQUFoQkEsSUFBd0MsSUFBaEJBLEVBQ2xELE9BQU83RCxJQUdULElBQUkrRCxFQUFTbkQsT0FBT2lELEdBRXBCLE9BQUlsRCxNQUFNb0QsR0FDREEsRUFHRkEsRUFBUyxFQUFJNEQsS0FBS0MsS0FBSzdELEdBQVU0RCxLQUFLRSxNQUFNOUQsR0NldEMsU0FBUytELEVBQWdCNUgsRUFBVzZILEdBQ2pEN0ksRUFBYSxFQUFHZixXQUNoQixJQUFJNkosRUFBWTNJLEVBQU9hLEdBQVdOLFVBQzlCcUksRUFBU1AsRUFBVUssR0FDdkIsT0FBTyxJQUFJcEksS0FBS3FJLEVBQVlDLEdDSmYsU0FBU0MsRUFBZ0JoSSxFQUFXNkgsR0FDakQ3SSxFQUFhLEVBQUdmLFdBQ2hCLElBQUk4SixFQUFTUCxFQUFVSyxHQUN2QixPQUFPRCxFQUFnQjVILEdBQVkrSCxHQzNCckMsSUFBSUUsRUFBc0IsTUNFWCxTQUFTQyxFQUFrQmxJLEdBQ3hDaEIsRUFBYSxFQUFHZixXQUNoQixJQUFJcUosRUFBZSxFQUNmckgsRUFBT2QsRUFBT2EsR0FDZG9FLEVBQU1uRSxFQUFLa0ksWUFDWEMsR0FBUWhFLEVBQU1rRCxFQUFlLEVBQUksR0FBS2xELEVBQU1rRCxFQUdoRCxPQUZBckgsRUFBS29JLFdBQVdwSSxFQUFLcUksYUFBZUYsR0FDcENuSSxFQUFLc0ksWUFBWSxFQUFHLEVBQUcsRUFBRyxHQUNuQnRJLEVDUE0sU0FBU3VJLEVBQWtCeEksR0FDeENoQixFQUFhLEVBQUdmLFdBQ2hCLElBQUlnQyxFQUFPZCxFQUFPYSxHQUNkeUksRUFBT3hJLEVBQUt5SSxpQkFDWkMsRUFBNEIsSUFBSWxKLEtBQUssR0FDekNrSixFQUEwQkMsZUFBZUgsRUFBTyxFQUFHLEVBQUcsR0FDdERFLEVBQTBCSixZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQy9DLElBQUlNLEVBQWtCWCxFQUFrQlMsR0FDcENHLEVBQTRCLElBQUlySixLQUFLLEdBQ3pDcUosRUFBMEJGLGVBQWVILEVBQU0sRUFBRyxHQUNsREssRUFBMEJQLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDL0MsSUFBSVEsRUFBa0JiLEVBQWtCWSxHQUV4QyxPQUFJN0ksRUFBS1AsV0FBYW1KLEVBQWdCbkosVUFDN0IrSSxFQUFPLEVBQ0x4SSxFQUFLUCxXQUFhcUosRUFBZ0JySixVQUNwQytJLEVBRUFBLEVBQU8sRUNsQkgsU0FBU08sRUFBc0JoSixHQUM1Q2hCLEVBQWEsRUFBR2YsV0FDaEIsSUFBSXdLLEVBQU9ELEVBQWtCeEksR0FDekJpSixFQUFrQixJQUFJeEosS0FBSyxHQUMvQndKLEVBQWdCTCxlQUFlSCxFQUFNLEVBQUcsR0FDeENRLEVBQWdCVixZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQ3JDLElBQUl0SSxFQUFPaUksRUFBa0JlLEdBQzdCLE9BQU9oSixFQ1JULElBQUlpSixFQUF1QixPQ0NaLFNBQVNDLEdBQWVuSixFQUFXaUQsR0FDaERqRSxFQUFhLEVBQUdmLFdBQ2hCLElBQUl4RSxFQUFVd0osR0FBZ0IsR0FDMUJtRyxFQUFTM1AsRUFBUTJQLE9BQ2pCQyxFQUFxQkQsR0FBVUEsRUFBTzNQLFNBQVcyUCxFQUFPM1AsUUFBUTZOLGFBQ2hFZ0MsRUFBNEMsTUFBdEJELEVBQTZCLEVBQUk3QixFQUFVNkIsR0FDakUvQixFQUF1QyxNQUF4QjdOLEVBQVE2TixhQUF1QmdDLEVBQXNCOUIsRUFBVS9OLEVBQVE2TixjQUUxRixLQUFNQSxHQUFnQixHQUFLQSxHQUFnQixHQUN6QyxNQUFNLElBQUlpQyxXQUFXLG9EQUd2QixJQUFJdEosRUFBT2QsRUFBT2EsR0FDZG9FLEVBQU1uRSxFQUFLa0ksWUFDWEMsR0FBUWhFLEVBQU1rRCxFQUFlLEVBQUksR0FBS2xELEVBQU1rRCxFQUdoRCxPQUZBckgsRUFBS29JLFdBQVdwSSxFQUFLcUksYUFBZUYsR0FDcENuSSxFQUFLc0ksWUFBWSxFQUFHLEVBQUcsRUFBRyxHQUNuQnRJLEVDaEJNLFNBQVN1SixHQUFleEosRUFBV2lELEdBQ2hEakUsRUFBYSxFQUFHZixXQUNoQixJQUFJZ0MsRUFBT2QsRUFBT2EsR0FDZHlJLEVBQU94SSxFQUFLeUksaUJBQ1pqUCxFQUFVd0osR0FBZ0IsR0FDMUJtRyxFQUFTM1AsRUFBUTJQLE9BQ2pCSyxFQUE4QkwsR0FBVUEsRUFBTzNQLFNBQVcyUCxFQUFPM1AsUUFBUThOLHNCQUN6RW1DLEVBQThELE1BQS9CRCxFQUFzQyxFQUFJakMsRUFBVWlDLEdBQ25GbEMsRUFBeUQsTUFBakM5TixFQUFROE4sc0JBQWdDbUMsRUFBK0JsQyxFQUFVL04sRUFBUThOLHVCQUVySCxLQUFNQSxHQUF5QixHQUFLQSxHQUF5QixHQUMzRCxNQUFNLElBQUlnQyxXQUFXLDZEQUd2QixJQUFJSSxFQUFzQixJQUFJbEssS0FBSyxHQUNuQ2tLLEVBQW9CZixlQUFlSCxFQUFPLEVBQUcsRUFBR2xCLEdBQ2hEb0MsRUFBb0JwQixZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQ3pDLElBQUlNLEVBQWtCTSxHQUFlUSxFQUFxQjFHLEdBQ3REMkcsRUFBc0IsSUFBSW5LLEtBQUssR0FDbkNtSyxFQUFvQmhCLGVBQWVILEVBQU0sRUFBR2xCLEdBQzVDcUMsRUFBb0JyQixZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQ3pDLElBQUlRLEVBQWtCSSxHQUFlUyxFQUFxQjNHLEdBRTFELE9BQUloRCxFQUFLUCxXQUFhbUosRUFBZ0JuSixVQUM3QitJLEVBQU8sRUFDTHhJLEVBQUtQLFdBQWFxSixFQUFnQnJKLFVBQ3BDK0ksRUFFQUEsRUFBTyxFQzVCSCxTQUFTb0IsR0FBbUI3SixFQUFXaUQsR0FDcERqRSxFQUFhLEVBQUdmLFdBQ2hCLElBQUl4RSxFQUFVd0osR0FBZ0IsR0FDMUJtRyxFQUFTM1AsRUFBUTJQLE9BQ2pCSyxFQUE4QkwsR0FBVUEsRUFBTzNQLFNBQVcyUCxFQUFPM1AsUUFBUThOLHNCQUN6RW1DLEVBQThELE1BQS9CRCxFQUFzQyxFQUFJakMsRUFBVWlDLEdBQ25GbEMsRUFBeUQsTUFBakM5TixFQUFROE4sc0JBQWdDbUMsRUFBK0JsQyxFQUFVL04sRUFBUThOLHVCQUNqSGtCLEVBQU9lLEdBQWV4SixFQUFXaUQsR0FDakM2RyxFQUFZLElBQUlySyxLQUFLLEdBQ3pCcUssRUFBVWxCLGVBQWVILEVBQU0sRUFBR2xCLEdBQ2xDdUMsRUFBVXZCLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDL0IsSUFBSXRJLEVBQU9rSixHQUFlVyxFQUFXN0csR0FDckMsT0FBT2hELEVDZFQsSUFBSSxHQUF1QixPQ0paLFNBQVM4SixHQUFnQmxHLEVBQVFtRyxHQUk5QyxJQUhBLElBQUlDLEVBQU9wRyxFQUFTLEVBQUksSUFBTSxHQUMxQnFHLEVBQVN6QyxLQUFLMEMsSUFBSXRHLEdBQVF6TSxXQUV2QjhTLEVBQU92UyxPQUFTcVMsR0FDckJFLEVBQVMsSUFBTUEsRUFHakIsT0FBT0QsRUFBT0MsRUNNaEIsSUFBSUUsR0FBYSxDQUVmQyxFQUFHLFNBQVVwSyxFQUFNMkcsR0FTakIsSUFBSTBELEVBQWFySyxFQUFLeUksaUJBRWxCRCxFQUFPNkIsRUFBYSxFQUFJQSxFQUFhLEVBQUlBLEVBQzdDLE9BQU9QLEdBQTBCLE9BQVZuRCxFQUFpQjZCLEVBQU8sSUFBTUEsRUFBTTdCLEVBQU1qUCxTQUduRTRTLEVBQUcsU0FBVXRLLEVBQU0yRyxHQUNqQixJQUFJMUcsRUFBUUQsRUFBS3VLLGNBQ2pCLE1BQWlCLE1BQVY1RCxFQUFnQjVFLE9BQU85QixFQUFRLEdBQUs2SixHQUFnQjdKLEVBQVEsRUFBRyxJQUd4RXVLLEVBQUcsU0FBVXhLLEVBQU0yRyxHQUNqQixPQUFPbUQsR0FBZ0I5SixFQUFLcUksYUFBYzFCLEVBQU1qUCxTQUdsRCtTLEVBQUcsU0FBVXpLLEVBQU0yRyxHQUNqQixJQUFJK0QsRUFBcUIxSyxFQUFLMkssY0FBZ0IsSUFBTSxFQUFJLEtBQU8sS0FFL0QsT0FBUWhFLEdBQ04sSUFBSyxJQUNMLElBQUssS0FDSCxPQUFPK0QsRUFBbUJFLGNBRTVCLElBQUssTUFDSCxPQUFPRixFQUVULElBQUssUUFDSCxPQUFPQSxFQUFtQixHQUc1QixRQUNFLE1BQThCLE9BQXZCQSxFQUE4QixPQUFTLFNBSXBERyxFQUFHLFNBQVU3SyxFQUFNMkcsR0FDakIsT0FBT21ELEdBQWdCOUosRUFBSzJLLGNBQWdCLElBQU0sR0FBSWhFLEVBQU1qUCxTQUc5RG9ULEVBQUcsU0FBVTlLLEVBQU0yRyxHQUNqQixPQUFPbUQsR0FBZ0I5SixFQUFLMkssY0FBZWhFLEVBQU1qUCxTQUduRHFULEVBQUcsU0FBVS9LLEVBQU0yRyxHQUNqQixPQUFPbUQsR0FBZ0I5SixFQUFLZ0wsZ0JBQWlCckUsRUFBTWpQLFNBR3JEdVQsRUFBRyxTQUFVakwsRUFBTTJHLEdBQ2pCLE9BQU9tRCxHQUFnQjlKLEVBQUtrTCxnQkFBaUJ2RSxFQUFNalAsU0FHckR5VCxFQUFHLFNBQVVuTCxFQUFNMkcsR0FDakIsSUFBSXlFLEVBQWlCekUsRUFBTWpQLE9BQ3ZCMlQsRUFBZXJMLEVBQUtzTCxxQkFFeEIsT0FBT3hCLEdBRGlCdEMsS0FBS0UsTUFBTTJELEVBQWU3RCxLQUFLK0QsSUFBSSxHQUFJSCxFQUFpQixJQUN0Q3pFLEVBQU1qUCxVQUdwRCxZQzVFQSxJQXdESSxHQUFhLENBRWY4VCxFQUFHLFNBQVV4TCxFQUFNMkcsRUFBT1MsR0FDeEIsSUFBSXRELEVBQU05RCxFQUFLeUksaUJBQW1CLEVBQUksRUFBSSxFQUUxQyxPQUFROUIsR0FFTixJQUFLLElBQ0wsSUFBSyxLQUNMLElBQUssTUFDSCxPQUFPUyxFQUFTdEQsSUFBSUEsRUFBSyxDQUN2QmhDLE1BQU8sZ0JBSVgsSUFBSyxRQUNILE9BQU9zRixFQUFTdEQsSUFBSUEsRUFBSyxDQUN2QmhDLE1BQU8sV0FLWCxRQUNFLE9BQU9zRixFQUFTdEQsSUFBSUEsRUFBSyxDQUN2QmhDLE1BQU8sV0FLZnNJLEVBQUcsU0FBVXBLLEVBQU0yRyxFQUFPUyxHQUV4QixHQUFjLE9BQVZULEVBQWdCLENBQ2xCLElBQUkwRCxFQUFhckssRUFBS3lJLGlCQUVsQkQsRUFBTzZCLEVBQWEsRUFBSUEsRUFBYSxFQUFJQSxFQUM3QyxPQUFPakQsRUFBUzNELGNBQWMrRSxFQUFNLENBQ2xDaUQsS0FBTSxTQUlWLE9BQU9DLEdBQWdCdEIsRUFBRXBLLEVBQU0yRyxJQUdqQ2dGLEVBQUcsU0FBVTNMLEVBQU0yRyxFQUFPUyxFQUFVNU4sR0FDbEMsSUFBSW9TLEVBQWlCckMsR0FBZXZKLEVBQU14RyxHQUV0Q3FTLEVBQVdELEVBQWlCLEVBQUlBLEVBQWlCLEVBQUlBLEVBRXpELE1BQWMsT0FBVmpGLEVBRUttRCxHQURZK0IsRUFBVyxJQUNPLEdBSXpCLE9BQVZsRixFQUNLUyxFQUFTM0QsY0FBY29JLEVBQVUsQ0FDdENKLEtBQU0sU0FLSDNCLEdBQWdCK0IsRUFBVWxGLEVBQU1qUCxTQUd6Q29VLEVBQUcsU0FBVTlMLEVBQU0yRyxHQUdqQixPQUFPbUQsR0FGV3ZCLEVBQWtCdkksR0FFQTJHLEVBQU1qUCxTQVc1Q3FVLEVBQUcsU0FBVS9MLEVBQU0yRyxHQUVqQixPQUFPbUQsR0FESTlKLEVBQUt5SSxpQkFDYTlCLEVBQU1qUCxTQUdyQ3NVLEVBQUcsU0FBVWhNLEVBQU0yRyxFQUFPUyxHQUN4QixJQUFJbEQsRUFBVXNELEtBQUtDLE1BQU16SCxFQUFLdUssY0FBZ0IsR0FBSyxHQUVuRCxPQUFRNUQsR0FFTixJQUFLLElBQ0gsT0FBTzVFLE9BQU9tQyxHQUdoQixJQUFLLEtBQ0gsT0FBTzRGLEdBQWdCNUYsRUFBUyxHQUdsQyxJQUFLLEtBQ0gsT0FBT2tELEVBQVMzRCxjQUFjUyxFQUFTLENBQ3JDdUgsS0FBTSxZQUlWLElBQUssTUFDSCxPQUFPckUsRUFBU2xELFFBQVFBLEVBQVMsQ0FDL0JwQyxNQUFPLGNBQ1BvQixRQUFTLGVBSWIsSUFBSyxRQUNILE9BQU9rRSxFQUFTbEQsUUFBUUEsRUFBUyxDQUMvQnBDLE1BQU8sU0FDUG9CLFFBQVMsZUFLYixRQUNFLE9BQU9rRSxFQUFTbEQsUUFBUUEsRUFBUyxDQUMvQnBDLE1BQU8sT0FDUG9CLFFBQVMsaUJBS2pCK0ksRUFBRyxTQUFVak0sRUFBTTJHLEVBQU9TLEdBQ3hCLElBQUlsRCxFQUFVc0QsS0FBS0MsTUFBTXpILEVBQUt1SyxjQUFnQixHQUFLLEdBRW5ELE9BQVE1RCxHQUVOLElBQUssSUFDSCxPQUFPNUUsT0FBT21DLEdBR2hCLElBQUssS0FDSCxPQUFPNEYsR0FBZ0I1RixFQUFTLEdBR2xDLElBQUssS0FDSCxPQUFPa0QsRUFBUzNELGNBQWNTLEVBQVMsQ0FDckN1SCxLQUFNLFlBSVYsSUFBSyxNQUNILE9BQU9yRSxFQUFTbEQsUUFBUUEsRUFBUyxDQUMvQnBDLE1BQU8sY0FDUG9CLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2tFLEVBQVNsRCxRQUFRQSxFQUFTLENBQy9CcEMsTUFBTyxTQUNQb0IsUUFBUyxlQUtiLFFBQ0UsT0FBT2tFLEVBQVNsRCxRQUFRQSxFQUFTLENBQy9CcEMsTUFBTyxPQUNQb0IsUUFBUyxpQkFLakJvSCxFQUFHLFNBQVV0SyxFQUFNMkcsRUFBT1MsR0FDeEIsSUFBSW5ILEVBQVFELEVBQUt1SyxjQUVqQixPQUFRNUQsR0FDTixJQUFLLElBQ0wsSUFBSyxLQUNILE9BQU8rRSxHQUFnQnBCLEVBQUV0SyxFQUFNMkcsR0FHakMsSUFBSyxLQUNILE9BQU9TLEVBQVMzRCxjQUFjeEQsRUFBUSxFQUFHLENBQ3ZDd0wsS0FBTSxVQUlWLElBQUssTUFDSCxPQUFPckUsRUFBU25ILE1BQU1BLEVBQU8sQ0FDM0I2QixNQUFPLGNBQ1BvQixRQUFTLGVBSWIsSUFBSyxRQUNILE9BQU9rRSxFQUFTbkgsTUFBTUEsRUFBTyxDQUMzQjZCLE1BQU8sU0FDUG9CLFFBQVMsZUFLYixRQUNFLE9BQU9rRSxFQUFTbkgsTUFBTUEsRUFBTyxDQUMzQjZCLE1BQU8sT0FDUG9CLFFBQVMsaUJBS2pCZ0osRUFBRyxTQUFVbE0sRUFBTTJHLEVBQU9TLEdBQ3hCLElBQUluSCxFQUFRRCxFQUFLdUssY0FFakIsT0FBUTVELEdBRU4sSUFBSyxJQUNILE9BQU81RSxPQUFPOUIsRUFBUSxHQUd4QixJQUFLLEtBQ0gsT0FBTzZKLEdBQWdCN0osRUFBUSxFQUFHLEdBR3BDLElBQUssS0FDSCxPQUFPbUgsRUFBUzNELGNBQWN4RCxFQUFRLEVBQUcsQ0FDdkN3TCxLQUFNLFVBSVYsSUFBSyxNQUNILE9BQU9yRSxFQUFTbkgsTUFBTUEsRUFBTyxDQUMzQjZCLE1BQU8sY0FDUG9CLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2tFLEVBQVNuSCxNQUFNQSxFQUFPLENBQzNCNkIsTUFBTyxTQUNQb0IsUUFBUyxlQUtiLFFBQ0UsT0FBT2tFLEVBQVNuSCxNQUFNQSxFQUFPLENBQzNCNkIsTUFBTyxPQUNQb0IsUUFBUyxpQkFLakJpSixFQUFHLFNBQVVuTSxFQUFNMkcsRUFBT1MsRUFBVTVOLEdBQ2xDLElBQUk0UyxFSGhUTyxTQUFvQnJNLEVBQVd2RyxHQUM1Q3VGLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWdDLEVBQU9kLEVBQU9hLEdBQ2RvSSxFQUFPZSxHQUFlbEosRUFBTXhHLEdBQVNpRyxVQUFZbUssR0FBbUI1SixFQUFNeEcsR0FBU2lHLFVBSXZGLE9BQU8rSCxLQUFLNkUsTUFBTWxFLEVBQU8sSUFBd0IsRUd5U3BDbUUsQ0FBV3RNLEVBQU14RyxHQUU1QixNQUFjLE9BQVZtTixFQUNLUyxFQUFTM0QsY0FBYzJJLEVBQU0sQ0FDbENYLEtBQU0sU0FJSDNCLEdBQWdCc0MsRUFBTXpGLEVBQU1qUCxTQUdyQzZVLEVBQUcsU0FBVXZNLEVBQU0yRyxFQUFPUyxHQUN4QixJQUFJb0YsRVA1VE8sU0FBdUJ6TSxHQUNwQ2hCLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWdDLEVBQU9kLEVBQU9hLEdBQ2RvSSxFQUFPRixFQUFrQmpJLEdBQU1QLFVBQVlzSixFQUFzQi9JLEdBQU1QLFVBSTNFLE9BQU8rSCxLQUFLNkUsTUFBTWxFLEVBQU9jLEdBQXdCLEVPcVRqQ3dELENBQWN6TSxHQUU1QixNQUFjLE9BQVYyRyxFQUNLUyxFQUFTM0QsY0FBYytJLEVBQVMsQ0FDckNmLEtBQU0sU0FJSDNCLEdBQWdCMEMsRUFBUzdGLEVBQU1qUCxTQUd4QzhTLEVBQUcsU0FBVXhLLEVBQU0yRyxFQUFPUyxHQUN4QixNQUFjLE9BQVZULEVBQ0tTLEVBQVMzRCxjQUFjekQsRUFBS3FJLGFBQWMsQ0FDL0NvRCxLQUFNLFNBSUhDLEdBQWdCbEIsRUFBRXhLLEVBQU0yRyxJQUdqQytGLEVBQUcsU0FBVTFNLEVBQU0yRyxFQUFPUyxHQUN4QixJQUFJdUYsRVhwVk8sU0FBeUI1TSxHQUN0Q2hCLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWdDLEVBQU9kLEVBQU9hLEdBQ2Q4SCxFQUFZN0gsRUFBS1AsVUFDckJPLEVBQUs0TSxZQUFZLEVBQUcsR0FDcEI1TSxFQUFLc0ksWUFBWSxFQUFHLEVBQUcsRUFBRyxHQUMxQixJQUFJdUUsRUFBdUI3TSxFQUFLUCxVQUM1QnFOLEVBQWFqRixFQUFZZ0YsRUFDN0IsT0FBT3JGLEtBQUtFLE1BQU1vRixFQUFhOUUsR0FBdUIsRVc0VXBDK0UsQ0FBZ0IvTSxHQUVoQyxNQUFjLE9BQVYyRyxFQUNLUyxFQUFTM0QsY0FBY2tKLEVBQVcsQ0FDdkNsQixLQUFNLGNBSUgzQixHQUFnQjZDLEVBQVdoRyxFQUFNalAsU0FHMUNzVixFQUFHLFNBQVVoTixFQUFNMkcsRUFBT1MsR0FDeEIsSUFBSTZGLEVBQVlqTixFQUFLa0ksWUFFckIsT0FBUXZCLEdBRU4sSUFBSyxJQUNMLElBQUssS0FDTCxJQUFLLE1BQ0gsT0FBT1MsRUFBU2pELElBQUk4SSxFQUFXLENBQzdCbkwsTUFBTyxjQUNQb0IsUUFBUyxlQUliLElBQUssUUFDSCxPQUFPa0UsRUFBU2pELElBQUk4SSxFQUFXLENBQzdCbkwsTUFBTyxTQUNQb0IsUUFBUyxlQUliLElBQUssU0FDSCxPQUFPa0UsRUFBU2pELElBQUk4SSxFQUFXLENBQzdCbkwsTUFBTyxRQUNQb0IsUUFBUyxlQUtiLFFBQ0UsT0FBT2tFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sT0FDUG9CLFFBQVMsaUJBS2pCdEgsRUFBRyxTQUFVb0UsRUFBTTJHLEVBQU9TLEVBQVU1TixHQUNsQyxJQUFJeVQsRUFBWWpOLEVBQUtrSSxZQUNqQmdGLEdBQWtCRCxFQUFZelQsRUFBUTZOLGFBQWUsR0FBSyxHQUFLLEVBRW5FLE9BQVFWLEdBRU4sSUFBSyxJQUNILE9BQU81RSxPQUFPbUwsR0FHaEIsSUFBSyxLQUNILE9BQU9wRCxHQUFnQm9ELEVBQWdCLEdBR3pDLElBQUssS0FDSCxPQUFPOUYsRUFBUzNELGNBQWN5SixFQUFnQixDQUM1Q3pCLEtBQU0sUUFHVixJQUFLLE1BQ0gsT0FBT3JFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sY0FDUG9CLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2tFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sU0FDUG9CLFFBQVMsZUFJYixJQUFLLFNBQ0gsT0FBT2tFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sUUFDUG9CLFFBQVMsZUFLYixRQUNFLE9BQU9rRSxFQUFTakQsSUFBSThJLEVBQVcsQ0FDN0JuTCxNQUFPLE9BQ1BvQixRQUFTLGlCQUtqQmlLLEVBQUcsU0FBVW5OLEVBQU0yRyxFQUFPUyxFQUFVNU4sR0FDbEMsSUFBSXlULEVBQVlqTixFQUFLa0ksWUFDakJnRixHQUFrQkQsRUFBWXpULEVBQVE2TixhQUFlLEdBQUssR0FBSyxFQUVuRSxPQUFRVixHQUVOLElBQUssSUFDSCxPQUFPNUUsT0FBT21MLEdBR2hCLElBQUssS0FDSCxPQUFPcEQsR0FBZ0JvRCxFQUFnQnZHLEVBQU1qUCxRQUcvQyxJQUFLLEtBQ0gsT0FBTzBQLEVBQVMzRCxjQUFjeUosRUFBZ0IsQ0FDNUN6QixLQUFNLFFBR1YsSUFBSyxNQUNILE9BQU9yRSxFQUFTakQsSUFBSThJLEVBQVcsQ0FDN0JuTCxNQUFPLGNBQ1BvQixRQUFTLGVBSWIsSUFBSyxRQUNILE9BQU9rRSxFQUFTakQsSUFBSThJLEVBQVcsQ0FDN0JuTCxNQUFPLFNBQ1BvQixRQUFTLGVBSWIsSUFBSyxTQUNILE9BQU9rRSxFQUFTakQsSUFBSThJLEVBQVcsQ0FDN0JuTCxNQUFPLFFBQ1BvQixRQUFTLGVBS2IsUUFDRSxPQUFPa0UsRUFBU2pELElBQUk4SSxFQUFXLENBQzdCbkwsTUFBTyxPQUNQb0IsUUFBUyxpQkFLakJ0TCxFQUFHLFNBQVVvSSxFQUFNMkcsRUFBT1MsR0FDeEIsSUFBSTZGLEVBQVlqTixFQUFLa0ksWUFDakJrRixFQUE2QixJQUFkSCxFQUFrQixFQUFJQSxFQUV6QyxPQUFRdEcsR0FFTixJQUFLLElBQ0gsT0FBTzVFLE9BQU9xTCxHQUdoQixJQUFLLEtBQ0gsT0FBT3RELEdBQWdCc0QsRUFBY3pHLEVBQU1qUCxRQUc3QyxJQUFLLEtBQ0gsT0FBTzBQLEVBQVMzRCxjQUFjMkosRUFBYyxDQUMxQzNCLEtBQU0sUUFJVixJQUFLLE1BQ0gsT0FBT3JFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sY0FDUG9CLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2tFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sU0FDUG9CLFFBQVMsZUFJYixJQUFLLFNBQ0gsT0FBT2tFLEVBQVNqRCxJQUFJOEksRUFBVyxDQUM3Qm5MLE1BQU8sUUFDUG9CLFFBQVMsZUFLYixRQUNFLE9BQU9rRSxFQUFTakQsSUFBSThJLEVBQVcsQ0FDN0JuTCxNQUFPLE9BQ1BvQixRQUFTLGlCQUtqQnVILEVBQUcsU0FBVXpLLEVBQU0yRyxFQUFPUyxHQUN4QixJQUNJc0QsRUFEUTFLLEVBQUsySyxjQUNnQixJQUFNLEVBQUksS0FBTyxLQUVsRCxPQUFRaEUsR0FDTixJQUFLLElBQ0wsSUFBSyxLQUNILE9BQU9TLEVBQVNoRCxVQUFVc0csRUFBb0IsQ0FDNUM1SSxNQUFPLGNBQ1BvQixRQUFTLGVBR2IsSUFBSyxNQUNILE9BQU9rRSxFQUFTaEQsVUFBVXNHLEVBQW9CLENBQzVDNUksTUFBTyxjQUNQb0IsUUFBUyxlQUNSakYsY0FFTCxJQUFLLFFBQ0gsT0FBT21KLEVBQVNoRCxVQUFVc0csRUFBb0IsQ0FDNUM1SSxNQUFPLFNBQ1BvQixRQUFTLGVBSWIsUUFDRSxPQUFPa0UsRUFBU2hELFVBQVVzRyxFQUFvQixDQUM1QzVJLE1BQU8sT0FDUG9CLFFBQVMsaUJBS2pCbUssRUFBRyxTQUFVck4sRUFBTTJHLEVBQU9TLEdBQ3hCLElBQ0lzRCxFQURBNEMsRUFBUXROLEVBQUsySyxjQVdqQixPQVBFRCxFQURZLEtBQVY0QyxFQXZqQkEsT0F5akJpQixJQUFWQSxFQTFqQkgsV0E2akJlQSxFQUFRLElBQU0sRUFBSSxLQUFPLEtBR3hDM0csR0FDTixJQUFLLElBQ0wsSUFBSyxLQUNILE9BQU9TLEVBQVNoRCxVQUFVc0csRUFBb0IsQ0FDNUM1SSxNQUFPLGNBQ1BvQixRQUFTLGVBR2IsSUFBSyxNQUNILE9BQU9rRSxFQUFTaEQsVUFBVXNHLEVBQW9CLENBQzVDNUksTUFBTyxjQUNQb0IsUUFBUyxlQUNSakYsY0FFTCxJQUFLLFFBQ0gsT0FBT21KLEVBQVNoRCxVQUFVc0csRUFBb0IsQ0FDNUM1SSxNQUFPLFNBQ1BvQixRQUFTLGVBSWIsUUFDRSxPQUFPa0UsRUFBU2hELFVBQVVzRyxFQUFvQixDQUM1QzVJLE1BQU8sT0FDUG9CLFFBQVMsaUJBS2pCcUssRUFBRyxTQUFVdk4sRUFBTTJHLEVBQU9TLEdBQ3hCLElBQ0lzRCxFQURBNEMsRUFBUXROLEVBQUsySyxjQWFqQixPQVRFRCxFQURFNEMsR0FBUyxHQTdsQk4sVUErbEJJQSxHQUFTLEdBaG1CWCxZQWttQkVBLEdBQVMsRUFubUJiLFVBR0YsUUFzbUJHM0csR0FDTixJQUFLLElBQ0wsSUFBSyxLQUNMLElBQUssTUFDSCxPQUFPUyxFQUFTaEQsVUFBVXNHLEVBQW9CLENBQzVDNUksTUFBTyxjQUNQb0IsUUFBUyxlQUdiLElBQUssUUFDSCxPQUFPa0UsRUFBU2hELFVBQVVzRyxFQUFvQixDQUM1QzVJLE1BQU8sU0FDUG9CLFFBQVMsZUFJYixRQUNFLE9BQU9rRSxFQUFTaEQsVUFBVXNHLEVBQW9CLENBQzVDNUksTUFBTyxPQUNQb0IsUUFBUyxpQkFLakIySCxFQUFHLFNBQVU3SyxFQUFNMkcsRUFBT1MsR0FDeEIsR0FBYyxPQUFWVCxFQUFnQixDQUNsQixJQUFJMkcsRUFBUXROLEVBQUsySyxjQUFnQixHQUVqQyxPQURjLElBQVYyQyxJQUFhQSxFQUFRLElBQ2xCbEcsRUFBUzNELGNBQWM2SixFQUFPLENBQ25DN0IsS0FBTSxTQUlWLE9BQU9DLEdBQWdCYixFQUFFN0ssRUFBTTJHLElBR2pDbUUsRUFBRyxTQUFVOUssRUFBTTJHLEVBQU9TLEdBQ3hCLE1BQWMsT0FBVlQsRUFDS1MsRUFBUzNELGNBQWN6RCxFQUFLMkssY0FBZSxDQUNoRGMsS0FBTSxTQUlIQyxHQUFnQlosRUFBRTlLLEVBQU0yRyxJQUdqQzZHLEVBQUcsU0FBVXhOLEVBQU0yRyxFQUFPUyxHQUN4QixJQUFJa0csRUFBUXROLEVBQUsySyxjQUFnQixHQUVqQyxNQUFjLE9BQVZoRSxFQUNLUyxFQUFTM0QsY0FBYzZKLEVBQU8sQ0FDbkM3QixLQUFNLFNBSUgzQixHQUFnQndELEVBQU8zRyxFQUFNalAsU0FHdENVLEVBQUcsU0FBVTRILEVBQU0yRyxFQUFPUyxHQUN4QixJQUFJa0csRUFBUXROLEVBQUsySyxjQUdqQixPQUZjLElBQVYyQyxJQUFhQSxFQUFRLElBRVgsT0FBVjNHLEVBQ0tTLEVBQVMzRCxjQUFjNkosRUFBTyxDQUNuQzdCLEtBQU0sU0FJSDNCLEdBQWdCd0QsRUFBTzNHLEVBQU1qUCxTQUd0Q3FULEVBQUcsU0FBVS9LLEVBQU0yRyxFQUFPUyxHQUN4QixNQUFjLE9BQVZULEVBQ0tTLEVBQVMzRCxjQUFjekQsRUFBS2dMLGdCQUFpQixDQUNsRFMsS0FBTSxXQUlIQyxHQUFnQlgsRUFBRS9LLEVBQU0yRyxJQUdqQ3NFLEVBQUcsU0FBVWpMLEVBQU0yRyxFQUFPUyxHQUN4QixNQUFjLE9BQVZULEVBQ0tTLEVBQVMzRCxjQUFjekQsRUFBS2tMLGdCQUFpQixDQUNsRE8sS0FBTSxXQUlIQyxHQUFnQlQsRUFBRWpMLEVBQU0yRyxJQUdqQ3dFLEVBQUcsU0FBVW5MLEVBQU0yRyxHQUNqQixPQUFPK0UsR0FBZ0JQLEVBQUVuTCxFQUFNMkcsSUFHakM4RyxFQUFHLFNBQVV6TixFQUFNMkcsRUFBTytHLEVBQVdsVSxHQUNuQyxJQUNJbVUsR0FEZW5VLEVBQVFvVSxlQUFpQjVOLEdBQ1Y2TixvQkFFbEMsR0FBdUIsSUFBbkJGLEVBQ0YsTUFBTyxJQUdULE9BQVFoSCxHQUVOLElBQUssSUFDSCxPQUFPbUgsR0FBa0NILEdBSzNDLElBQUssT0FDTCxJQUFLLEtBRUgsT0FBT0ksR0FBZUosR0FReEIsUUFDRSxPQUFPSSxHQUFlSixFQUFnQixPQUk1Q0ssRUFBRyxTQUFVaE8sRUFBTTJHLEVBQU8rRyxFQUFXbFUsR0FDbkMsSUFDSW1VLEdBRGVuVSxFQUFRb1UsZUFBaUI1TixHQUNWNk4sb0JBRWxDLE9BQVFsSCxHQUVOLElBQUssSUFDSCxPQUFPbUgsR0FBa0NILEdBSzNDLElBQUssT0FDTCxJQUFLLEtBRUgsT0FBT0ksR0FBZUosR0FReEIsUUFDRSxPQUFPSSxHQUFlSixFQUFnQixPQUk1Q00sRUFBRyxTQUFVak8sRUFBTTJHLEVBQU8rRyxFQUFXbFUsR0FDbkMsSUFDSW1VLEdBRGVuVSxFQUFRb1UsZUFBaUI1TixHQUNWNk4sb0JBRWxDLE9BQVFsSCxHQUVOLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNILE1BQU8sTUFBUXVILEdBQW9CUCxFQUFnQixLQUlyRCxRQUNFLE1BQU8sTUFBUUksR0FBZUosRUFBZ0IsT0FJcERRLEVBQUcsU0FBVW5PLEVBQU0yRyxFQUFPK0csRUFBV2xVLEdBQ25DLElBQ0ltVSxHQURlblUsRUFBUW9VLGVBQWlCNU4sR0FDVjZOLG9CQUVsQyxPQUFRbEgsR0FFTixJQUFLLElBQ0wsSUFBSyxLQUNMLElBQUssTUFDSCxNQUFPLE1BQVF1SCxHQUFvQlAsRUFBZ0IsS0FJckQsUUFDRSxNQUFPLE1BQVFJLEdBQWVKLEVBQWdCLE9BSXBEUyxFQUFHLFNBQVVwTyxFQUFNMkcsRUFBTytHLEVBQVdsVSxHQUNuQyxJQUFJNlUsRUFBZTdVLEVBQVFvVSxlQUFpQjVOLEVBRTVDLE9BQU84SixHQURTdEMsS0FBS0UsTUFBTTJHLEVBQWE1TyxVQUFZLEtBQ2xCa0gsRUFBTWpQLFNBRzFDNFcsRUFBRyxTQUFVdE8sRUFBTTJHLEVBQU8rRyxFQUFXbFUsR0FHbkMsT0FBT3NRLElBRll0USxFQUFRb1UsZUFBaUI1TixHQUNmUCxVQUNLa0gsRUFBTWpQLFVBSTVDLFNBQVN3VyxHQUFvQnRRLEVBQVEyUSxHQUNuQyxJQUFJdkUsRUFBT3BNLEVBQVMsRUFBSSxJQUFNLElBQzFCNFEsRUFBWWhILEtBQUswQyxJQUFJdE0sR0FDckIwUCxFQUFROUYsS0FBS0UsTUFBTThHLEVBQVksSUFDL0JDLEVBQVVELEVBQVksR0FFMUIsR0FBZ0IsSUFBWkMsRUFDRixPQUFPekUsRUFBT2pJLE9BQU91TCxHQUd2QixJQUFJb0IsRUFBWUgsR0FBa0IsR0FDbEMsT0FBT3ZFLEVBQU9qSSxPQUFPdUwsR0FBU29CLEVBQVk1RSxHQUFnQjJFLEVBQVMsR0FHckUsU0FBU1gsR0FBa0NsUSxFQUFRMlEsR0FDakQsT0FBSTNRLEVBQVMsSUFBTyxHQUNQQSxFQUFTLEVBQUksSUFBTSxLQUNoQmtNLEdBQWdCdEMsS0FBSzBDLElBQUl0TSxHQUFVLEdBQUksR0FHaERtUSxHQUFlblEsRUFBUTJRLEdBR2hDLFNBQVNSLEdBQWVuUSxFQUFRMlEsR0FDOUIsSUFBSUcsRUFBWUgsR0FBa0IsR0FDOUJ2RSxFQUFPcE0sRUFBUyxFQUFJLElBQU0sSUFDMUI0USxFQUFZaEgsS0FBSzBDLElBQUl0TSxHQUd6QixPQUFPb00sRUFGS0YsR0FBZ0J0QyxLQUFLRSxNQUFNOEcsRUFBWSxJQUFLLEdBRWxDRSxFQURSNUUsR0FBZ0IwRSxFQUFZLEdBQUksR0FJaEQsWUNqMkJBLFNBQVNHLEdBQWtCaEosRUFBU3FCLEdBQ2xDLE9BQVFyQixHQUNOLElBQUssSUFDSCxPQUFPcUIsRUFBV2hILEtBQUssQ0FDckI4QixNQUFPLFVBR1gsSUFBSyxLQUNILE9BQU9rRixFQUFXaEgsS0FBSyxDQUNyQjhCLE1BQU8sV0FHWCxJQUFLLE1BQ0gsT0FBT2tGLEVBQVdoSCxLQUFLLENBQ3JCOEIsTUFBTyxTQUlYLFFBQ0UsT0FBT2tGLEVBQVdoSCxLQUFLLENBQ3JCOEIsTUFBTyxVQUtmLFNBQVM4TSxHQUFrQmpKLEVBQVNxQixHQUNsQyxPQUFRckIsR0FDTixJQUFLLElBQ0gsT0FBT3FCLEVBQVd4SSxLQUFLLENBQ3JCc0QsTUFBTyxVQUdYLElBQUssS0FDSCxPQUFPa0YsRUFBV3hJLEtBQUssQ0FDckJzRCxNQUFPLFdBR1gsSUFBSyxNQUNILE9BQU9rRixFQUFXeEksS0FBSyxDQUNyQnNELE1BQU8sU0FJWCxRQUNFLE9BQU9rRixFQUFXeEksS0FBSyxDQUNyQnNELE1BQU8sVUFrRGYsU0FKcUIsQ0FDbkIrTSxFQUFHRCxHQUNIRSxFQTNDRixTQUErQm5KLEVBQVNxQixHQUN0QyxJQVFJK0gsRUFSQTdKLEVBQWNTLEVBQVFSLE1BQU0sY0FBZ0IsR0FDNUM2SixFQUFjOUosRUFBWSxHQUMxQitKLEVBQWMvSixFQUFZLEdBRTlCLElBQUsrSixFQUNILE9BQU9OLEdBQWtCaEosRUFBU3FCLEdBS3BDLE9BQVFnSSxHQUNOLElBQUssSUFDSEQsRUFBaUIvSCxFQUFXekUsU0FBUyxDQUNuQ1QsTUFBTyxVQUVULE1BRUYsSUFBSyxLQUNIaU4sRUFBaUIvSCxFQUFXekUsU0FBUyxDQUNuQ1QsTUFBTyxXQUVULE1BRUYsSUFBSyxNQUNIaU4sRUFBaUIvSCxFQUFXekUsU0FBUyxDQUNuQ1QsTUFBTyxTQUVULE1BR0YsUUFDRWlOLEVBQWlCL0gsRUFBV3pFLFNBQVMsQ0FDbkNULE1BQU8sU0FLYixPQUFPaU4sRUFBZWxJLFFBQVEsV0FBWThILEdBQWtCSyxFQUFhaEksSUFBYUgsUUFBUSxXQUFZK0gsR0FBa0JLLEVBQWFqSSxNQzdFNUgsU0FBU2tJLEdBQWdDbFAsR0FDdEQsSUFBSW1QLEVBQVUsSUFBSTNQLEtBQUtBLEtBQUs0UCxJQUFJcFAsRUFBS0csY0FBZUgsRUFBS0YsV0FBWUUsRUFBS3FQLFVBQVdyUCxFQUFLc1AsV0FBWXRQLEVBQUt1UCxhQUFjdlAsRUFBS3dQLGFBQWN4UCxFQUFLeVAsb0JBRWpKLE9BREFOLEVBQVF4RyxlQUFlM0ksRUFBS0csZUFDckJILEVBQUtQLFVBQVkwUCxFQUFRMVAsVUNkbEMsSUFBSWlRLEdBQTJCLENBQUMsSUFBSyxNQUNqQ0MsR0FBMEIsQ0FBQyxLQUFNLFFBQzlCLFNBQVNDLEdBQTBCakosR0FDeEMsT0FBb0QsSUFBN0MrSSxHQUF5QkcsUUFBUWxKLEdBRW5DLFNBQVNtSixHQUF5Qm5KLEdBQ3ZDLE9BQW1ELElBQTVDZ0osR0FBd0JFLFFBQVFsSixHQUVsQyxTQUFTb0osR0FBb0JwSixFQUFPMUUsRUFBUStOLEdBQ2pELEdBQWMsU0FBVnJKLEVBQ0YsTUFBTSxJQUFJMkMsV0FBVyxxQ0FBcUM3UixPQUFPd0ssRUFBUSwwQ0FBMEN4SyxPQUFPdVksRUFBTyxpQ0FDNUgsR0FBYyxPQUFWckosRUFDVCxNQUFNLElBQUkyQyxXQUFXLGlDQUFpQzdSLE9BQU93SyxFQUFRLDBDQUEwQ3hLLE9BQU91WSxFQUFPLGlDQUN4SCxHQUFjLE1BQVZySixFQUNULE1BQU0sSUFBSTJDLFdBQVcsK0JBQStCN1IsT0FBT3dLLEVBQVEsc0RBQXNEeEssT0FBT3VZLEVBQU8saUNBQ2xJLEdBQWMsT0FBVnJKLEVBQ1QsTUFBTSxJQUFJMkMsV0FBVyxpQ0FBaUM3UixPQUFPd0ssRUFBUSxzREFBc0R4SyxPQUFPdVksRUFBTyxpQ0NLN0ksSUFBSUMsR0FBeUIsd0RBR3pCQyxHQUE2QixvQ0FDN0JDLEdBQXNCLGVBQ3RCQyxHQUFvQixNQUNwQkMsR0FBZ0MsV0FtWnBDLFNBQVNDLEdBQW1CTixHQUMxQixPQUFPQSxFQUFNN0ssTUFBTWdMLElBQXFCLEdBQUd0SixRQUFRdUosR0FBbUIsS0N2WnpELFNBQVNHLEdBQVd4USxHQUNqQ2hCLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWdDLEVBQU9kLEVBQU9hLEdBQ2R5SSxFQUFPeEksRUFBS0csY0FDaEIsT0FBT3FJLEVBQU8sS0FBUSxHQUFLQSxFQUFPLEdBQU0sR0FBS0EsRUFBTyxLQUFRLEVDeEI5RCxTQUFTZ0ksR0FBSUMsRUFBUXpVLEdBQ25CLE9BQU95VSxHQUNMLEtBQUssRUFDSCxPQUFPblYsU0FBU1csY0FBY0QsR0FDaEMsS0FBSyxFQUNILE9BQU9WLFNBQVNDLGNBQWNTLEdBQ2hDLEtBQUssRUFDSCxPQUFPVixTQUFTb1YsaUJBQWlCMVUsSUFJdkMsU0FBUyxHQUFNQSxFQUFTMlUsRUFBVTlSLEdBQ2hDN0MsRUFBUWIsTUFBTXdWLEdBQVk5UixFQUc1QixTQUFTK1IsR0FBYUMsRUFBTUMsR0FDMUIsSUFBSyxJQUFJbFosRUFBSSxFQUFHQSxHQUFLaVosRUFBTWpaLElBQUssQ0FFOUIsSUFBSXVNLEVBQU1xTSxHQUFJLEVBQUcsT0FDakJyTSxFQUFJNE0sVUFBVUMsSUFBSSxPQUVsQixJQUFJN1MsRUFBT3FTLEdBQUksRUFBRyxLQUNsQnJTLEVBQUs4UyxZQUFjclosRUFFbkJ1TSxFQUFJcEksWUFBWW9DLEdBQ2hCMlMsRUFBTy9VLFlBQVlvSSxJQWlKdkIsTUNuS0EsR0FYQSxTQUFhc00sRUFBUXpVLEdBQ25CLE9BQU95VSxHQUNMLElBQUssU0FDSCxPQUFPblYsU0FBU1csY0FBY0QsR0FDaEMsSUFBSyxZQUNILE9BQU9WLFNBQVNDLGNBQWNTLEdBQ2hDLElBQUssWUFDSCxPQUFPVixTQUFTb1YsaUJBQWlCMVUsS0NLakNrVixHQUFPLE1BRVgsTUFBTUMsRUFBVyxHQXFEWEMsRUFBOEJoVCxJQUNsQyxNQUFNUSxFQUFRUixFQUFRUSxNQUNELElBQWpCQSxFQUFNbEgsUUFDVmtILEVBQU12RSxPQUFPLEVBQUd1RSxFQUFNbEgsT0FBTyxJQWN6QjJaLEVBQVcsQ0FDZkMsY0FBZ0JoVyxTQUFTQyxjQUFjLGdCQUN2Q2dXLE1BQWdCalcsU0FBU0MsY0FBYyx1QkFDdkNpVyxVQUFnQmxXLFNBQVNDLGNBQWMscUJBMEJuQ2tXLEVBQWEsQ0FDakJDLFVBQVcsQ0FBQ0MsT0FBUyxDQUFFeFYsWUFBWSxFQUFNeVYsV0FBVyxFQUFNQyxTQUFTLElBQ25FVixTQUFVQSxFQUVWVyxLQUFPQyxJQUNMLEdBQXdCLElBQXBCWixFQUFTelosT0FDYixPQUFPeVosRUFBU2EsUUFBTyxDQUFFNVQsRUFBU3ZELEtBQ2hDLElBQUssTUFBTW9YLEtBQVE3VCxFQUFlNlQsRUFBSzVULFVBQVltQixLQUFLYSxPQUFPWCxRQUFRd1MsSUFBSSxjQWFqRixPQVJBVCxFQUFXQyxVQUFVRixVQUFZLElBQUlXLGtCQUFpQixDQUFDQyxFQUFjQyxNQWxDM0MsU0FBU2xCLEdBRS9CLElBQUssTUFBTS9TLEtBQVcrUyxFQUNwQixJQUFLLE1BQU1tQixLQUFlakIsRUFBU0UsTUFBTWdCLFNBRXZDLEdBQUluVSxFQUFRckgsS0FBT3ViLEVBQVl2YixHQUFJLENBQ2pDLEdBQTZCLElBQXpCcUgsRUFBUVEsTUFBTWxILE9BQWMsT0FBTzRhLEVBQVlDLFNBQVMsR0FBR3RCLFlBQWMsR0FDN0VxQixFQUFZQyxTQUFTLEdBQUd0QixZQUFjN1MsRUFBUVEsTUFBTWxILFNBNEI1RDhhLENBQTRCckIsR0F0QlAsU0FBU0EsR0FDNUIsSUFBSyxNQUFNL1MsS0FBVytTLEVBQ3BCLEdBQTZCLElBQXpCL1MsRUFBUVEsTUFBTWxILE9BQWUsT0FBTzJaLEVBQVNDLGNBQWNQLFVBQVVDLElBQUksVUFFL0VLLEVBQVNDLGNBQWNQLFVBQVVyVyxPQUFPLFVBbUIxQzhYLENBQXlCckIsTUFHM0JNLEVBQVdDLFVBQVVGLFVBQVVpQixRQUFRcEIsRUFBU0csVUFBV0MsRUFBV0MsVUFBVUMsUUFHekUsQ0FFTFIsU0FBQUEsRUFDQXVCLGVBeEhxQixDQUFDQyxFQUFjbEMsS0FDcEMsSUFBSyxNQUFNclMsS0FBVytTLEVBRXBCL1MsRUFBUVEsTUFBTWdVLFNBQVEsQ0FBQ1gsRUFBTXBYLEtBRTNCLE9BQU80VixHQUNMLElBQUssTUFDQ3dCLEVBQUtsYixLQUFPNGIsRUFBYTViLElBQUlxSCxFQUFRUSxNQUFNL0gsS0FBS29iLEdBQ3BELE1BRUYsSUFBSyxTQUNDQSxFQUFLbGIsS0FBTzRiLEVBQWE1YixJQUFJcUgsRUFBUVEsTUFBTXZFLE9BQU9RLEVBQU8sUUErR3JFZ1ksZ0JBeEdzQixDQUFDQyxFQUFhM0IsS0FDcEMsSUFBSyxJQUFJL1MsS0FBVytTLEVBQ2xCLEdBQUkyQixJQUFnQjFVLEVBQVFELEtBQU0sT0FBT0MsRUFHM0MsT0FBTyxFQUFlMFUsSUFvR3RCQyxrQkFqR3dCLENBQUNkLEVBQU03VCxLQUMvQkEsRUFBUVEsTUFBTS9ILEtBQUtvYixHQUNuQkEsRUFBS2UsVUFBWTVVLEVBQVFySCxJQWdHekJrYyx1QkFuRTZCLENBQUNDLEVBQWlCL0IsS0FDdkIsSUFBcEJBLEVBQVN6WixRQUVieVosRUFBU3lCLFNBQVEsQ0FBQ3hVLEVBQVN2RCxLQUNyQnFZLEVBQWdCbmMsS0FBT3FILEVBQVFySCxLQUNqQ3FhLEVBQTJCaFQsR0FDM0IrUyxFQUFTOVcsT0FBT1EsUUE4RHBCdVcsMkJBQUFBLEVBQ0ErQiwyQkEvRWlDLENBQUMvVSxFQUFTK1MsTUFDUixJQWhCckIsRUFBQ2lDLEVBQWFsYyxLQUM1QixJQUFJbWMsR0FBUyxFQVdiLE9BVEFuYyxFQUFLMGIsU0FBUXRiLElBRVgsR0FBSThiLEVBQVlyYyxLQUFPTyxFQUFLUCxHQUcxQixPQUZBMkksUUFBUXdTLElBQUlrQixFQUFZcmMsR0FBSU8sRUFBS1AsU0FDakNzYyxHQUFTLE1BS05BLEdBSUhDLENBQVFsVixFQUFTK1MsSUFBcUJBLEVBQVN0YSxLQUFLdUgsTUFwRC9DLEdBdUliLElBQUkrTyxHQUFJLFNBQ0pvRyxHQUFLLFlBSVQsTUFBTS9CLEdBQVksR0FBSStCLEdBQUksb0JBRUhqWSxTQUFTb1YsaUJBQWlCLFlBRWxDa0MsU0FBUVksSUFDckJBLEVBQUlDLGlCQUFpQixRQUFTQyxPQU1oQyxNQUFNQyxHQUFZclksU0FBU0MsY0FBYyxVQUduQ3FZLEdBQVF0WSxTQUFTQyxjQUFjLGNBQWNnWCxTQUFTLEdBQ3REc0IsR0FBVXZZLFNBQVNDLGNBQWMsZ0JBQWdCZ1gsU0FBUyxHQUMxRHVCLEdBQVN4WSxTQUFTQyxjQUFjLGVBQWVnWCxTQUFTLEdBRTlEcUIsR0FBTTNDLFlBQWdCLE1BQ3RCNEMsR0FBUTVDLFlBQWMsUUFDdEI2QyxHQUFPN0MsWUFBZSxPQUd0QixJQUFJOEMsR0FBb0IsR0FHeEIsTUFBTUMsR0ZqSk4sV0FHRSxNQUFNQyxFQUFZekQsR0FBSSxFQUFHLE9BQ3pCeUQsRUFBVWxELFVBQVVDLElBQUksWUFFeEIsR0FBTWlELEVBQVcsVUFBVyxRQUM1QixHQUFNQSxFQUFXLGNBQWUsVUFFaEMsTUFBTUMsRUFBWSxHQUdsQixJQUFJLElBQUl0YyxFQUFJLEVBQUdBLEdBQUssR0FBSUEsSUFBSyxDQUMzQixJQUFJdUcsRUFHQThCLEVBQVF1USxHQUFJLEVBQUcsT0FDbkJ2USxFQUFNOFEsVUFBVUMsSUFBSSxrQkFHcEIsSUFBSW1ELEVBQUszRCxHQUFJLEVBQUcsTUFHWkssRUFBT0wsR0FBSSxFQUFHLE9BR2xCLE9BRkFLLEVBQUtFLFVBQVVDLElBQUksaUJBRVpwWixHQUNMLEtBQUssRUFDSHVHLEVBQU8sVUFDUHlTLEdBQWEsR0FBSUMsR0FDakIsTUFDRixLQUFLLEVBQ0gxUyxFQUFPLFdBQ1BvUyxHQUFZL1EsS0FBS2EsT0FBVXVRLEdBQWEsR0FBSUMsR0FBUUQsR0FBYSxHQUFJQyxHQUNyRSxNQUNGLEtBQUssRUFDSDFTLEVBQU8sUUFDUHlTLEdBQWEsR0FBSUMsR0FDakIsTUFDRixLQUFLLEVBQ0gxUyxFQUFPLFFBQ1B5UyxHQUFhLEdBQUlDLEdBQ2pCLE1BQ0YsS0FBSyxFQUNIMVMsRUFBTyxNQUNQeVMsR0FBYSxHQUFJQyxHQUNqQixNQUNGLEtBQUssRUFDSDFTLEVBQU8sT0FDUHlTLEdBQWEsR0FBSUMsR0FDakIsTUFDRixLQUFLLEVBQ0gxUyxFQUFPLE9BQ1B5UyxHQUFhLEdBQUlDLEdBQ2pCLE1BQ0YsS0FBSyxFQUNIMVMsRUFBTyxTQUNQeVMsR0FBYSxHQUFJQyxHQUNqQixNQUNGLEtBQUssRUFDSDFTLEVBQU8sWUFDUHlTLEdBQWEsR0FBSUMsR0FDakIsTUFDRixLQUFLLEdBQ0gxUyxFQUFPLFVBQ1B5UyxHQUFhLEdBQUlDLEdBQ2pCLE1BQ0YsS0FBSyxHQUNIMVMsRUFBTyxXQUNQeVMsR0FBYSxHQUFJQyxHQUNqQixNQUNGLEtBQUssR0FDSDFTLEVBQU8sV0FDUHlTLEdBQWEsR0FBSUMsR0FLckJzRCxFQUFHbEQsWUFBYzlTLEVBRWpCOEIsRUFBTWxFLFlBQVlvWSxHQUNsQmxVLEVBQU1sRSxZQUFZOFUsR0FFbEI1USxFQUFNbEosR0FBS2EsRUFDWHFJLEVBQU04USxVQUFVQyxJQUFJN1MsR0FDcEI4QixFQUFNOFEsVUFBVUMsSUFBSSxTQUNwQmlELEVBQVVsWSxZQUFZa0UsR0FHbEJRLE9BQU9SLEVBQU1sSixNQUFRK0ksRUFBVU4sS0FBS2EsT0FBUSxHQUM5QyxHQUFNSixFQUFPLGFBQWMsVUFJN0IsR0FBTUEsRUFBTyxRQUFTLE9BQ3RCLEdBQU1BLEVBQU8sU0FBVSxRQUN2QixHQUFNNFEsRUFBTSxVQUFXLFFBQ3ZCLEdBQU01USxFQUFPLFlBQWEsVUFDMUIsR0FBTUEsRUFBTyxXQUFZLFlBQ3pCLEdBQU1BLEVBQU8sa0JBQW1CLFNBQ2hDLEdBQU1BLEVBQU8sZUFBZ0IsVUFDN0IsR0FBTTRRLEVBQU0sd0JBQXlCLGtCQUVyQ3FELEVBQVVyZCxLQUFLb0osR0FFakIsR0FBTWdVLEVBQVcsV0FBWSxZQUU3QixNQUFNRyxFQUFXNUQsR0FBSSxFQUFHLFVBQ3hCNEQsRUFBU0MsS0FBTyxTQUNoQkQsRUFBU3JELFVBQVVDLElBQUksc0JBQ3ZCb0QsRUFBU25ELFlBQWMsUUFDdkJnRCxFQUFVbFksWUFBWXFZLEdBT3RCLE1BQU1FLEVBQVU5RCxHQUFJLEVBQUcsS0FDdkI4RCxFQUFRdkQsVUFBVUMsSUFBSSxPQUN0QnNELEVBQVF2RCxVQUFVQyxJQUFJLDBCQUV0QixNQUFNdUQsRUFBVy9ELEdBQUksRUFBRyxLQWdCeEIsT0FmQStELEVBQVN4RCxVQUFVQyxJQUFJLE9BQ3ZCdUQsRUFBU3hELFVBQVVDLElBQUksMkJBRXZCaUQsRUFBVWxZLFlBQVl1WSxHQUN0QkwsRUFBVWxZLFlBQVl3WSxHQUV0QixHQUFNRCxFQUFTLFdBQVksWUFDM0IsR0FBTUMsRUFBVSxXQUFZLFlBRTVCLEdBQU1ELEVBQVMsV0FBWSxRQUMzQixHQUFNQyxFQUFVLFdBQVksUUFFNUIsR0FBTUQsRUFBUyxjQUFlLFdBQzlCLEdBQU1DLEVBQVUsZUFBZ0IsV0FFekIsQ0FBRU4sVUFBQUEsRUFBV0ssUUFBQUEsRUFBU0MsU0FBQUEsRUFBVUgsU0FBQUEsR0VPeEIsR0FDakI5WSxTQUFTQyxjQUFjLG1CQUFtQlEsWUFBWWlZLEdBQVNDLFdBRy9ERCxHQUFTTSxRQUFRRSxRQUFRM1osTUFBUWlGLEVBQVVOLEtBQUthLE9BQVEsRUFFeEQyVCxHQUFTTSxRQUFRYixpQkFBaUIsU0FBUyxLQUV6Q08sR0FBU00sUUFBUUUsUUFBUTNaLE1BQVE0RixPQUFPdVQsR0FBU00sUUFBUUUsUUFBUTNaLE9BQ2pFbVosR0FBU08sU0FBU0MsUUFBUTNaLE1BQVE0RixPQUFPdVQsR0FBU08sU0FBU0MsUUFBUTNaLE9BRW5FbVosR0FBU00sUUFBUUUsUUFBUTNaLFFBQ3pCbVosR0FBU08sU0FBU0MsUUFBUTNaLFFBRXRCNEYsT0FBT3VULEdBQVNNLFFBQVFFLFFBQVEzWixRQUFVLElBQzVDbVosR0FBU00sUUFBUUUsUUFBUTNaLE1BQVMsR0FDbENtWixHQUFTTyxTQUFTQyxRQUFRM1osTUFBUSxJQUdwQyxJQUFJLElBQUlvRixLQUFTK1QsR0FBU0MsVUFBVTFCLFNBQ2xDN1MsUUFBUStVLElBQUl4VSxHQUVVLFFBQWxCQSxFQUFNeVUsVUFFSmpVLE9BQU91VCxHQUFTTSxRQUFRRSxRQUFRM1osU0FBVzRGLE9BQU9SLEVBQU1sSixLQUMxRGtKLEVBQU05RSxNQUFNd1osV0FBYSxVQUN6QlosR0FBb0I5VCxHQUdwQkEsRUFBTTlFLE1BQU13WixXQUFhLGFBT2pDWCxHQUFTTyxTQUFTQyxRQUFRM1osTUFBUWlGLEVBQVVOLEtBQUthLE9BQVEsRUFFekQyVCxHQUFTTyxTQUFTZCxpQkFBaUIsU0FBUyxLQUUxQ08sR0FBU08sU0FBU0MsUUFBUTNaLE1BQVE0RixPQUFPdVQsR0FBU08sU0FBU0MsUUFBUTNaLE9BQ25FbVosR0FBU00sUUFBUUUsUUFBUTNaLE1BQVE0RixPQUFPdVQsR0FBU00sUUFBUUUsUUFBUTNaLE9BRWpFbVosR0FBU08sU0FBU0MsUUFBUTNaLFFBQzFCbVosR0FBU00sUUFBUUUsUUFBUTNaLFFBRXJCNEYsT0FBT3VULEdBQVNPLFNBQVNDLFFBQVEzWixRQUFVLEtBQzdDbVosR0FBU08sU0FBU0MsUUFBUTNaLE1BQVEsRUFDbENtWixHQUFTTSxRQUFRRSxRQUFRM1osTUFBUyxHQUdwQyxJQUFJLElBQUlvRixLQUFTK1QsR0FBU0MsVUFBVTFCLFNBQ2xDN1MsUUFBUStVLElBQUl4VSxHQUVVLFFBQWxCQSxFQUFNeVUsVUFFSmpVLE9BQU91VCxHQUFTTyxTQUFTQyxRQUFRM1osU0FBVzRGLE9BQU9SLEVBQU1sSixLQUMzRGtKLEVBQU05RSxNQUFNd1osV0FBYSxVQUN6QlosR0FBb0I5VCxHQUdwQkEsRUFBTTlFLE1BQU13WixXQUFhLGFBT1pYLEdBQVNDLFVBQVVXLFdBQzNCaEMsU0FBUTNTLElBQ0csUUFBbEJBLEVBQU15VSxTQUNSelUsRUFBTXNTLFNBQVMsR0FBR3FDLFdBQVdoQyxTQUFRek8sR0FBT0EsRUFBSXNQLGlCQUFpQixTQUFVN1gsS0FNL0UsU0FBd0J1SSxFQUFLbEUsR0FDM0IyVCxHQUFNM0MsWUFBYzlNLEVBQUkvSSxPQUFPNlYsWUFDL0I0QyxHQUFRNUMsWUFBY2hSLEVBQU1sSixHQUVELFNBQXZCK2MsR0FBTzdDLGNBQXdCNkMsR0FBTzdDLFlBQWMvUSxFQUFTVixLQUFLYSxRQVRsRXdVLENBQWVqWixFQUFHcUUsV0FZRixHQUFJc1QsR0FBSSx1QkFDaEJFLGlCQUFpQixTQUFTLEtBRVosS0FBdEJNLEtBQ0ZBLEdBQWtCNVksTUFBTXdaLFdBQWEsVUFHdkNuTSxHQUFLc00sUUFDTGQsR0FBU0MsVUFBVTlZLE1BQU13WixXQUFhLFlBS3hDLE1BQU1JLEdBQVN6WixTQUFTQyxjQUFjLGdCQUNoQ3laLEdBQVMxWixTQUFTQyxjQUFjLGtCQXFCdEMsU0FBU21ZLEdBQWE5WCxHQUVwQitYLEdBQVVzQixZQVVWLE1BQU1DLEVBQVUsSUFFVkMsRUFBTzdaLFNBQVNDLGNBQWMsUUFDOUI2WixFQUFTRCxFQUFLOUQsU0FDZGdFLEVBQVkvWixTQUFTb1YsaUJBQWlCLGtCQUN0QzRFLEVBQWNoYSxTQUFTQyxjQUFjLFdBVTNDLFNBQVNnYSxFQUFZM1osR0FDbkJBLEVBQUU0WixpQkFFRk4sRUFBUS9XLEtBQU9pWCxFQUFhLEtBQUV2VyxNQUM5QnFXLEVBQVE5VyxRQUFVZ1gsRUFBZ0IsUUFBRXZXLE1BRVosS0FBcEJxVyxFQUFROVcsVUFBZ0I4VyxFQUFROVcsUUFBVSxRQUc5QyxNQUFNQSxFQUFVOFMsR0FBSzJCLGdCQUFnQnFDLEVBQVE5VyxRQUFTOFMsR0FBS0MsVUFDM0RELEdBQUs2QixrQkFBa0JtQyxFQUFTOVcsR0FJaEM4VyxFQUFRNVcsYUFBZWtCLEtBQUthLE1BRTVCLE1BQU1vVixFQUFTLENBQUVoVixPQUFPbVQsR0FBTTNDLGFBQWN4USxPQUFPUixHQUFNZ1IsYUFBY3hRLE9BQU9xVCxHQUFPN0MsY0FFckZ3RSxFQUFPN0MsU0FBUzVTLElBQ1RRLE1BQU1SLEdBQVFrVixFQUFRN1csUUFBVSxHQUNoQzZXLEVBQVE3VyxRQUFVLElBQUltQixLQUFNaVcsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sT0FJaEUvVixRQUFRZ1csTUFBTVIsRUFBUTdXLFFBQVM2VyxFQUFRNVcsY0FDdkMsTUFBTXFFLEVBQVF2QyxFQUFTOFUsRUFBUTdXLFNBQ3pCc1gsRUFBV3ZWLEVBQVM4VSxFQUFRNVcsY0FFbENvQixRQUFRd1MsSUFBSXZQLEVBQU9nVCxHQUVuQlQsRUFBUTFXLEtBQU80VyxFQUFhLEtBQUV2VyxNQUM5QnFXLEVBQVF2VyxRQUFVeVcsRUFBZ0IsUUFBRXZXLE1BRXBDLElBQUkrVyxFQUFZMUUsR0FBS0MsU0FBU3paLE9BRTlCd1osR0FBS2lDLDJCQUEyQi9VLEVBQVM4UyxHQUFLQyxVQUUxQ3lFLElBQWMxRSxHQUFLQyxTQUFTelosUUE2VnBDLFNBQWUwRyxHQUViLE1BQU15WCxFQUFjLEdBQUkxSSxHQUFHLE1BQzNCMEksRUFBWTllLEdBQUtxSCxFQUFRckgsR0FDekI4ZSxFQUFZOUUsVUFBVUMsSUFBSSxXQUd4QixNQUFNOEUsRUFBYyxHQUFJM0ksR0FBRyxPQUMzQjJJLEVBQVkvRSxVQUFVQyxJQUFJLGdCQUd4QixNQUFNK0UsRUFBYyxHQUFJNUksR0FBRyxLQUMzQjRJLEVBQVloRixVQUFVQyxJQUFJLE9BQzFCK0UsRUFBWWhGLFVBQVVDLElBQUksYUFDMUIrRSxFQUFZaEYsVUFBVUMsSUFBSSxnQkFFMUI4RSxFQUFZL1osWUFBWWdhLEdBR3hCLE1BQU1qRCxFQUFjLEdBQUkzRixHQUFHLEtBQzNCMkYsRUFBWS9CLFVBQVVDLElBQUksZ0JBQzFCOEIsRUFBWTdCLFlBQWM3UyxFQUFRRCxLQUNsQzJYLEVBQVkvWixZQUFZK1csR0FFMUIrQyxFQUFZOVosWUFBWStaLEdBRXhCLE1BQU1FLEVBQVksR0FBSTdJLEdBQUcsS0FDekI2SSxFQUFVakYsVUFBVUMsSUFBSSxzQkFDeEJnRixFQUFVL0UsWUFBYzdTLEVBQVFRLE1BQU1sSCxPQUN0Q21lLEVBQVk5WixZQUFZaWEsR0FFeEJDLEdBQWdCbGEsWUFBWThaLEdBMVgxQkssQ0FBTTlYLEdBT1IsTUFBTStYLEVBcU9WLFNBQWNsRSxHQUNaLE1BQU1tRSxFQUFXLEdBQUlqSixHQUFHLE1BQ3hCaUosRUFBU3JmLEdBQUtrYixFQUFLbGIsR0FDbkJxZixFQUFTNUIsUUFBUXBXLFFBQVU2VCxFQUFLZSxVQUNoQ29ELEVBQVNyRixVQUFVQyxJQUFJLGFBRXZCLE1BQU1xRixFQUFRLEdBQUlsSixHQUFHLEtBQ3JCa0osRUFBTXRGLFVBQVVDLElBQUksT0FDcEJxRixFQUFNdEYsVUFBVUMsSUFBSSxXQUNwQnFGLEVBQU10RixVQUFVQyxJQUFJLGlCQUNwQnFGLEVBQU1sYixNQUFNbWIsTUFBUXJFLEVBQUt2VCxhQUN6QjBYLEVBQVNyYSxZQUFZc2EsR0FFckIsTUFBTUUsRUFBYyxHQUFJcEosR0FBRyxPQUMzQm9KLEVBQVl4RixVQUFVQyxJQUFJLGFBRTFCLE1BQU13RixFQUFVLEdBQUlySixHQUFHLE1BQ3ZCcUosRUFBUXpGLFVBQVVDLElBQUksZ0JBQ3RCd0YsRUFBUXZGLFlBQWNnQixFQUFLOVQsS0FDM0JvWSxFQUFZeGEsWUFBWXlhLEdBR3hCLE1BQU1DLEVBQVcsR0FBSXRKLEdBQUcsTUFDeEJzSixFQUFTMUYsVUFBVUMsSUFBSSxnQkFDdkJ1RixFQUFZeGEsWUFBWTBhLEdBR3hCLE1BQU1DLEVBQVcsR0FBSXZKLEdBQUcsTUFDeEJ1SixFQUFTM0YsVUFBVUMsSUFBSSxhQUV2QixNQUFNMkYsRUFBUSxHQUFJeEosR0FBRyxLQUNyQndKLEVBQU01RixVQUFVQyxJQUFJLE9BQ3BCMkYsRUFBTTVGLFVBQVVDLElBQUksWUFDcEIyRixFQUFNNUYsVUFBVUMsSUFBSSxrQkFDcEIwRixFQUFTM2EsWUFBWTRhLEdBRXJCLE1BQU1DLEVBQVEsR0FBSXpKLEdBQUcsS0FDckJ5SixFQUFNN0YsVUFBVUMsSUFBSSxrQkFDcEI0RixFQUFNM0YsWUFBYyxHQUFHZ0IsRUFBS3pULFVBQzVCa1ksRUFBUzNhLFlBQVk2YSxHQUVyQkgsRUFBUzFhLFlBQVkyYSxHQUdyQixNQUFNRyxFQUFXLEdBQUkxSixHQUFHLE1BQ3hCMEosRUFBUzlGLFVBQVVDLElBQUksYUFFdkIsTUFBTThGLEVBQVEsR0FBSTNKLEdBQUcsS0FDckIySixFQUFNL0YsVUFBVUMsSUFBSSxPQUNwQjhGLEVBQU0vRixVQUFVQyxJQUFJLFVBQ3BCOEYsRUFBTS9GLFVBQVVDLElBQUksa0JBQ3BCNkYsRUFBUzlhLFlBQVkrYSxHQUVyQixNQUFNQyxFQUFRLEdBQUk1SixHQUFHLEtBQ3JCNEosRUFBTWhHLFVBQVVDLElBQUksa0JBRUgsS0FBakJpQixFQUFLNVQsUUFBaUIwWSxFQUFNOUYsWUozVGYsU0FBZ0JsUixFQUFXaVgsRUFBZ0JoVSxHQUN4RGpFLEVBQWEsRUFBR2YsV0FDaEIsSUFBSWlaLEVBQVlsVixPQUFPaVYsR0FDbkJ4ZCxFQUFVd0osR0FBZ0IsR0FDMUJtRyxFQUFTM1AsRUFBUTJQLFFBQVUsRUFDM0JLLEVBQThCTCxFQUFPM1AsU0FBVzJQLEVBQU8zUCxRQUFROE4sc0JBQy9EbUMsRUFBOEQsTUFBL0JELEVBQXNDLEVBQUlqQyxFQUFVaUMsR0FDbkZsQyxFQUF5RCxNQUFqQzlOLEVBQVE4TixzQkFBZ0NtQyxFQUErQmxDLEVBQVUvTixFQUFROE4sdUJBRXJILEtBQU1BLEdBQXlCLEdBQUtBLEdBQXlCLEdBQzNELE1BQU0sSUFBSWdDLFdBQVcsNkRBR3ZCLElBQUlGLEVBQXFCRCxFQUFPM1AsU0FBVzJQLEVBQU8zUCxRQUFRNk4sYUFDdERnQyxFQUE0QyxNQUF0QkQsRUFBNkIsRUFBSTdCLEVBQVU2QixHQUNqRS9CLEVBQXVDLE1BQXhCN04sRUFBUTZOLGFBQXVCZ0MsRUFBc0I5QixFQUFVL04sRUFBUTZOLGNBRTFGLEtBQU1BLEdBQWdCLEdBQUtBLEdBQWdCLEdBQ3pDLE1BQU0sSUFBSWlDLFdBQVcsb0RBR3ZCLElBQUtILEVBQU8vQixTQUNWLE1BQU0sSUFBSWtDLFdBQVcseUNBR3ZCLElBQUtILEVBQU9uQyxXQUNWLE1BQU0sSUFBSXNDLFdBQVcsMkNBR3ZCLElBQUkrRSxFQUFlblAsRUFBT2EsR0FFMUIsSUFBS1EsRUFBUThOLEdBQ1gsTUFBTSxJQUFJL0UsV0FBVyxzQkFNdkIsSUFBSXFFLEVBQWlCdUIsR0FBZ0NiLEdBQ2pEYyxFQUFVcEgsRUFBZ0JzRyxFQUFjVixHQUN4Q3VKLEVBQW1CLENBQ3JCNVAsc0JBQXVCQSxFQUN2QkQsYUFBY0EsRUFDZDhCLE9BQVFBLEVBQ1J5RSxjQUFlUyxHQTJDakIsT0F6Q2E0SSxFQUFVOVIsTUFBTStLLElBQTRCN1ksS0FBSSxTQUFVOGYsR0FDckUsSUFBSUMsRUFBaUJELEVBQVUsR0FFL0IsTUFBdUIsTUFBbkJDLEdBQTZDLE1BQW5CQSxHQUVyQkMsRUFEYSxHQUFlRCxJQUNkRCxFQUFXaE8sRUFBT25DLFdBQVlrUSxHQUc5Q0MsS0FDTnhmLEtBQUssSUFBSXdOLE1BQU04SyxJQUF3QjVZLEtBQUksU0FBVThmLEdBRXRELEdBQWtCLE9BQWRBLEVBQ0YsTUFBTyxJQUdULElBQUlDLEVBQWlCRCxFQUFVLEdBRS9CLEdBQXVCLE1BQW5CQyxFQUNGLE9BQU85RyxHQUFtQjZHLEdBRzVCLElBQUlHLEVBQVksR0FBV0YsR0FFM0IsR0FBSUUsRUFTRixPQVJLOWQsRUFBUStkLDZCQUErQnpILEdBQXlCcUgsSUFDbkVwSCxHQUFvQm9ILEVBQVdILEVBQWdCalgsSUFHNUN2RyxFQUFRZ2UsOEJBQWdDNUgsR0FBMEJ1SCxJQUNyRXBILEdBQW9Cb0gsRUFBV0gsRUFBZ0JqWCxHQUcxQ3VYLEVBQVVuSSxFQUFTZ0ksRUFBV2hPLEVBQU8vQixTQUFVOFAsR0FHeEQsR0FBSUUsRUFBZWpTLE1BQU1rTCxJQUN2QixNQUFNLElBQUkvRyxXQUFXLGlFQUFtRThOLEVBQWlCLEtBRzNHLE9BQU9ELEtBQ054ZixLQUFLLElJcU9rQ3NLLENBQU9nUSxFQUFLNVQsUUFBUyxjQUFpQjBZLEVBQU05RixZQUFjLEdBRXBHNEYsRUFBUzlhLFlBQVlnYixHQUVyQk4sRUFBUzFhLFlBQVk4YSxHQUdyQixNQUFNaEIsRUFBYyxHQUFJMUksR0FBRyxNQUMzQjBJLEVBQVk5RSxVQUFVQyxJQUFJLGdCQUMxQjZFLEVBQVkxYSxNQUFNMkcsTUFBUSxNQUUxQixNQUFNMlYsRUFBVyxHQUFJdEssR0FBRyxLQUN4QnNLLEVBQVMxRyxVQUFVQyxJQUFJLHFCQUN2QnlHLEVBQVN4RyxZQUFjZ0IsRUFBSzdULFFBQzVCeVgsRUFBWTlaLFlBQVkwYixHQUV4QixNQUFNQyxFQUFXLEdBQUl2SyxHQUFHLEtBQ3hCdUssRUFBUzNHLFVBQVVDLElBQUksT0FDdkIwRyxFQUFTM0csVUFBVUMsSUFBSSxhQUN2QjBHLEVBQVMzRyxVQUFVQyxJQUFJLHFCQUN2QjZFLEVBQVk5WixZQUFZMmIsR0FDeEJqQixFQUFTMWEsWUFBWThaLEdBS3JCLE1BQU04QixFQUFhLEdBQUl4SyxHQUFHLE1BQzFCd0ssRUFBVzVHLFVBQVVDLElBQUksZUFFekIsTUFBTTRHLEVBQVUsR0FBSXpLLEdBQUcsS0FxQnZCLE9BcEJBeUssRUFBUTdHLFVBQVVDLElBQUksT0FDdEI0RyxFQUFRN0csVUFBVUMsSUFBSSxnQkFDdEIwRyxFQUFTM0csVUFBVUMsSUFBSSxvQkFDdkIyRyxFQUFXNWIsWUFBWTZiLEdBQ3ZCbkIsRUFBUzFhLFlBQVk0YixHQUVyQmpZLFFBQVF3UyxJQUFJLFlBQVlrRSxFQUFTcmYsTUFFakM2Z0IsRUFBUW5FLGlCQUFpQixTQUFTLEtBQ2hDMkMsRUFBU3JGLFVBQVVDLElBQUksZUFFdkI2RyxZQUFXLEtBQ1QzRyxHQUFLd0IsZUFBZVQsRUFBTSxVQUUxQm1FLEVBQVMxYixXQUNSLFNBR0wwYixFQUFTcmEsWUFBWXdhLEdBRWRILEVBL1VlMEIsQ0FBSzVDLEdBQ3pCMUQsR0FBVXpWLFlBQVlvYSxHQUV0QnhDLEdBQVVvRSxRQUdWNUMsRUFBSzZDLG9CQUFvQixTQUFVekMsR0FFbkNGLEVBQVV6QyxTQUFRcUYsSUFDaEJBLEVBQUtELG9CQUFvQixRQUFTRSxNQUdwQzVDLEVBQVkwQyxvQkFBb0IsUUFBU0csR0FHM0MsU0FBU0QsRUFBWXRjLEdBQ25Cc1osRUFBUXhXLGFBQWUwWixpQkFBaUJ4YyxFQUFFUixRQUFRa2IsTUFDbEQxYSxFQUFFUixPQUFPc0IsV0FBV0EsV0FBV0EsV0FBV3ZCLE1BQU1tYixNQUFRcEIsRUFBUXhXLGFBRWhFLElBQUksSUFBSTJaLEtBQVF6YyxFQUFFUixPQUFPc0IsV0FBV0EsV0FBVzZWLFNBQzdDOEYsRUFBSzlGLFNBQVMsR0FBR3hCLFVBQVV1SCxPQUFPLDRCQUl0QyxTQUFTSCxFQUFhdmMsR0FDcEJBLEVBQUU0WixpQkFFRjdCLEdBQVVvRSxRQUdWLElBQUssSUFBSXBILEtBQVl1RSxTQUFrQkEsRUFBUXZFLEdBRS9Dd0UsRUFBSzZDLG9CQUFvQixTQUFVekMsR0FFbkNGLEVBQVV6QyxTQUFRcUYsSUFDaEJBLEVBQUtELG9CQUFvQixRQUFTRSxNQUdwQzVDLEVBQVkwQyxvQkFBb0IsUUFBU0csR0E1RjNDaEQsRUFBSzFCLGlCQUFpQixTQUFVOEIsR0FFaENGLEVBQVV6QyxTQUFRcUYsSUFDaEJBLEVBQUt4RSxpQkFBaUIsUUFBU3lFLE1BR2pDNUMsRUFBWTdCLGlCQUFpQixRQUFTMEUsR0E1Q3hDcEQsR0FBT3RCLGlCQUFpQixTQUFVN1gsSUFDaEMsR0FBMkIsU0FBdkJrWSxHQUFPN0MsWUFBd0IsT0FBTzZDLEdBQU83QyxZQUFjL1EsRUFBU1YsS0FBS2EsT0FFN0UsSUFBSWtZLEVBQVk5WCxPQUFPcVQsR0FBTzdDLGFBQzlCc0gsSUFDQXpFLEdBQU83QyxZQUFjc0gsRUFFTyxRQUF4QjNFLEdBQU0zQyxjQUF5QjJDLEdBQU0zQyxZQ3JRNUIsU0FBZ0JsUixHQUk3QixPQUhBaEIsRUFBYSxFQUFHZixXQUNMa0IsRUFBT2EsR0FDSHlZLFNEa1F3Q0EsQ0FBUWhaLEtBQUthLFFBQ3hDLFVBQXhCd1QsR0FBUTVDLGNBQXlCMkMsR0FBTTNDLFlBQWNuUixFQUFVTixLQUFLYSxTQUcxRTJVLEdBQU92QixpQkFBaUIsU0FBVTdYLElBQ2hDLEdBQTJCLFNBQXZCa1ksR0FBTzdDLFlBQXdCLE9BQU82QyxHQUFPN0MsWUFBYy9RLEVBQVNWLEtBQUthLE9BRTdFLElBQUlvWSxFQUFjaFksT0FBT3FULEdBQU83QyxhQUNoQ3dILElBQ0EzRSxHQUFPN0MsWUFBY3dILEtBK0h2QixNQUFNQyxHQUFlcGQsU0FBU29WLGlCQUFpQixpQkFDekNpSSxHQUFlLEdBQUlwRixHQUFJLGVBQzdCb0YsR0FBYUMsT0FFYixNQUFNQyxHQUFrQixHQUFJdEYsR0FBSSxrQkFDMUJ1RixHQUFrQixHQUFJdkYsR0FBSSx3QkFDMUJ3RixHQUFrQixHQUFJeEYsR0FBSSx5QkFFMUJ5RixHQUFhLENBQ2pCL0csS0FBUyxDQUFFakMsTUFBTzJJLElBQ2xCdmEsUUFBUyxDQUFFNmEsTUFBT0YsR0FBaUIvSSxNQUFPNkksR0FBY0ssS0FBTUosR0FBY0ssS0FBTSxHQUFJdmYsTUFBTyxJQUd6RnVLLEdBQVEsR0FBSW9QLEdBQUksY0FDaEJ0VCxHQUFRLEdBQUlzVCxHQUFJLGdCQUNoQi9LLEdBQVEsR0FBSStLLEdBQUksZUFFaEJ2VCxHQUFPLENBQUVtRSxHQUFLbEUsR0FBT3VJLEdBQU13TCxHQUFTQyxXQUVwQ21GLEdBQWUsR0FBSTdGLEdBQUksZUFDdkI4RixHQUFlLEdBQUk5RixHQUFJLGtCQUV2QjZCLEdBQVMsQ0FDYnVELEdBQ0FFLEdBQWNDLEdBQ2QzVSxHQUFLbEUsR0FBT3VJLEdBQU13TCxHQUFTQyxVQUFXRixHQUN0Q3FGLEdBQ0FDLElBR0ZQLEdBQWFyRixpQkFBaUIsU0FBUyxLQUVyQyxHQUF1QyxJQUFuQ3VGLEdBQVc1YSxRQUFRK2EsS0FBS3poQixPQUFjLENBRXhDLE1BQU00aEIsRUFBa0IsR0FBSW5NLEdBQUcsTUFPN0IsR0FORm1NLEVBQWdCdkksVUFBVUMsSUFBSSx1QkFDOUJzSSxFQUFnQm5lLE1BQU0yRyxNQUFRLE9BQzlCd1gsRUFBZ0JuZSxNQUFNb2UsT0FBUyxPQUMvQkQsRUFBZ0JuZSxNQUFNcWUsU0FBVyxXQUNqQ0YsRUFBZ0JuZSxNQUFNd1osV0FBYSxVQUVKLElBQXpCekQsR0FBS0MsU0FBU3paLE9BQWMsQ0FDOUIsTUFBTStoQixFQUFXLEdBQUl0TSxHQUFHLE1BQ3hCc00sRUFBUzFJLFVBQVVDLElBQUksb0JBQ3ZCeUksRUFBU3hJLFlBQWMsUUFDdkJ3SSxFQUFTdGUsTUFBTXFlLFNBQVcsV0FDMUJDLEVBQVN0ZSxNQUFNdWUsT0FBUyxVQUN4QkosRUFBZ0J2ZCxZQUFZMGQsUUFJNUIsSUFBSyxNQUFNcmIsS0FBVzhTLEdBQUtDLFNBQVUsQ0FDbkMsTUFBTXNJLEVBQVcsR0FBSXRNLEdBQUcsTUFDeEJzTSxFQUFTMUksVUFBVUMsSUFBSSxvQkFDdkJ5SSxFQUFTdGUsTUFBTXVlLE9BQVMsVUFDeEJELEVBQVN4SSxZQUFjN1MsRUFBUUQsS0FFL0JzYixFQUFTaEcsaUJBQWlCLFNBQVU3WCxJQUVsQ2lkLEdBQWFoYSxNQUFRNGEsRUFBU3hJLGVBR2hDcUksRUFBZ0J2ZCxZQUFZMGQsR0FHbENULEdBQVc1YSxRQUFRK2EsS0FBS3RpQixLQUFLeWlCLEdBQzdCTixHQUFXNWEsUUFBUTZhLE1BQU1sZCxZQUFZdWQsUUFJckNOLEdBQVc1YSxRQUFRK2EsS0FBSyxHQUFHemUsU0FDM0JzZSxHQUFXNWEsUUFBUSthLEtBQU8sTUFNOUJULEdBQVU5RixTQUFRc0csSUFDaEJBLEVBQUt6RixpQkFBaUIsU0FBVTdYLElBRTlCLElBQUssTUFBTXNkLEtBQVF0ZCxFQUFFUixPQUFPc0IsV0FBV0EsV0FBVzZWLGNBQ3JCcmEsSUFBdkJnaEIsRUFBS3RFLFdBQVcsSUFBa0JzRSxFQUFLdEUsV0FBVyxHQUFHN0QsVUFBVXJXLE9BQU8scUJBVTVFLE9BUEEwYSxHQUFPeEMsU0FBUTVDLElBQ0MsS0FBVkEsSUFBY0EsRUFBTTdVLE1BQU13WixXQUFhLGFBSTdDL1ksRUFBRVIsT0FBTzJWLFVBQVVDLElBQUkscUJBRWhCcFYsRUFBRVIsT0FBTzJWLFVBQVUsSUFFeEIsSUFBSyxNQUNINEgsR0FBYXhkLE1BQU13WixXQUFhLFVBQ2hDZ0UsR0FBYTdELFFBQ2IsTUFFRixJQUFLLE1BQ0grRCxHQUFhMWQsTUFBTXdaLFdBQWEsVUFDaENtRSxHQUFhM2QsTUFBTXdaLFdBQWEsVUFDaENrRSxHQUFhL0QsUUFDYixNQUVGLElBQUssTUFDdUIsS0FBdEJmLEtBQ0ZBLEdBQWtCNVksTUFBTXdaLFdBQWEsVUFDckNaLEdBQW9CLElBR3RCLElBQUksTUFBTWxWLEtBQVNtQixHQUNqQm5CLEVBQU0xRCxNQUFNd1osV0FBYSxVQUszQixNQUVGLElBQUssTUFDSHlFLEdBQVVqZSxNQUFNd1osV0FBYSxVQUM3QnlFLEdBQVV0RSxRQUNWLE1BRUYsSUFBSyxNQUNvQmxaLEVBWXJCUixPQUFPbVgsU0FBUyxHQUFHcUMsV0FBV2hDLFNBQVF5RixJQUN2QixPQUFqQkEsRUFBSzNELFNBQ1AyRCxFQUFLekQsV0FBVyxHQUFHN0QsVUFBVXVILE9BQU8sK0JBYmxDLE1BRUYsSUFBSyxNQUNIZSxHQUFhbGUsTUFBTXdaLFdBQWEsVUFDaEMwRSxHQUFhdkUsZUFlckIsTUFBTTZFLEdBQWFyZSxTQUFTQyxjQUFjLHVCQUUxQyxJQUFLLElBQUlxZSxLQUFXRCxHQUFXcEgsU0FDN0JxSCxFQUFRbkcsaUJBQWlCLFNBQVU3WCxJQUNqQyxJQUFJLElBQUl5YyxLQUFRc0IsR0FBV3BILFNBQVk4RixFQUFLdEgsVUFBVXJXLE9BQU8sc0JBRTdEa0IsRUFBRVIsT0FBTzJWLFVBQVVDLElBQUksc0JBQ3ZCNkksR0FBZWplLE1BSW5CLFNBQVNpZSxHQUFlamUsR0FDdEIsT0FBT0EsRUFBRVIsT0FBTzZWLFlBQVk2SSxRQUMxQixJQUFLLFFBQ0hwYSxRQUFRd1MsSUFBSSxhQUNaLE1BQ0YsSUFBSyxRQUNIeFMsUUFBUXdTLElBQUksYUFDWmhCLEdBQUs2SSxJQUNMLE1BQ0YsSUFBSyxXQUNIcmEsUUFBUXdTLElBQUksaUJBTU81VyxTQUFTQyxjQUFjLHlCQUMvQmtZLGlCQUFpQixTQUFVN1gsSUFDMUNBLEVBQUVSLE9BQU9zQixXQUFXQSxXQUFXcVUsVUFBVXVILE9BQU8saUJBQ2hEMWMsRUFBRVIsT0FBT3NCLFdBQVc2VixTQUFTLEdBQUd4QixVQUFVdUgsT0FBTyxxQkFpSG5ELE1BQU1yQyxHQUFrQjNhLFNBQVNDLGNBQWMseUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvVGFzay5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9Qcm9qZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXRNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZ2V0WWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNGdXR1cmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0xlYXBZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL0NhbGVuZGFyLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL0RvYy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9tYWluLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXREYXkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1VYnVudHUmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuOnJvb3Qge1xcbiAgZm9udC1zaXplOiA2Mi41JTtcXG59XFxuXFxuYm9keSB7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG59XFxuXFxucCwgbGksIGxlZ2VuZCwgaDEsIGgyIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiVWJ1bnR1XFxcIiwgc2Fucy1zZXJpZjtcXG59XFxuXFxudWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuaSwgYnV0dG9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndyYXBwZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMywgMjIyLCAyMjIpO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG5cXG4vKj09PT09PT09PVxcbiAgTmF2IEJhclxcbj09PT09PT09PT09Ki9cXG5uYXYsIGZvb3RlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMS4ycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlkOWRmYztcXG59XFxuXFxubmF2IGkge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAyLjNyZW07XFxufVxcblxcbm5hdiAudXNlci1hbGVydHMge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4udXNlci1hbGVydHMgaTpsYXN0LWNoaWxkIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLnVzZXItbm90aWZ5IHtcXG4gIHotaW5kZXg6IDE7XFxuICB0b3A6IC0wLjFyZW07XFxuICBsZWZ0OiAxLjNyZW07XFxuICB0cmFuc2l0aW9uOiAwLjlzO1xcbiAgZm9udC1zaXplOiAzcmVtO1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubm90aWZ5IHtcXG4gIGNvbG9yOiByZWQ7XFxuICBmb250LXNpemU6IDEuMXJlbTtcXG59XFxuXFxubmF2IHVsIHtcXG4gIHdpZHRoOiAzNSU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5wb2ludGVyLCBpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxubmF2IC5sb2dvIHtcXG4gIHdpZHRoOiAzNSU7XFxuICBjdXJzb3I6IGF1dG87XFxuICBmb250LXNpemU6IDRyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxufVxcblxcbi5uYXYtc2VhcmNoIHtcXG4gIHdpZHRoOiA4MCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLm5hdi1zZWFyY2ggaW5wdXQge1xcbiAgd2lkdGg6IDYwJTtcXG4gIGhlaWdodDogM3JlbTtcXG4gIG1hcmdpbjogMCAxcmVtO1xcbiAgcGFkZGluZzogMC41cmVtO1xcbiAgZm9udC1zaXplOiAxLjRyZW07XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbi5uYXYtc2VhcmNoIGlucHV0OmZvY3VzLXZpc2libGUge1xcbiAgb3V0bGluZTogMC4ycmVtIHNvbGlkIGxpZ2h0Ymx1ZTtcXG59XFxuXFxuLyo9PT09PT09PT09PVxcbiAgRGFzaGJvYXJkXFxuYXBwLXdpbmRvdzogZGl2XFxuICAtYXNpZGVcXG4gICAgLXVsOiBhcHAtYXNpZGUtY2FsZW5kYXJcXG4gICAgLXVsOiBhcHAtYXNpZGUtcHJvamVjdHMtbGlzdFxcblxcbiAgLW1haW46IGFwcC1tYWluLXRhc2std2luZG93XFxuICAgIC1kYXNoYm9hcmRcXG49PT09PT09PT09PT09Ki9cXG4uYXBwLXdpbmRvdyB7XFxuICBmbGV4OiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuYXNpZGUge1xcbiAgd2lkdGg6IDI1JTtcXG4gIG1pbi13aWR0aDogMjhyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xcbiAgcGFkZGluZzogMnJlbSAycmVtIDVyZW0gMnJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG5hc2lkZSB1bCB7XFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbn1cXG5cXG5hc2lkZSBsaSB7XFxuICBnYXA6IDFyZW07XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBoZWlnaHQ6IDMuNXJlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtc2l6ZTogMS43cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi8qPT09PT09PT09PT09PT09PT09XFxuICBBc2lkZTpcXG4gICAgVGFzayBPdmVydmlld1xcbj09PT09PT09PT09PT09PT09PT09Ki9cXG5hc2lkZSB1bDpmaXJzdC1jaGlsZCB7XFxuICBoZWlnaHQ6IDI1JTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5qcy1hc2lkZS1oaWdobGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZWZlZjtcXG59XFxuXFxuLyo9PT09PT09PT09PT09XFxuICBNYXNrIEJ1dHRvblxcbj09PT09PT09PT09PT09PSovXFxubGkge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubWFzay1idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB6LWluZGV4OiAxO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4vKj09PT09PT09PT09PVxcbiAgQXNpZGU6XFxuICAgIFByb2plY3RzXFxuPT09PT09PT09PT09PT0qL1xcbmFzaWRlIHVsOmxhc3QtY2hpbGQge1xcbiAgZmxleDogMTtcXG4gIGhlaWdodDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogLXdlYmtpdC1maXQtY29udGVudDtcXG4gIGhlaWdodDogLW1vei1maXQtY29udGVudDtcXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGk6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDJyZW0pO1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAycmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuYXNpZGUgdWw6bGFzdC1jaGlsZCBsaTpub3QoOmZpcnN0LWNoaWxkKSBpIHtcXG4gIGNvbG9yOiBibHVlO1xcbiAgZm9udC1zaXplOiAxLjNyZW07XFxufVxcbmFzaWRlIHVsOmxhc3QtY2hpbGQgbGk6bm90KDpmaXJzdC1jaGlsZCkgLnByb2plY3QtaW5mbyB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnByb2plY3RzLWRyb3Bkb3duLWljb24ge1xcbiAgZm9udC1zaXplOiAyLjJyZW07XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMCk7XFxufVxcblxcbi5kcm9wZG93bi1zdGF0ZSB7XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcXG59XFxuXFxuYXNpZGUgdWw6bGFzdC1jaGlsZC5kcm9wZG93bi1tZW51IHtcXG4gIGZsZXg6IDAgMCA0LjlyZW07XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbn1cXG5cXG4vKj09PT09PT09PT09PT1cXG4gIERhc2hib2FyZDpcXG4gICAgVGFzayB2aWV3XFxuPT09PT09PT09PT09PT09Ki9cXG5tYWluIHtcXG4gIGZsZXg6IDE7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogM3JlbSA0cmVtIDNyZW0gN3JlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG5cXG5tYWluIGgyIHtcXG4gIG1hcmdpbi1ib3R0b206IDRyZW07XFxufVxcblxcbi5uZXctdGFzayB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luLWxlZnQ6IDEuNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxuICBjb2xvcjogcmdiKDExMCwgMTEwLCAxMTApO1xcbn1cXG5cXG4uZGFzaGJvYXJkLXRhc2tzIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IC13ZWJraXQtZml0LWNvbnRlbnQ7XFxuICBoZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG59XFxuXFxuLmNvbXBsZXRlLXRhc2sge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMTAwdncpO1xcbn1cXG5cXG4ucmVtb3ZlLXRhc2sge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwMHZ3KTtcXG59XFxuXFxuLnRhc2stY2FyZCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiAxLjVyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQwLCAyNDAsIDI0MCk7XFxuICBib3JkZXItYm90dG9tOiAwLjFyZW0gc29saWQgbGlnaHRncmF5O1xcbiAgdHJhbnNpdGlvbjogMS4ycztcXG59XFxuXFxuLnRhc2stY2FyZCAuZmEtZmxhZyB7XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICBjb2xvcjogb3JhbmdlO1xcbn1cXG5cXG4udGFzay1pbmZvIHtcXG4gIGdhcDogMXJlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFzay1pbmZvIC50YXNrLWRldGFpbHMge1xcbiAgZ2FwOiAxcmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi50YXNrLWluZm8gLnRhc2stZGV0YWlscyBsaSB7XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnRhc2staW5mbyAudGFzay1kZXRhaWxzIGxpIHAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG4udGFzay1pbmZvIC50YXNrLWRldGFpbHMgbGk6bm90KDpsYXN0LWNoaWxkKSB7XFxuICB3aWR0aDogMzUlO1xcbn1cXG4udGFzay1pbmZvIC50YXNrLWRldGFpbHMgbGk6Zmlyc3QtY2hpbGQge1xcbiAgd2lkdGg6IDEyJTtcXG59XFxuLnRhc2staW5mbyAudGFzay1kZXRhaWxzIC50YXNrLXByb2plY3Qge1xcbiAgd2lkdGg6IDUwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gIG1hcmdpbi1yaWdodDogMnJlbTtcXG59XFxuLnRhc2staW5mbyAudGFzay1kZXRhaWxzIC50YXNrLXByb2plY3QgaSB7XFxuICBjb2xvcjogYmx1ZTtcXG59XFxuLnRhc2staW5mbyAudGFzay1kZXRhaWxzIC50YXNrLXByb2plY3QgcCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxuLyo9PT09PT09PT09PT09PT09XFxuICBOZXcgVGFzayBNb2RhbFxcbj09PT09PT09PT09PT09PT09PSovXFxuZGlhbG9nIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZGlhbG9nLXRhc2stYmFyIHtcXG4gIHdpZHRoOiA3MCU7XFxuICBtaW4taGVpZ2h0OiAxM3JlbTtcXG4gIGhlaWdodDogLXdlYmtpdC1tYXgtY29udGVudDtcXG4gIGhlaWdodDogLW1vei1tYXgtY29udGVudDtcXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICBwYWRkaW5nOiAyLjVyZW0gMS41cmVtIDEuNXJlbTtcXG4gIG1hcmdpbjogMThyZW0gYXV0byAwO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYm94LXNoYWRvdzogMCAwIDAuNXJlbSAwLjFyZW0gYmxhY2s7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA4ODBweCkge1xcbiAgLmRpYWxvZy10YXNrLWJhciB7XFxuICAgIHdpZHRoOiA5NSU7XFxuICB9XFxufVxcblxcbi5qcy10YXNrLWljb24ge1xcbiAgaGVpZ2h0OiA0cmVtO1xcbiAgd2lkdGg6IDNyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyLWJvdHRvbTogMC4ycmVtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgdHJhbnNpdGlvbjogMC4zcztcXG59XFxuXFxuLm1vZGFsLWljb24tc2VsZWN0IHtcXG4gIGJvcmRlci1ib3R0b206IDAuMnJlbSBzb2xpZCBibGFjaztcXG59XFxuXFxuZm9ybSB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XFxufVxcblxcbmZvcm0gaW5wdXQge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gIGJvcmRlcjogMC4ycmVtIHNvbGlkIHJnYigxMjUsIDEyNSwgMTI1KTtcXG59XFxuXFxuLmlucHV0cyB7XFxuICB3aWR0aDogMzUlO1xcbiAgaGVpZ2h0OiAzLjlyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA4ODBweCkge1xcbiAgLmlucHV0cyB7XFxuICAgIHdpZHRoOiA1MCU7XFxuICB9XFxufVxcblxcbi5pbnB1dHMgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmlucHV0cyAuaW5wdXQtdGFzayB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG5cXG4uZHJvcGRvd24tc2V0LXByb2plY3QsXFxuLmRyb3Bkb3duLXNldC1kYXRlLFxcbi5pbnB1dC1kYXRlLFxcbi5pbnB1dC10aW1lLFxcbi5pbnB1dC1jb21tZW50IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4uZHJvcGRvd24tc2V0LXByb2plY3QgaSxcXG4uZHJvcGRvd24tc2V0LWRhdGUgaSxcXG4uaW5wdXQtZGF0ZSBpLFxcbi5pbnB1dC10aW1lIGksXFxuLmlucHV0LWNvbW1lbnQgaSB7XFxuICB3aWR0aDogM3JlbTtcXG4gIGhlaWdodDogOTAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHRvcDogMC4ycmVtO1xcbiAgcmlnaHQ6IDAuMnJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3QtbWVudSB7XFxuICB6LWluZGV4OiA1O1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlcjogMC4xcmVtIGRhc2hlZCBsaWdodGJsdWU7XFxuICBib3JkZXItdG9wOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDFyZW07XFxuICBnYXA6IDFyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3Ige1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IDAuMnM7XFxuICBwYWRkaW5nOiAxcmVtIDFyZW07XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBib3JkZXI6IDAuMXJlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTMsIDIzNywgMjQwKTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3I6aG92ZXIge1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgYmxhY2s7XFxufVxcblxcbi5pbnB1dC1kYXRlLFxcbi5pbnB1dC10aW1lLFxcbi5pbnB1dC1jb21tZW50LFxcbi5kcm9wZG93bi1zZXQtZGF0ZSB7XFxuICB0b3A6IDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5pbnB1dC15ZWFyIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5kcm9wZG93bi1zZXQtZGF0ZSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBnYXA6IDAuNXJlbTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAzMy4zMzMzMzMzMzMzJSk7XFxufVxcblxcbi5pbnB1dC1jYWxlbmRhciB7XFxuICB6LWluZGV4OiA1O1xcbiAgbWluLXdpZHRoOiAyMHJlbTtcXG4gIGdyaWQtY29sdW1uOiBzcGFuIDM7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IC0xM3JlbTtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDEwODBweCkge1xcbiAgLmlucHV0LWNhbGVuZGFyIHtcXG4gICAgdG9wOiAtOS4zcmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogNjIwcHgpIHtcXG4gIC5pbnB1dC1jYWxlbmRhciB7XFxuICAgIHRvcDogLTdyZW07XFxuICB9XFxufVxcblxcbi5pbnB1dC1jYWxlbmRhciBidXR0b24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwLjZyZW07XFxuICByaWdodDogMS41cmVtO1xcbiAgd2lkdGg6IDEwcmVtO1xcbiAgaGVpZ2h0OiAzcmVtO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuaW5wdXQtY2FsZW5kYXIgYnV0dG9uIHtcXG4gICAgd2lkdGg6IDhyZW07XFxuICAgIGJvdHRvbTogMC42cmVtO1xcbiAgICBoZWlnaHQ6IC13ZWJraXQtZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogLW1vei1maXQtY29udGVudDtcXG4gICAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIH1cXG59XFxuXFxuLmRyb3Bkb3duLXNldC1kYXRlIGxpIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMC4xcmVtIHNvbGlkIGxpZ2h0Ymx1ZTtcXG59XFxuXFxuLmRyb3Bkb3duLXNldC1kYXRlIHAge1xcbiAgcGFkZGluZzogMXJlbTtcXG59XFxuXFxuLmRyb3Bkb3duLXNldC1kYXRlIGxpIHA6Zmlyc3QtY2hpbGQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG59XFxuXFxuaS55ZWFyLW5hdiB7XFxuICB3aWR0aDogNTAlO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmkueWVhci1uYXYtdXAge1xcbiAgdG9wOiAtMi43NXJlbTtcXG4gIGxlZnQ6IC01JTtcXG59XFxuXFxuaS55ZWFyLW5hdi1kb3duIHtcXG4gIHRvcDogLTIuNzVyZW07XFxuICByaWdodDogLTUlO1xcbn1cXG5cXG5maWVsZHNldCB7XFxuICBnYXA6IDFyZW07XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA4ODBweCkge1xcbiAgZmllbGRzZXQge1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICB9XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA2MjBweCkge1xcbiAgZmllbGRzZXQge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXG4gIH1cXG59XFxuXFxubGVnZW5kIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcblxcbmZpZWxkc2V0IC50YXNrLWljb25zIHtcXG4gIG1pbi13aWR0aDogMjZyZW07XFxuICBmbGV4OiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LXNlbGY6IGZsZXgtc3RhcnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDg4MHB4KSB7XFxuICBmaWVsZHNldCAudGFzay1pY29ucyB7XFxuICAgIGdhcDogMXJlbTtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xcbiAgfVxcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogNjIwcHgpIHtcXG4gIGZpZWxkc2V0IC50YXNrLWljb25zIHtcXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbn1cXG5cXG4udGFzay1pY29ucyBpLmZhcyxcXG4udGFzay1pY29ucyBpLmZhciB7XFxuICBmb250LXNpemU6IDJyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbn1cXG5cXG4uZmxhZy1pY29uLWdyb3VwIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0cmVtO1xcbiAgdG9wOiAtNC41cmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcblxcbmkuZmEtZmxhZyB7XFxuICAtd2Via2l0LXRleHQtc3Ryb2tlOiAwLjFyZW0gcmdiKDEyNiwgMTI2LCAxMjYpO1xcbn1cXG5cXG4uZmxhZy1pY29uLWdyb3VwIGxpIHtcXG4gIG1hcmdpbjogMCAxcmVtO1xcbn1cXG5cXG5pLmZhLWZsYWcuZmxhZy1yLFxcbmkuZmEtZmxhZy5mbGFnLW8sXFxuaS5mYS1mbGFnLmZsYWcteSxcXG5pLmZhLWZsYWcuZmxhZy13IHtcXG4gIHotaW5kZXg6IC0xO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbmkuZmEtZmxhZy5mbGFnLXIge1xcbiAgY29sb3I6IHJlZDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDQ1cHgpO1xcbn1cXG5cXG5pLmZhLWZsYWcuZmxhZy1vIHtcXG4gIGNvbG9yOiBvcmFuZ2U7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMHB4LCA0NXB4KTtcXG59XFxuXFxuaS5mYS1mbGFnLmZsYWcteSB7XFxuICBjb2xvcjogeWVsbG93O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTIwcHgsIDQ1cHgpO1xcbn1cXG5cXG5pLmZhLWZsYWcuZmxhZy13IHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC02MHB4LCA0NXB4KTtcXG59XFxuXFxuaS5mYS1mbGFnIC5pY29uLXNlbGVjdG9yLXZpc2liaWxpdHkge1xcbiAgei1pbmRleDogMTA7XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogYXV0bztcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IGF1dG87XFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBhdXRvO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogYXV0bztcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAwKTtcXG59XFxuXFxuZmllbGRzZXQgLnRhc2stYnV0dG9ucyB7XFxuICBnYXA6IDFyZW07XFxuICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmNhbmNlbCxcXG4uYWRkIHtcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXG4gIG1pbi13aWR0aDogOHJlbTtcXG4gIGhlaWdodDogMy41cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgYmxhY2s7XFxufVxcblxcbi5jYW5jZWwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5hZGQge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE1NywgMTU3LCAyNTIpO1xcbn1cXG5cXG4vKj09PT09PT09PT1cXG4gIENhbGVuZGFyXFxuPT09PT09PT09PT09Ki9cXG4uY2FsZW5kYXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIGhlaWdodDogMjByZW07XFxuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIG91dGxpbmU6IDAuMXJlbSBzb2xpZCBibHVlO1xcbiAgYm9yZGVyOiAwLjFyZW0gc29saWQgbGlnaHRncmV5O1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuY2FsZW5kYXIge1xcbiAgICBoZWlnaHQ6IDE2LjFyZW07XFxuICB9XFxufVxcblxcbi5tb250aCBoMyB7XFxuICBtYXJnaW46IDFyZW0gMCAxcmVtO1xcbn1cXG5cXG4uZGF5IHtcXG4gIG1hcmdpbjogMC40cmVtO1xcbiAgaGVpZ2h0OiAyLjEyNXJlbTtcXG4gIG91dGxpbmU6IDAuMXJlbSBzb2xpZCBsaWdodGdyYXk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTA4MHB4KSB7XFxuICAuZGF5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBoZWlnaHQ6IDIuMTI1cmVtO1xcbiAgfVxcbn1cXG5cXG4uZGF5IHAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxufVxcblxcbi5jYWxlbmRhciBidXR0b24gaSB7XFxuICB3aWR0aDogOTYlO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmZvb3RlciwgZm9vdGVyIHVsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cXG5pLmZhLWNoZXZyb24tY2lyY2xlLWxlZnQge1xcbiAgbGVmdDogMXJlbTtcXG59XFxuXFxuaS5mYS1jaGV2cm9uLWNpcmNsZS1yaWdodCB7XFxuICByaWdodDogMXJlbTtcXG59XFxuXFxuaS5mYS1jaGV2cm9uLWNpcmNsZS1sZWZ0LFxcbmkuZmEtY2hldnJvbi1jaXJjbGUtcmlnaHQge1xcbiAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgaGVpZ2h0OiAtbW96LWZpdC1jb250ZW50O1xcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgdG9wOiAxLjI1cmVtO1xcbn0vKiMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS5jc3MubWFwICovXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBa0JBO0VBQ0UsU0FBQTtFQUNBLFVBQUE7RUFDQSxzQkFBQTtBQ2hCRjs7QURvQkE7RUFDRSxnQkFBQTtBQ2pCRjs7QURxQkE7RUFDRSxpQkFBQTtBQ2xCRjs7QURxQkE7RUFDRSxpQ0FBQTtBQ2xCRjs7QURxQkE7RUFDRSxnQkFBQTtBQ2xCRjs7QURxQkE7RUFDRSxlQUFBO0FDbEJGOztBRHFCQTtFQUNFLG9DQUFBO0VBQ0EsaUJBQUE7RUFFQSxXQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsOEJBQUE7QUNuQkY7O0FEc0JBOztZQUFBO0FBR0E7RUFDRSxXQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUVBLHlCQUFBO0FDcEJGOztBRHVCQTtFQUNFLFlBQUE7RUFDQSxpQkFBQTtBQ3BCRjs7QUR1QkE7RUFDRSxrQkFBQTtBQ3BCRjs7QUR1QkE7RUFDRSxrQkFBQTtBQ3BCRjs7QUR1QkE7RUFDRSxVQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtBQ3BCRjs7QUR1QkE7RUFDRSxVQUFBO0VBQ0EsaUJBQUE7QUNwQkY7O0FEdUJBO0VBQ0UsVUFBQTtFQUNBLGFBQUE7RUFDQSw2QkFBQTtBQ3BCRjs7QUR1QkE7RUFDRSxlQUFBO0FDcEJGOztBRHVCQTtFQUNFLFVBQUE7RUFD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Q0EscUJBQUE7RUFDQSwwQkFBQTtBQ3JDRjs7QUR3Q0E7RUFDRSx1QkFBQTtBQ3JDRjs7QUR3Q0E7RUFDRSxZQUFBO0VBQ0Esb0NBQUE7QUNyQ0Y7O0FEZ0RBOzthQUFBO0FBR0E7RUFDRSxXQUFBO0VBQ0EsY0FBQTtFQUNBLGFBQUE7RUFDQSxxQkFBQTtFQUNBLHVCQUFBO0VBQ0EsMEJBQUE7RUFDQSw4QkFBQTtBQzdDRjtBRDFxQkU7RUFndEJGO0lBVUksZUFBQTtFQzVDRjtBQUNGOztBRCtDQTtFQUNFLG1CQUFBO0FDNUNGOztBRCtDQTtFQUNFLGNBQUE7RUFDQSxnQkFBQTtFQUNBLCtCQUFBO0VBRUEsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFFQSxrQkFBQTtBQzlDRjtBRDdyQkU7RUFrdUJGO0lBWUksU0FBQTtJQUNBLGdCQUFBO0VDN0NGO0FBQ0Y7O0FEZ0RBO0VBQ0Usa0JBQUE7RUFDQSxpQkFBQTtBQzdDRjs7QURnREE7RUFDRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLDZCQUFBO0FDN0NGOztBRGdEQTtFQUNFLFdBQUE7RUFDQSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7RUFDQSw2QkFBQTtBQzdDRjs7QURnREE7RUFDRSxVQUFBO0FDN0NGOztBRCtDQTtFQUNFLFdBQUE7QUM1Q0Y7O0FEK0NBOztFQUVFLDJCQUFBO0VBQUEsd0JBQUE7RUFBQSxtQkFBQTtFQUNBLDZCQUFBO0VBQ0EsWUFBQTtBQzVDRixDQUFBLG9DQUFBXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxudmFyIGdldFJhbmRvbVZhbHVlcztcbnZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuICAgIC8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XHJcblxyXG5jb25zdCBUYXNrID0gKCgpID0+IHtcclxuXHJcbiAgY29uc3QgY3JlYXRlID0gKG5hbWUgPSAnTmV3IHRhc2snLCBwcm9qZWN0ID0gJ1VzZXInLCBkdWVEYXRlID0gJ3Vuc2V0JywgY3JlYXRpb25EYXRlID0gJ3Vuc2V0JywgbGFiZWxUYWcgPSAndW5zZXQnLCB0aW1lID0gJ3Vuc2V0JywgYWxhcm0gPSAndW5zZXQnLCBwcmlvcml0eUZsYWcgPSAndW5zZXQnLCBjb21tZW50ID0gJ3Vuc2V0JykgPT4ge1xyXG4gICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgcmV0dXJuIHsgbmFtZSwgcHJvamVjdCwgZHVlRGF0ZSwgY3JlYXRpb25EYXRlLCBsYWJlbFRhZywgdGltZSwgcHJpb3JpdHlGbGFnLCBjb21tZW50LCBpZDogdXVpZHY0KCl9XHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBjcmVhdGUgfSA7XHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhc2s7IiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XHJcblxyXG5jb25zdCBQcm9qZWN0ID0gKCgpID0+IHtcclxuICBcclxuICBjb25zdCBjcmVhdGUgPSAobmFtZSA9ICdkZWZhdWx0JykgPT4ge1xyXG4gICAgcmV0dXJuIHsgbmFtZSwgdGFza3M6IFtdLCBpZDogdXVpZHY0KCksIGluZGV4OiB7dmFsdWU6IDAsIGxhc3Q6IDB9IH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7IGNyZWF0ZSB9XHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2plY3Q7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBnZXRNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbW9udGggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBtb250aCBpcyAyOSBGZWJydWFyeSAyMDEyP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0TW9udGgobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAxXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TW9udGgoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gIHJldHVybiBtb250aDtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGdldFllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHllYXJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB5ZWFyIGlzIDIgSnVseSAyMDE0P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0WWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMjAxNFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0RnVsbFllYXIoKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRnV0dXJlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBmdXR1cmU/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIGZ1dHVyZT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyBpbiB0aGUgZnV0dXJlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQsIGlzIDMxIERlY2VtYmVyIDIwMTQgaW4gdGhlIGZ1dHVyZT9cbiAqIHZhciByZXN1bHQgPSBpc0Z1dHVyZShuZXcgRGF0ZSgyMDE0LCAxMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGdXR1cmUoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpID4gRGF0ZS5ub3coKTtcbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzTGVhcFllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBsZWFwIHllYXI/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgbGVhcCB5ZWFyP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgaW4gdGhlIGxlYXAgeWVhclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEgU2VwdGVtYmVyIDIwMTIgaW4gdGhlIGxlYXAgeWVhcj9cbiAqIHZhciByZXN1bHQgPSBpc0xlYXBZZWFyKG5ldyBEYXRlKDIwMTIsIDgsIDEpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMZWFwWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwO1xufSIsImltcG9ydCB7IGdldE1vbnRoIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBpc0xlYXBZZWFyIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgRG9jIGZyb20gJy4vRG9jJztcclxuXHJcbmZ1bmN0aW9uIGRvbShhY3Rpb24sIGVsZW1lbnQpIHtcclxuICBzd2l0Y2goYWN0aW9uKSB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcclxuICAgIGNhc2UgMjpcclxuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdHlsZShlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICBlbGVtZW50LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZURheXMoZGF5cywgcGFyZW50KSB7XHJcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZGF5czsgaSsrKSB7XHJcblxyXG4gICAgbGV0IGRheSA9IGRvbSgwLCAnZGl2Jyk7XHJcbiAgICBkYXkuY2xhc3NMaXN0LmFkZCgnZGF5Jyk7XHJcblxyXG4gICAgbGV0IG5hbWUgPSBkb20oMCwgJ3AnKTtcclxuICAgIG5hbWUudGV4dENvbnRlbnQgPSBpO1xyXG5cclxuICAgIGRheS5hcHBlbmRDaGlsZChuYW1lKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChkYXkpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gQ2FsZW5kYXIoKSB7XHJcblxyXG4gIC8vIENhbGVuZGFyIGRpdiBjb250YWluZXJcclxuICBjb25zdCBjb250YWluZXIgPSBkb20oMCwgJ2RpdicpO1xyXG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdjYWxlbmRhcicpO1xyXG5cclxuICBzdHlsZShjb250YWluZXIsICdkaXNwbGF5JywgJ2dyaWQnKTtcclxuICBzdHlsZShjb250YWluZXIsICdhbGlnbi1pdGVtcycsICdjZW50ZXInKTtcclxuXHJcbiAgY29uc3QgbW9udGhUYWJzID0gW107XHJcblxyXG4gIC8vIDEyIG1vbnRocyA6KVxyXG4gIGZvcihsZXQgaSA9IDE7IGkgPD0gMTI7IGkrKykge1xyXG4gICAgbGV0IG5hbWU7XHJcbiAgICBcclxuICAgIC8vIG1vbnRoIGRpdiAtIGhvbGRzIGRheSBlbGVtZW50c1xyXG4gICAgbGV0IG1vbnRoID0gZG9tKDAsICdkaXYnKTtcclxuICAgIG1vbnRoLmNsYXNzTGlzdC5hZGQoJ2NhbGVuZGFyLW1vbnRoJyk7XHJcbiAgICBcclxuICAgIC8vIG1vbnRoIHRpdGxlXHJcbiAgICBsZXQgaDIgPSBkb20oMCwgJ2gzJyk7XHJcblxyXG4gICAgLy8gZGF5c1xyXG4gICAgbGV0IGRheXMgPSBkb20oMCwgJ2RpdicpO1xyXG4gICAgZGF5cy5jbGFzc0xpc3QuYWRkKCdjYWxlbmRhci1kYXlzJyk7XHJcblxyXG4gICAgc3dpdGNoKGkpIHtcclxuICAgICAgY2FzZSAxOlxyXG4gICAgICAgIG5hbWUgPSAnSmFudWFyeSc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMxLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAyOlxyXG4gICAgICAgIG5hbWUgPSAnRmVicnVhcnknO1xyXG4gICAgICAgIGlzTGVhcFllYXIoIERhdGUubm93KCkgKSA/IGdlbmVyYXRlRGF5cygyOSwgZGF5cykgOiBnZW5lcmF0ZURheXMoMjgsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDM6XHJcbiAgICAgICAgbmFtZSA9ICdNYXJjaCc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMxLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA0OlxyXG4gICAgICAgIG5hbWUgPSAnQXByaWwnO1xyXG4gICAgICAgIGdlbmVyYXRlRGF5cygzMCwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgNTpcclxuICAgICAgICBuYW1lID0gJ01heSc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMxLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA2OlxyXG4gICAgICAgIG5hbWUgPSAnSnVuZSc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMwLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA3OlxyXG4gICAgICAgIG5hbWUgPSAnSnVseSc7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMxLCBkYXlzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA4OlxyXG4gICAgICAgIG5hbWUgPSAnQXVndXN0JztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDk6XHJcbiAgICAgICAgbmFtZSA9ICdTZXB0ZW1iZXInO1xyXG4gICAgICAgIGdlbmVyYXRlRGF5cygzMCwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgbmFtZSA9ICdPY3RvYmVyJztcclxuICAgICAgICBnZW5lcmF0ZURheXMoMzEsIGRheXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDExOlxyXG4gICAgICAgIG5hbWUgPSAnTm92ZW1iZXInO1xyXG4gICAgICAgIGdlbmVyYXRlRGF5cygzMCwgZGF5cyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgbmFtZSA9ICdEZWNlbWJlcic7XHJcbiAgICAgICAgZ2VuZXJhdGVEYXlzKDMxLCBkYXlzKTtcclxuICAgICAgICBicmVhazsgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRpdGxlIDxwPlxyXG4gICAgaDIudGV4dENvbnRlbnQgPSBuYW1lO1xyXG5cclxuICAgIG1vbnRoLmFwcGVuZENoaWxkKGgyKTtcclxuICAgIG1vbnRoLmFwcGVuZENoaWxkKGRheXMpO1xyXG5cclxuICAgIG1vbnRoLmlkID0gaTtcclxuICAgIG1vbnRoLmNsYXNzTGlzdC5hZGQobmFtZSk7XHJcbiAgICBtb250aC5jbGFzc0xpc3QuYWRkKCdtb250aCcpXHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobW9udGgpO1xyXG5cclxuICAgIC8vIEN1cnJlbnQgbW9udGggdmlld1xyXG4gICAgaWYgKE51bWJlcihtb250aC5pZCkgIT09IGdldE1vbnRoKCBEYXRlLm5vdygpICkrMSApIHtcclxuICAgICAgc3R5bGUobW9udGgsICd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1vbnRoIDxkaXY+XHJcbiAgICBzdHlsZShtb250aCwgJ3dpZHRoJywgJzkwJScpO1xyXG4gICAgc3R5bGUobW9udGgsICdoZWlnaHQnLCAnMTAwJScpO1xyXG4gICAgc3R5bGUoZGF5cywgJ2Rpc3BsYXknLCAnZ3JpZCcpO1xyXG4gICAgc3R5bGUobW9udGgsICd0ZXh0QWxpZ24nLCAnY2VudGVyJyk7XHJcbiAgICBzdHlsZShtb250aCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XHJcbiAgICBzdHlsZShtb250aCwgJ2JhY2tncm91bmRDb2xvcicsICd3aGl0ZScpO1xyXG4gICAgc3R5bGUobW9udGgsICdqdXN0aWZ5LXNlbGYnLCAnY2VudGVyJyk7XHJcbiAgICBzdHlsZShkYXlzLCAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJywgJ3JlcGVhdCg3LCAxZnIpJyk7XHJcblxyXG4gICAgbW9udGhUYWJzLnB1c2gobW9udGgpO1xyXG4gIH1cclxuICBzdHlsZShjb250YWluZXIsICdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xyXG5cclxuICBjb25zdCBjbG9zZUNhbCA9IGRvbSgwLCAnYnV0dG9uJyk7XHJcbiAgY2xvc2VDYWwudHlwZSA9ICdidXR0b24nO1xyXG4gIGNsb3NlQ2FsLmNsYXNzTGlzdC5hZGQoJ2Nsb3NlLWNhbGVuZGFyLWJ0bicpO1xyXG4gIGNsb3NlQ2FsLnRleHRDb250ZW50ID0gJ2Nsb3NlJztcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VDYWwpO1xyXG5cclxuICAvLyBjb25zdCBjbG9zZUljb24gPSBkb20oMCwgJ2knKTtcclxuICAvLyBjbG9zZUljb24uY2xhc3NMaXN0LmFkZCgnZmFyJyk7XHJcbiAgLy8gY2xvc2VJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXdpbmRvdy1jbG9zZScpO1xyXG4gIC8vIGNsb3NlQ2FsLmFwcGVuZENoaWxkKGNsb3NlSWNvbik7XHJcblxyXG4gIGNvbnN0IG5hdkxlZnQgPSBkb20oMCwgJ2knKTtcclxuICBuYXZMZWZ0LmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gIG5hdkxlZnQuY2xhc3NMaXN0LmFkZCgnZmEtY2hldnJvbi1jaXJjbGUtbGVmdCcpO1xyXG5cclxuICBjb25zdCBuYXZSaWdodCA9IGRvbSgwLCAnaScpO1xyXG4gIG5hdlJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gIG5hdlJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2ZhLWNoZXZyb24tY2lyY2xlLXJpZ2h0Jyk7XHJcblxyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChuYXZMZWZ0KTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobmF2UmlnaHQpO1xyXG5cclxuICBzdHlsZShuYXZMZWZ0LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcclxuICBzdHlsZShuYXZSaWdodCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XHJcblxyXG4gIHN0eWxlKG5hdkxlZnQsICdmb250U2l6ZScsICcycmVtJyk7XHJcbiAgc3R5bGUobmF2UmlnaHQsICdmb250U2l6ZScsICcycmVtJyk7XHJcblxyXG4gIHN0eWxlKG5hdkxlZnQsICdtYXJnaW4tbGVmdCcsICcwLjY1cmVtJyk7XHJcbiAgc3R5bGUobmF2UmlnaHQsICdtYXJnaW4tcmlnaHQnLCAnMC42NXJlbScpO1xyXG5cclxuICByZXR1cm4geyBjb250YWluZXIsIG5hdkxlZnQsIG5hdlJpZ2h0LCBjbG9zZUNhbCB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyOyIsImZ1bmN0aW9uIERvYyhhY3Rpb24sIGVsZW1lbnQpIHtcclxuICBzd2l0Y2goYWN0aW9uKSB7XHJcbiAgICBjYXNlICdjcmVhdGUnOlxyXG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KTtcclxuICAgIGNhc2UgJ3NlbGVjdE9uZSc6XHJcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xyXG4gICAgY2FzZSAnc2VsZWN0QWxsJzpcclxuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEb2M7IiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XHJcblxyXG5pbXBvcnQgVGFzayBmcm9tICcuL1Rhc2snO1xyXG5pbXBvcnQgUHJvamVjdCBmcm9tICcuL1Byb2plY3QnO1xyXG5cclxuaW1wb3J0IHsgZ2V0RGF5LCBnZXRNb250aCwgZ2V0WWVhciwgaXNGdXR1cmUgfSBmcm9tICdkYXRlLWZucyc7XHJcbmltcG9ydCB7IGdldERheXNJbk1vbnRoIH0gZnJvbSAnZGF0ZS1mbnMnXHJcbmltcG9ydCB7IGlzTGVhcFllYXIgfSBmcm9tICdkYXRlLWZucyc7XHJcbmltcG9ydCB7IGZvcm1hdCwgY29tcGFyZUFzYyB9IGZyb20gJ2RhdGUtZm5zJ1xyXG5cclxuaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vQ2FsZW5kYXInXHJcblxyXG5jb25zdCBUb2RvID0gKCgpID0+IHtcclxuICAvLyBtb2RlbFxyXG4gIGNvbnN0IHByb2plY3RzID0gW107XHJcblxyXG4gIGNvbnN0IF9ub3RpZnlQcm9qZWN0ID0gKHRhc2tUb0hhbmRsZSwgYWN0aW9uKSA9PiB7XHJcbiAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcclxuXHJcbiAgICAgIHByb2plY3QudGFza3MuZm9yRWFjaCgodGFzaywgaW5kZXgpID0+IHtcclxuXHJcbiAgICAgICAgc3dpdGNoKGFjdGlvbikge1xyXG4gICAgICAgICAgY2FzZSAnYWRkJzpcclxuICAgICAgICAgICAgaWYgKHRhc2suaWQgPT09IHRhc2tUb0hhbmRsZS5pZCkgcHJvamVjdC50YXNrcy5wdXNoKHRhc2spO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdyZW1vdmUnOlxyXG4gICAgICAgICAgICBpZiAodGFzay5pZCA9PT0gdGFza1RvSGFuZGxlLmlkKSBwcm9qZWN0LnRhc2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gICAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IF9nZXRUYXNrUHJvamVjdCA9IChwcm9qZWN0TmFtZSwgcHJvamVjdHMpID0+IHtcclxuICAgIGZvciAobGV0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcclxuICAgICAgaWYgKHByb2plY3ROYW1lID09PSBwcm9qZWN0Lm5hbWUpIHJldHVybiBwcm9qZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBQcm9qZWN0LmNyZWF0ZShwcm9qZWN0TmFtZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBfYWRkVGFza1RvUHJvamVjdCA9ICh0YXNrLCBwcm9qZWN0KSA9PiB7XHJcbiAgICBwcm9qZWN0LnRhc2tzLnB1c2godGFzayk7XHJcbiAgICB0YXNrLnByb2plY3RJRCA9IHByb2plY3QuaWQ7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBwcm9qZWN0IGV4aXN0c1xyXG4gIGNvbnN0IF9leGlzdHMgPSAoaXRlbVRvQ2hlY2ssIGxpc3QpID0+IHtcclxuICAgIGxldCBleGlzdHMgPSBmYWxzZTtcclxuXHJcbiAgICBsaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcblxyXG4gICAgICBpZiAoaXRlbVRvQ2hlY2suaWQgPT09IGl0ZW0uaWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhpdGVtVG9DaGVjay5pZCwgaXRlbS5pZCk7XHJcbiAgICAgICAgZXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBleGlzdHM7XHJcbiAgfVxyXG5cclxuICBjb25zdCBfYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleCA9IChwcm9qZWN0LCBwcm9qZWN0cykgPT4ge1xyXG4gICAgaWYgKF9leGlzdHMocHJvamVjdCwgcHJvamVjdHMpID09PSBmYWxzZSkgcHJvamVjdHMucHVzaChwcm9qZWN0KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IF9yZW1vdmVBbGxUYXNrc0Zyb21Qcm9qZWN0ID0gKHByb2plY3QpID0+IHtcclxuICAgIGNvbnN0IHRhc2tzID0gcHJvamVjdC50YXNrcztcclxuICAgIGlmICh0YXNrcy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgIHRhc2tzLnNwbGljZSgwLCB0YXNrcy5sZW5ndGgtMSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBfcmVtb3ZlUHJvamVjdEZyb21MaXN0ID0gKHByb2plY3RUb1JlbW92ZSwgcHJvamVjdHMpID0+IHtcclxuICAgIGlmIChwcm9qZWN0cy5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICBwcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0LCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAocHJvamVjdFRvUmVtb3ZlLmlkID09PSBwcm9qZWN0LmlkKSB7XHJcbiAgICAgICAgX3JlbW92ZUFsbFRhc2tzRnJvbVByb2plY3QocHJvamVjdCk7XHJcbiAgICAgICAgcHJvamVjdHMuc3BsaWNlKGluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBlbGVtZW50cyA9IHtcclxuICAgIG5vdGlmaWNhdGlvbnMgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1ub3RpZnknKSxcclxuICAgIGFzaWRlICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWFzaWRlLXByb2plY3RzJyksXHJcbiAgICBkYXNoYm9hcmQgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhc2hib2FyZC10YXNrcycpXHJcbiAgfVxyXG5cclxuICBjb25zdCB2aWV3ID0ge1xyXG4gICAgdXBkYXRlUHJvamVjdFRhc2tUb3RhbDogZnVuY3Rpb24ocHJvamVjdHMpIHtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgIGZvciAoY29uc3QgcHJvamVjdExpc3Qgb2YgZWxlbWVudHMuYXNpZGUuY2hpbGRyZW4pIHtcclxuXHJcbiAgICAgICAgICBpZiAocHJvamVjdC5pZCA9PT0gcHJvamVjdExpc3QuaWQpIHtcclxuICAgICAgICAgICAgaWYgKHByb2plY3QudGFza3MubGVuZ3RoID09PSAwKSByZXR1cm4gcHJvamVjdExpc3QuY2hpbGRyZW5bMV0udGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgICAgICAgcHJvamVjdExpc3QuY2hpbGRyZW5bMV0udGV4dENvbnRlbnQgPSBwcm9qZWN0LnRhc2tzLmxlbmd0aDtcclxuICAgICAgICAgIH0gIFxyXG4gICAgICAgIH0gXHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlTm90aWZpY2F0aW9uczogZnVuY3Rpb24ocHJvamVjdHMpIHtcclxuICAgICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XHJcbiAgICAgICAgaWYgKHByb2plY3QudGFza3MubGVuZ3RoICE9PSAwKSAgcmV0dXJuIGVsZW1lbnRzLm5vdGlmaWNhdGlvbnMuY2xhc3NMaXN0LmFkZCgnbm90aWZ5Jyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudHMubm90aWZpY2F0aW9ucy5jbGFzc0xpc3QucmVtb3ZlKCdub3RpZnknKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBjb25zdCBjb250cm9sbGVyID0ge1xyXG4gICAgb2JzZXJ2ZXJzOiB7Y29uZmlnIDogeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfX0sXHJcbiAgICBwcm9qZWN0czogcHJvamVjdHMsXHJcblxyXG4gICAgc29ydDogKHNvcnRCeSkgPT4ge1xyXG4gICAgICBpZiAocHJvamVjdHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgIHJldHVybiBwcm9qZWN0cy5maWx0ZXIoKCBwcm9qZWN0LCBpbmRleCApID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRhc2sgb2YgcHJvamVjdCkgeyBpZiAodGFzay5kdWVEYXRlID09PSBEYXRlLm5vdygpKSBjb25zb2xlLmxvZygnbWF0Y2gnKX1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb250cm9sbGVyLm9ic2VydmVycy5kYXNoYm9hcmQgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25MaXN0LCBvYnNlcnZlcikgPT4ge1xyXG4gICAgdmlldy51cGRhdGVQcm9qZWN0VGFza1RvdGFsKHByb2plY3RzKTtcclxuICAgIHZpZXcudXBkYXRlTm90aWZpY2F0aW9ucyhwcm9qZWN0cyk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnRyb2xsZXIub2JzZXJ2ZXJzLmRhc2hib2FyZC5vYnNlcnZlKGVsZW1lbnRzLmRhc2hib2FyZCwgY29udHJvbGxlci5vYnNlcnZlcnMuY29uZmlnKTtcclxuXHJcblxyXG4gIHJldHVybiB7XHJcblxyXG4gICAgcHJvamVjdHMsXHJcbiAgICBfbm90aWZ5UHJvamVjdCxcclxuXHJcbiAgICBfZ2V0VGFza1Byb2plY3QsXHJcbiAgICBfYWRkVGFza1RvUHJvamVjdCxcclxuICAgIF9yZW1vdmVQcm9qZWN0RnJvbUxpc3QsXHJcbiAgICBfcmVtb3ZlQWxsVGFza3NGcm9tUHJvamVjdCxcclxuICAgIF9hZGRQcm9qZWN0VG9Qcm9qZWN0c0luZGV4LFxyXG4gIH1cclxuXHJcbn0pKCk7XHJcblxyXG5sZXQgYyA9ICdjcmVhdGUnO1xyXG5sZXQgczEgPSAnc2VsZWN0T25lJztcclxubGV0IHMwID0gJ3NlbGVjdEFsbCc7XHJcblxyXG5pbXBvcnQgRG9jIGZyb20gJy4vRG9jJztcclxuY29uc3QgZGFzaGJvYXJkID0gRG9jKHMxLCAnLmRhc2hib2FyZC10YXNrcycpO1xyXG5cclxuY29uc3QgbmV3VGFza0J1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9pbnRlcicpO1xyXG5cclxubmV3VGFza0J1dHRvbnMuZm9yRWFjaChidG4gPT4ge1xyXG4gIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dUYXNrRm9ybSk7XHJcbn0pO1xyXG5cclxubGV0IGNsaWNrQ291bnQgPSAwO1xyXG5cclxuIC8vIE1vZGFsXHJcbmNvbnN0IHRhc2tNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpYWxvZycpO1xyXG5cclxuLy8gZGF0ZSBpbnB1dFxyXG5jb25zdCBteURheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1kYXknKS5jaGlsZHJlblswXVxyXG5jb25zdCBteU1vbnRoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LW1vbnRoJykuY2hpbGRyZW5bMF1cclxuY29uc3QgbXlZZWFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LXllYXInKS5jaGlsZHJlblswXVxyXG5cclxubXlEYXkudGV4dENvbnRlbnQgICA9ICdkYXknO1xyXG5teU1vbnRoLnRleHRDb250ZW50ID0gJ21vbnRoJztcclxubXlZZWFyLnRleHRDb250ZW50ICA9ICd5ZWFyJztcclxuXHJcbi8vIGNsb3NlIGNhbGVuZGFyID9cclxubGV0IGxhc3RTZWxlY3RlZE1vbnRoID0gJydcclxuXHJcbi8vIC8vIENBTEVOREFSXHJcbmNvbnN0IGNhbGVuZGFyID0gQ2FsZW5kYXIoKTtcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LWNhbGVuZGFyJykuYXBwZW5kQ2hpbGQoY2FsZW5kYXIuY29udGFpbmVyKTtcclxuXHJcbiAgLy8gY2FsZW5kYXIgbmF2aWdhdGlvbiBidXR0b25zXHJcbmNhbGVuZGFyLm5hdkxlZnQuZGF0YXNldC5pbmRleCA9IGdldE1vbnRoKCBEYXRlLm5vdygpICkrMTtcclxuXHJcbmNhbGVuZGFyLm5hdkxlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgXHJcbiAgY2FsZW5kYXIubmF2TGVmdC5kYXRhc2V0LmluZGV4ID0gTnVtYmVyKGNhbGVuZGFyLm5hdkxlZnQuZGF0YXNldC5pbmRleCk7ICAgIC8vXHJcbiAgY2FsZW5kYXIubmF2UmlnaHQuZGF0YXNldC5pbmRleCA9IE51bWJlcihjYWxlbmRhci5uYXZSaWdodC5kYXRhc2V0LmluZGV4KTsgIC8vXHJcbiAgICAgIFxyXG4gIGNhbGVuZGFyLm5hdkxlZnQuZGF0YXNldC5pbmRleC0tO1xyXG4gIGNhbGVuZGFyLm5hdlJpZ2h0LmRhdGFzZXQuaW5kZXgtLTtcclxuICBcclxuICBpZiAoTnVtYmVyKGNhbGVuZGFyLm5hdkxlZnQuZGF0YXNldC5pbmRleCkgPD0gMCkge1xyXG4gICAgY2FsZW5kYXIubmF2TGVmdC5kYXRhc2V0LmluZGV4ICA9IDEyOyBcclxuICAgIGNhbGVuZGFyLm5hdlJpZ2h0LmRhdGFzZXQuaW5kZXggPSAxMjtcclxuICB9XHJcbiAgXHJcbiAgZm9yKGxldCBtb250aCBvZiBjYWxlbmRhci5jb250YWluZXIuY2hpbGRyZW4pIHtcclxuICAgIGNvbnNvbGUuZGlyKG1vbnRoKTtcclxuICAgICAgICBcclxuICAgIGlmIChtb250aC50YWdOYW1lID09PSAnRElWJykge1xyXG4gIFxyXG4gICAgICBpZiAoTnVtYmVyKGNhbGVuZGFyLm5hdkxlZnQuZGF0YXNldC5pbmRleCkgPT09IE51bWJlcihtb250aC5pZCkpIHtcclxuICAgICAgICBtb250aC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIGxhc3RTZWxlY3RlZE1vbnRoID0gbW9udGg7XHJcbiAgICAgIH0gXHJcbiAgICAgIGVsc2UgeyBcclxuICAgICAgICBtb250aC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuICB9O1xyXG59KTtcclxuICBcclxuY2FsZW5kYXIubmF2UmlnaHQuZGF0YXNldC5pbmRleCA9IGdldE1vbnRoKCBEYXRlLm5vdygpICkrMTtcclxuICBcclxuY2FsZW5kYXIubmF2UmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgXHJcbiAgY2FsZW5kYXIubmF2UmlnaHQuZGF0YXNldC5pbmRleCA9IE51bWJlcihjYWxlbmRhci5uYXZSaWdodC5kYXRhc2V0LmluZGV4KTtcclxuICBjYWxlbmRhci5uYXZMZWZ0LmRhdGFzZXQuaW5kZXggPSBOdW1iZXIoY2FsZW5kYXIubmF2TGVmdC5kYXRhc2V0LmluZGV4KTtcclxuICBcclxuICBjYWxlbmRhci5uYXZSaWdodC5kYXRhc2V0LmluZGV4Kys7XHJcbiAgY2FsZW5kYXIubmF2TGVmdC5kYXRhc2V0LmluZGV4Kys7XHJcbiAgXHJcbiAgaWYgKE51bWJlcihjYWxlbmRhci5uYXZSaWdodC5kYXRhc2V0LmluZGV4KSA+PSAxMykge1xyXG4gICAgY2FsZW5kYXIubmF2UmlnaHQuZGF0YXNldC5pbmRleCA9IDE7IFxyXG4gICAgY2FsZW5kYXIubmF2TGVmdC5kYXRhc2V0LmluZGV4ICA9IDE7XHJcbiAgfVxyXG4gICAgICBcclxuICBmb3IobGV0IG1vbnRoIG9mIGNhbGVuZGFyLmNvbnRhaW5lci5jaGlsZHJlbikge1xyXG4gICAgY29uc29sZS5kaXIobW9udGgpO1xyXG4gIFxyXG4gICAgaWYgKG1vbnRoLnRhZ05hbWUgPT09ICdESVYnKSB7XHJcbiAgXHJcbiAgICAgIGlmIChOdW1iZXIoY2FsZW5kYXIubmF2UmlnaHQuZGF0YXNldC5pbmRleCkgPT09IE51bWJlcihtb250aC5pZCkpIHtcclxuICAgICAgICBtb250aC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIGxhc3RTZWxlY3RlZE1vbnRoID0gbW9udGg7XHJcbiAgICAgIH0gXHJcbiAgICAgIGVsc2UgeyBcclxuICAgICAgICBtb250aC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuICB9OyAgXHJcbn0pO1xyXG5cclxuY29uc3QgZGF5c0luTW9udGhzID0gY2FsZW5kYXIuY29udGFpbmVyLmNoaWxkTm9kZXNcclxuZGF5c0luTW9udGhzLmZvckVhY2gobW9udGggPT4ge1xyXG4gIGlmIChtb250aC50YWdOYW1lID09PSAnRElWJykge1xyXG4gICAgbW9udGguY2hpbGRyZW5bMV0uY2hpbGROb2Rlcy5mb3JFYWNoKGRheSA9PiBkYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBoYW5kbGVDYWxlbmRhcihlLCBtb250aClcclxuICAgIH0pKTtcclxuICB9XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2FsZW5kYXIoZGF5LCBtb250aCkge1xyXG4gIG15RGF5LnRleHRDb250ZW50ID0gZGF5LnRhcmdldC50ZXh0Q29udGVudDtcclxuICBteU1vbnRoLnRleHRDb250ZW50ID0gbW9udGguaWQ7XHJcblxyXG4gIGlmIChteVllYXIudGV4dENvbnRlbnQgPT09ICd5ZWFyJykgbXlZZWFyLnRleHRDb250ZW50ID0gZ2V0WWVhciggRGF0ZS5ub3coKSApO1xyXG59XHJcbiAgXHJcbmNvbnN0IGNsb3NlQ2FsZW5kYXIgPSBEb2MoczEsICcuY2xvc2UtY2FsZW5kYXItYnRuJyk7XHJcbmNsb3NlQ2FsZW5kYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gIGlmIChsYXN0U2VsZWN0ZWRNb250aCAhPT0gJycpIHtcclxuICAgIGxhc3RTZWxlY3RlZE1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICB9XHJcblxyXG4gIHllYXIuZm9jdXMoKTtcclxuICBjYWxlbmRhci5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG59KTtcclxuLy8gQ0FMRU5EQVIgRU5EXHJcblxyXG4vLyBZZWFyIGlucHV0XHJcbmNvbnN0IHllYXJVcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy55ZWFyLW5hdi11cCcpO1xyXG5jb25zdCB5ZWFyRG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcueWVhci1uYXYtZG93bicpO1xyXG5cclxueWVhclVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICBpZiAobXlZZWFyLnRleHRDb250ZW50ID09PSAneWVhcicpIHJldHVybiBteVllYXIudGV4dENvbnRlbnQgPSBnZXRZZWFyKCBEYXRlLm5vdygpICk7XHJcblxyXG4gIGxldCBpbmNyZW1lbnQgPSBOdW1iZXIobXlZZWFyLnRleHRDb250ZW50KTtcclxuICBpbmNyZW1lbnQrKztcclxuICBteVllYXIudGV4dENvbnRlbnQgPSBpbmNyZW1lbnQ7XHJcblxyXG4gIGlmIChteURheS50ZXh0Q29udGVudCAgID09PSAnZGF5JykgbXlEYXkudGV4dENvbnRlbnQgPSBnZXREYXkoIERhdGUubm93KCkgKTtcclxuICBpZiAobXlNb250aC50ZXh0Q29udGVudCA9PT0gJ21vbnRoJykgbXlEYXkudGV4dENvbnRlbnQgPSBnZXRNb250aCggRGF0ZS5ub3cgKTtcclxufSk7XHJcblxyXG55ZWFyRG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gIGlmIChteVllYXIudGV4dENvbnRlbnQgPT09ICd5ZWFyJykgcmV0dXJuIG15WWVhci50ZXh0Q29udGVudCA9IGdldFllYXIoIERhdGUubm93KCkgKTtcclxuXHJcbiAgbGV0IGRlaW5jcmVtZW50ID0gTnVtYmVyKG15WWVhci50ZXh0Q29udGVudCk7XHJcbiAgZGVpbmNyZW1lbnQtLTtcclxuICBteVllYXIudGV4dENvbnRlbnQgPSBkZWluY3JlbWVudDtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBzaG93VGFza0Zvcm0oZSkge1xyXG5cclxuICB0YXNrTW9kYWwuc2hvd01vZGFsKCk7XHJcblxyXG4gIC8vIGNvbnN0IG5ld1Rhc2sgPSB7fTtcclxuICAvLyBuZXdUYXNrLm5hbWUgPSAndW5zZXQnO1xyXG4gIC8vIG5ld1Rhc2sucHJvamVjdCA9ICdVc2VyJztcclxuICAvLyBuZXdUYXNrLmRhdGUgPSAndW5zZXQnO1xyXG4gIC8vIG5ld1Rhc2sudGltZSA9ICd1bnNldCc7XHJcbiAgLy8gbmV3VGFzay5wcmlvcml0eSA9ICd3aGl0ZSc7XHJcbiAgLy8gbmV3VGFzay5jb21tZW50ID0gJ25vbmUnO1xyXG5cclxuICBjb25zdCBuZXdUYXNrID0gVGFzay5jcmVhdGUoKTtcclxuXHJcbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcclxuICBjb25zdCBpbnB1dHMgPSBmb3JtLmVsZW1lbnRzO1xyXG4gIGNvbnN0IGZsYWdJY29ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmlvcml0eS1mbGFnJyk7XHJcbiAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FuY2VsJyk7XHJcblxyXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZm9ybUhhbmRsZXIpO1xyXG5cclxuICBmbGFnSWNvbnMuZm9yRWFjaChmbGFnID0+IHtcclxuICAgIGZsYWcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRQcmlvcnRpeSk7XHJcbiAgfSk7XHJcblxyXG4gIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZVRhc2tGb3JtKTtcclxuXHJcbiAgZnVuY3Rpb24gZm9ybUhhbmRsZXIoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIG5ld1Rhc2submFtZSA9IGlucHV0c1tcInRhc2tcIl0udmFsdWU7XHJcbiAgICBuZXdUYXNrLnByb2plY3QgPSBpbnB1dHNbXCJwcm9qZWN0XCJdLnZhbHVlO1xyXG5cclxuICAgIGlmIChuZXdUYXNrLnByb2plY3QgPT09ICcnKSBuZXdUYXNrLnByb2plY3QgPSAnVXNlcic7XHJcbiAgICAvLyBUT0RPIGFkZCBwcm9qZWN0IGRvdCBjb2xvdXIgIVxyXG5cclxuICAgIGNvbnN0IHByb2plY3QgPSBUb2RvLl9nZXRUYXNrUHJvamVjdChuZXdUYXNrLnByb2plY3QsIFRvZG8ucHJvamVjdHMpO1xyXG4gICAgVG9kby5fYWRkVGFza1RvUHJvamVjdChuZXdUYXNrLCBwcm9qZWN0KTtcclxuXHJcbiAgICAvLyBEQVRFXHJcbiAgICAvL25ld1Rhc2suY3JlYXRpb25EYXRlID0gZm9ybWF0KCBEYXRlLm5vdygpLCAnZGQvTU0veXl5eScgKTtcclxuICAgIG5ld1Rhc2suY3JlYXRpb25EYXRlID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICBjb25zdCBteURhdGUgPSBbIE51bWJlcihteURheS50ZXh0Q29udGVudCksIE51bWJlcihtb250aC50ZXh0Q29udGVudCksIE51bWJlcihteVllYXIudGV4dENvbnRlbnQpIF07XHJcblxyXG4gICAgbXlEYXRlLmZvckVhY2goIGRhdGUgPT4ge1xyXG4gICAgICBpZiAoIGlzTmFOKGRhdGUpICkgbmV3VGFzay5kdWVEYXRlID0gJyc7XHJcbiAgICAgIGVsc2UgbmV3VGFzay5kdWVEYXRlID0gbmV3IERhdGUoIG15RGF0ZVsyXSwgbXlEYXRlWzFdLCBteURhdGVbMF0gKTtcclxuICAgICAgLy9uZXdUYXNrLmR1ZURhdGUgPSBmb3JtYXQoIG5ldyBEYXRlKCBteURhdGVbMl0sIG15RGF0ZVsxXSwgbXlEYXRlWzBdKSwgJ2RkL01NL3l5eXknICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLnRhYmxlKG5ld1Rhc2suZHVlRGF0ZSwgbmV3VGFzay5jcmVhdGlvbkRhdGUpO1xyXG4gICAgY29uc3QgdG9kYXkgPSBpc0Z1dHVyZShuZXdUYXNrLmR1ZURhdGUpO1xyXG4gICAgY29uc3QgdXBjb21pbmcgPSBpc0Z1dHVyZShuZXdUYXNrLmNyZWF0aW9uRGF0ZSk7XHJcblxyXG4gICAgY29uc29sZS5sb2codG9kYXksIHVwY29taW5nKTtcclxuXHJcbiAgICBuZXdUYXNrLnRpbWUgPSBpbnB1dHNbXCJ0aW1lXCJdLnZhbHVlO1xyXG4gICAgbmV3VGFzay5jb21tZW50ID0gaW5wdXRzW1wiY29tbWVudFwiXS52YWx1ZTtcclxuXHJcbiAgICBsZXQgbGFzdEluZGV4ID0gVG9kby5wcm9qZWN0cy5sZW5ndGg7XHJcblxyXG4gICAgVG9kby5fYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleChwcm9qZWN0LCBUb2RvLnByb2plY3RzKTtcclxuXHJcbiAgICBpZiAobGFzdEluZGV4ICE9PSBUb2RvLnByb2plY3RzLmxlbmd0aCkge1xyXG4gICAgICAvLyBDcmVhdGUgbmV3IGdyb3VwXHJcbiAgICAgIEdyb3VwKHByb2plY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUudGFibGUobmV3VGFzayk7XHJcbiAgICAvLyBjb25zb2xlLnRhYmxlKHByb2plY3QpO1xyXG4gICAgLy8gY29uc29sZS50YWJsZShUb2RvLnByb2plY3RzKTtcclxuXHJcbiAgICBjb25zdCBuZXdUYXNrQ2FyZCA9IENhcmQobmV3VGFzayk7XHJcbiAgICBkYXNoYm9hcmQuYXBwZW5kQ2hpbGQobmV3VGFza0NhcmQpO1xyXG5cclxuICAgIHRhc2tNb2RhbC5jbG9zZSgpO1xyXG4gICAgY2xpY2tDb3VudCsrO1xyXG4gIFxyXG4gICAgZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmb3JtSGFuZGxlcik7XHJcblxyXG4gICAgZmxhZ0ljb25zLmZvckVhY2goZmxhZyA9PiB7XHJcbiAgICAgIGZsYWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRQcmlvcnRpeSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjbG9zZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVUYXNrRm9ybSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRQcmlvcnRpeShlKSB7XHJcbiAgICBuZXdUYXNrLnByaW9yaXR5RmxhZyA9IGdldENvbXB1dGVkU3R5bGUoZS50YXJnZXQpLmNvbG9yO1xyXG4gICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuc3R5bGUuY29sb3IgPSBuZXdUYXNrLnByaW9yaXR5RmxhZztcclxuXHJcbiAgICBmb3IobGV0IG5vZGUgb2YgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0uY2xhc3NMaXN0LnRvZ2dsZSgnaWNvbi1zZWxlY3Rvci12aXNpYmlsaXR5Jyk7IFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGlkZVRhc2tGb3JtKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICB0YXNrTW9kYWwuY2xvc2UoKTtcclxuICAgIGNsaWNrQ291bnQrKztcclxuXHJcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiBuZXdUYXNrKSB7IGRlbGV0ZSBuZXdUYXNrW3Byb3BlcnR5XSB9XHJcblxyXG4gICAgZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmb3JtSGFuZGxlcik7XHJcblxyXG4gICAgZmxhZ0ljb25zLmZvckVhY2goZmxhZyA9PiB7XHJcbiAgICAgIGZsYWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRQcmlvcnRpeSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjbG9zZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVUYXNrRm9ybSk7XHJcbiAgfVxyXG5cclxuICAvLyBpZiAoY2xpY2tDb3VudCA+IDIpIHtcclxuICAvLyAgIGNvbnNvbGUubG9nKGNsb3NlQnV0dG9uKTtcclxuXHJcbiAgLy8gICBmbGFnSWNvbnMuZm9yRWFjaChmbGFnID0+IGNvbnNvbGUubG9nKGZsYWcpKTtcclxuICAvLyB9IFxyXG4gIFxyXG59XHJcblxyXG4vL3Nob3dUYXNrRm9ybSgnb2snKTtcclxuXHJcbmNvbnN0IHRha3NJY29ucyAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy10YXNrLWljb24nKTtcclxuY29uc3QgbmV3VGFza0lucHV0ID0gRG9jKHMxLCAnLmlucHV0LXRhc2snKTtcclxubmV3VGFza0lucHV0LmJsdXIoKTtcclxuXHJcbmNvbnN0IHByb2plY3RJbnB1dCAgICA9IERvYyhzMSwgJy5pbnB1dC1wcm9qZWN0Jyk7XHJcbmNvbnN0IHByb2plY3REcnBEbiAgICA9IERvYyhzMSwgJy5pbnB1dC1kcm9wZG93bi1pY29uJyk7XHJcbmNvbnN0IHByb2plY3RJbnB1dEdycCA9IERvYyhzMSwgJy5kcm9wZG93bi1zZXQtcHJvamVjdCcpO1xyXG5cclxuY29uc3QgbW9kYWxJY29ucyA9IHtcclxuICB0YXNrOiAgICB7IGlucHV0OiBuZXdUYXNrSW5wdXQgfSwgXHJcbiAgcHJvamVjdDogeyBncm91cDogcHJvamVjdElucHV0R3JwLCBpbnB1dDogcHJvamVjdElucHV0LCBpY29uOiBwcm9qZWN0RHJwRG4sIG1lbnU6IFtdLCBjb3VudDogMCB9LFxyXG59XHJcblxyXG5jb25zdCBkYXkgICA9IERvYyhzMSwgJy5pbnB1dC1kYXknICApO1xyXG5jb25zdCBtb250aCA9IERvYyhzMSwgJy5pbnB1dC1tb250aCcpO1xyXG5jb25zdCB5ZWFyICA9IERvYyhzMSwgJy5pbnB1dC15ZWFyJyApO1xyXG5cclxuY29uc3QgZGF0ZSA9IFsgZGF5LCBtb250aCwgeWVhciwgY2FsZW5kYXIuY29udGFpbmVyIF07XHJcblxyXG5jb25zdCB0aW1lSW5wdXQgICAgPSBEb2MoczEsICcuaW5wdXQtdGltZScpO1xyXG5jb25zdCBjb21tZW50SW5wdXQgPSBEb2MoczEsICcuaW5wdXQtY29tbWVudCcpO1xyXG5cclxuY29uc3QgaW5wdXRzID0gW1xyXG4gIG5ld1Rhc2tJbnB1dCwgXHJcbiAgcHJvamVjdElucHV0LCBwcm9qZWN0RHJwRG4sXHJcbiAgZGF5LCBtb250aCwgeWVhciwgY2FsZW5kYXIuY29udGFpbmVyLCBsYXN0U2VsZWN0ZWRNb250aCxcclxuICB0aW1lSW5wdXQsXHJcbiAgY29tbWVudElucHV0XHJcbl07XHJcblxyXG5wcm9qZWN0RHJwRG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gIGlmIChtb2RhbEljb25zLnByb2plY3QubWVudS5sZW5ndGggPT09IDApIHtcclxuXHJcbiAgICBjb25zdCBzZWxlY3RDb250YWluZXIgPSBEb2MoYywgJ3VsJyk7XHJcbiAgICBzZWxlY3RDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1zZWxlY3QtbWVudScpO1xyXG4gICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuICAgIHNlbGVjdENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICBzZWxlY3RDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuXHJcbiAgICAgIGlmIChUb2RvLnByb2plY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gRG9jKGMsICdsaScpO1xyXG4gICAgICAgIHNlbGVjdG9yLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3Qtc2VsZWN0b3InKTtcclxuICAgICAgICBzZWxlY3Rvci50ZXh0Q29udGVudCA9ICdFbXB0eSc7XHJcbiAgICAgICAgc2VsZWN0b3Iuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgIHNlbGVjdG9yLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgICBzZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0b3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgVG9kby5wcm9qZWN0cykge1xyXG4gICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBEb2MoYywgJ2xpJyk7XHJcbiAgICAgICAgICBzZWxlY3Rvci5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXNlbGVjdG9yJyk7XHJcbiAgICAgICAgICBzZWxlY3Rvci5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcbiAgICAgICAgICBzZWxlY3Rvci50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcclxuXHJcbiAgICAgICAgICBzZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGlyKGUudGFyZ2V0LnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICBwcm9qZWN0SW5wdXQudmFsdWUgPSBzZWxlY3Rvci50ZXh0Q29udGVudDtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBtb2RhbEljb25zLnByb2plY3QubWVudS5wdXNoKHNlbGVjdENvbnRhaW5lcik7XHJcbiAgICBtb2RhbEljb25zLnByb2plY3QuZ3JvdXAuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGFpbmVyKTsgIFxyXG4gIH1cclxuXHJcbiAgZWxzZSB7XHJcbiAgICBtb2RhbEljb25zLnByb2plY3QubWVudVswXS5yZW1vdmUoKTtcclxuICAgIG1vZGFsSWNvbnMucHJvamVjdC5tZW51ID0gW107XHJcbiAgfVxyXG5cclxufSk7XHJcblxyXG5cclxudGFrc0ljb25zLmZvckVhY2goaWNvbiA9PiB7XHJcbiAgaWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcblxyXG4gICAgZm9yIChjb25zdCBpY29uIG9mIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5jaGlsZHJlbikge1xyXG4gICAgICBpZiAoaWNvbi5jaGlsZE5vZGVzWzFdICE9PSB1bmRlZmluZWQpIGljb24uY2hpbGROb2Rlc1sxXS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC1pY29uLXNlbGVjdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgaWYgKGlucHV0ICE9PSAnJykgaW5wdXQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgfSk7XHJcbiAgICAgIFxyXG5cclxuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ21vZGFsLWljb24tc2VsZWN0Jyk7XHJcbiAgICBcclxuICAgIHN3aXRjaChlLnRhcmdldC5jbGFzc0xpc3RbMl0pIHtcclxuICAgICAgLy8gY2FzZSAnY2FsJzpcclxuICAgICAgY2FzZSAncGVuJzpcclxuICAgICAgICBuZXdUYXNrSW5wdXQuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICBuZXdUYXNrSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ3Byaic6XHJcbiAgICAgICAgcHJvamVjdElucHV0LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgcHJvamVjdERycERuLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgcHJvamVjdElucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICd0YWcnOlxyXG4gICAgICAgIGlmIChsYXN0U2VsZWN0ZWRNb250aCAhPT0gJycpIHtcclxuICAgICAgICAgIGxhc3RTZWxlY3RlZE1vbnRoLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgICBsYXN0U2VsZWN0ZWRNb250aCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmb3IoY29uc3QgdmFsdWUgb2YgZGF0ZSkge1xyXG4gICAgICAgICAgdmFsdWUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZ2V0RGF5c0luTW9udGgoXHJcbiAgICAgICAgLy8gICBuZXcgRGF0ZShOdW1iZXIoeWVhci50ZXh0Q29udGVudCksIE51bWJlcihtb250aC50ZXh0Q29udGVudCktMSkpKTtcclxuICAgICAgICBcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2Nsayc6XHJcbiAgICAgICAgdGltZUlucHV0LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgdGltZUlucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdmbGcnOlxyXG4gICAgICAgIHByaW9yaXR5RGlzcGxheUhhbmRsZXIoZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdjbXQnOlxyXG4gICAgICAgIGNvbW1lbnRJbnB1dC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIGNvbW1lbnRJbnB1dC5mb2N1cygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHByaW9yaXR5RGlzcGxheUhhbmRsZXIoZWxlbWVudCkge1xyXG4gIGVsZW1lbnQudGFyZ2V0LmNoaWxkcmVuWzBdLmNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdMSScpIHtcclxuICAgICAgbm9kZS5jaGlsZE5vZGVzWzBdLmNsYXNzTGlzdC50b2dnbGUoJ2ljb24tc2VsZWN0b3ItdmlzaWJpbGl0eScpO1xyXG4gICAgfVxyXG4gIH0pOyAgXHJcbn1cclxuXHJcbi8vIGFzaWRlIC0gRGF0ZXMgTWVudVxyXG5jb25zdCBkYXRlc0FzaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcC1hc2lkZS1jYWxlbmRhcicpO1xyXG5cclxuZm9yIChsZXQgc2VjdGlvbiBvZiBkYXRlc0FzaWRlLmNoaWxkcmVuKSB7XHJcbiAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICBmb3IobGV0IG5vZGUgb2YgZGF0ZXNBc2lkZS5jaGlsZHJlbikgeyBub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWFzaWRlLWhpZ2hsaWdodCcpOyB9XHJcblxyXG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnanMtYXNpZGUtaGlnaGxpZ2h0Jyk7XHJcbiAgICBnZXRUb2RheXNUYXNrcyhlKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9kYXlzVGFza3MoZSkge1xyXG4gIHN3aXRjaChlLnRhcmdldC50ZXh0Q29udGVudC50cmltKCkpIHtcclxuICAgIGNhc2UgJ1Rhc2tzJzpcclxuICAgICAgY29uc29sZS5sb2coJ3Rhc2tzLXRhYicpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ1RvZGF5JzpcclxuICAgICAgY29uc29sZS5sb2coJ3RvZGF5LXRhYicpO1xyXG4gICAgICBUb2RvLmNvblxyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ1VwY29taW5nJzpcclxuICAgICAgY29uc29sZS5sb2coJ3VwY29taW5nLXRhYicpO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn1cclxuXHJcbi8vIHR1cm4gaW50byBncm91cCBpZiBtb3JlIGRyb3Bkb3ducyByZXF1aXJlZFxyXG5jb25zdCBwcm9qZWN0c0Ryb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXByb2plY3RzLWRyb3Bkb3duJyk7XHJcbnByb2plY3RzRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QudG9nZ2xlKCdkcm9wZG93bi1tZW51Jyk7XHJcbiAgZS50YXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblsxXS5jbGFzc0xpc3QudG9nZ2xlKCdkcm9wZG93bi1zdGF0ZScpXHJcbn0pO1xyXG5cclxuLy8gZ2VuZXJhdGUgZGFzaGJvYXJkIHRhc2tcclxuZnVuY3Rpb24gQ2FyZCh0YXNrKSB7XHJcbiAgY29uc3QgY2FyZEl0ZW0gPSBEb2MoYywgJ2xpJyk7XHJcbiAgY2FyZEl0ZW0uaWQgPSB0YXNrLmlkO1xyXG4gIGNhcmRJdGVtLmRhdGFzZXQucHJvamVjdCA9IHRhc2sucHJvamVjdElEO1xyXG4gIGNhcmRJdGVtLmNsYXNzTGlzdC5hZGQoJ3Rhc2stY2FyZCcpO1xyXG5cclxuICBjb25zdCBpRmxhZyA9IERvYyhjLCAnaScpO1xyXG4gIGlGbGFnLmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gIGlGbGFnLmNsYXNzTGlzdC5hZGQoJ2ZhLWZsYWcnKTtcclxuICBpRmxhZy5jbGFzc0xpc3QuYWRkKCd0YXNrLXByaW9yaXR5Jyk7XHJcbiAgaUZsYWcuc3R5bGUuY29sb3IgPSB0YXNrLnByaW9yaXR5RmxhZztcclxuICBjYXJkSXRlbS5hcHBlbmRDaGlsZChpRmxhZyk7XHJcblxyXG4gIGNvbnN0IHRhc2tJbmZvQm94ID0gRG9jKGMsICdkaXYnKTtcclxuICB0YXNrSW5mb0JveC5jbGFzc0xpc3QuYWRkKCd0YXNrLWluZm8nKTtcclxuXHJcbiAgY29uc3QgaGVhZGluZyA9IERvYyhjLCAnaDQnKTtcclxuICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQoJ3Rhc2staGVhZGluZycpO1xyXG4gIGhlYWRpbmcudGV4dENvbnRlbnQgPSB0YXNrLm5hbWU7XHJcbiAgdGFza0luZm9Cb3guYXBwZW5kQ2hpbGQoaGVhZGluZyk7XHJcblxyXG4gIC8vIHVsXHJcbiAgY29uc3QgdGFza0xpc3QgPSBEb2MoYywgJ3VsJyk7XHJcbiAgdGFza0xpc3QuY2xhc3NMaXN0LmFkZCgndGFzay1kZXRhaWxzJyk7XHJcbiAgdGFza0luZm9Cb3guYXBwZW5kQ2hpbGQodGFza0xpc3QpO1xyXG5cclxuICAvLyBsaSAtIFRpbWVcclxuICBjb25zdCB0aW1lSXRlbSA9IERvYyhjLCAnbGknKTtcclxuICB0aW1lSXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLXRpbWUnKTtcclxuXHJcbiAgY29uc3QgaVRpbWUgPSBEb2MoYywgJ2knKTtcclxuICBpVGltZS5jbGFzc0xpc3QuYWRkKCdmYXInKTtcclxuICBpVGltZS5jbGFzc0xpc3QuYWRkKCdmYS1jbG9jaycpO1xyXG4gIGlUaW1lLmNsYXNzTGlzdC5hZGQoJ3Rhc2stdGltZS1pY29uJyk7XHJcbiAgdGltZUl0ZW0uYXBwZW5kQ2hpbGQoaVRpbWUpO1xyXG5cclxuICBjb25zdCBwVGltZSA9IERvYyhjLCAncCcpO1xyXG4gIHBUaW1lLmNsYXNzTGlzdC5hZGQoJ3Rhc2stdGltZS10ZXh0Jyk7XHJcbiAgcFRpbWUudGV4dENvbnRlbnQgPSBgJHt0YXNrLnRpbWV9IFBNYDtcclxuICB0aW1lSXRlbS5hcHBlbmRDaGlsZChwVGltZSk7XHJcblxyXG4gIHRhc2tMaXN0LmFwcGVuZENoaWxkKHRpbWVJdGVtKTtcclxuXHJcbiAgLy8gbGkgLSBEYXRlXHJcbiAgY29uc3QgZGF0ZUl0ZW0gPSBEb2MoYywgJ2xpJyk7XHJcbiAgZGF0ZUl0ZW0uY2xhc3NMaXN0LmFkZCgndGFzay1kYXRlJyk7XHJcblxyXG4gIGNvbnN0IGlEYXRlID0gRG9jKGMsICdpJyk7XHJcbiAgaURhdGUuY2xhc3NMaXN0LmFkZCgnZmFzJyk7XHJcbiAgaURhdGUuY2xhc3NMaXN0LmFkZCgnZmEtdGFnJyk7XHJcbiAgaURhdGUuY2xhc3NMaXN0LmFkZCgndGFzay1kYXRlLWljb24nKTtcclxuICBkYXRlSXRlbS5hcHBlbmRDaGlsZChpRGF0ZSk7XHJcblxyXG4gIGNvbnN0IHBEYXRlID0gRG9jKGMsICdwJyk7XHJcbiAgcERhdGUuY2xhc3NMaXN0LmFkZCgndGFzay1kYXRlLXRleHQnKTtcclxuXHJcbiAgdGFzay5kdWVEYXRlICE9PSAnJyA/IHBEYXRlLnRleHRDb250ZW50ID0gZm9ybWF0KHRhc2suZHVlRGF0ZSwgJ2RkL01NL3l5eXknICkgOiBwRGF0ZS50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICBkYXRlSXRlbS5hcHBlbmRDaGlsZChwRGF0ZSk7XHJcblxyXG4gIHRhc2tMaXN0LmFwcGVuZENoaWxkKGRhdGVJdGVtKTtcclxuXHJcbiAgLy8gbGkgLSBQcm9qZWN0XHJcbiAgY29uc3QgcHJvamVjdEl0ZW0gPSBEb2MoYywgJ2xpJyk7XHJcbiAgcHJvamVjdEl0ZW0uY2xhc3NMaXN0LmFkZCgndGFzay1wcm9qZWN0Jyk7XHJcbiAgcHJvamVjdEl0ZW0uc3R5bGUud2lkdGggPSAnNDUlJ1xyXG5cclxuICBjb25zdCBwUHJvamVjdCA9IERvYyhjLCAncCcpO1xyXG4gIHBQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ3Rhc2stcHJvamVjdC10ZXh0Jyk7XHJcbiAgcFByb2plY3QudGV4dENvbnRlbnQgPSB0YXNrLnByb2plY3Q7XHJcbiAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQocFByb2plY3QpO1xyXG5cclxuICBjb25zdCBpUHJvamVjdCA9IERvYyhjLCAnaScpO1xyXG4gIGlQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gIGlQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ2ZhLWNpcmNsZScpO1xyXG4gIGlQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ3Rhc2stcHJvamVjdC1pY29uJyk7XHJcbiAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQoaVByb2plY3QpO1xyXG4gIHRhc2tMaXN0LmFwcGVuZENoaWxkKHByb2plY3RJdGVtKTtcclxuXHJcbiAgLy9zZWFyY2ggcHJvamVjdHMgLSBtYXRjaCBjb2xvdXJcclxuXHJcbiAgLy8gbGkgLSBSZW1vdmVcclxuICBjb25zdCByZW1vdmVJdGVtID0gRG9jKGMsICdsaScpO1xyXG4gIHJlbW92ZUl0ZW0uY2xhc3NMaXN0LmFkZCgndGFzay1yZW1vdmUnKTtcclxuXHJcbiAgY29uc3QgaVJlbW92ZSA9IERvYyhjLCAnaScpO1xyXG4gIGlSZW1vdmUuY2xhc3NMaXN0LmFkZCgnZmFyJyk7XHJcbiAgaVJlbW92ZS5jbGFzc0xpc3QuYWRkKCdmYS10cmFzaC1hbHQnKTtcclxuICBpUHJvamVjdC5jbGFzc0xpc3QuYWRkKCd0YXNrLXJlbW92ZS1pY29uJyk7XHJcbiAgcmVtb3ZlSXRlbS5hcHBlbmRDaGlsZChpUmVtb3ZlKTtcclxuICB0YXNrTGlzdC5hcHBlbmRDaGlsZChyZW1vdmVJdGVtKTtcclxuXHJcbiAgY29uc29sZS5sb2coYFRhc2sgSUQ6ICR7Y2FyZEl0ZW0uaWR9YCk7XHJcblxyXG4gIGlSZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjYXJkSXRlbS5jbGFzc0xpc3QuYWRkKCdyZW1vdmUtdGFzaycpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBUb2RvLl9ub3RpZnlQcm9qZWN0KHRhc2ssICdyZW1vdmUnKTtcclxuICAgICAgLy9Ub2RvLl9ub3RpZnlQcm9qZWN0KGNhcmRJdGVtLCAncmVtb3ZlJyk7XHJcbiAgICAgIGNhcmRJdGVtLnJlbW92ZSgpO1xyXG4gICAgfSwgMTIwMCk7XHJcbiAgfSk7XHJcblxyXG4gIGNhcmRJdGVtLmFwcGVuZENoaWxkKHRhc2tJbmZvQm94KTtcclxuXHJcbiAgcmV0dXJuIGNhcmRJdGVtO1xyXG59XHJcblxyXG5jb25zdCB0YWJQcm9qZWN0c0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWFzaWRlLXByb2plY3RzJyk7XHJcblxyXG5mdW5jdGlvbiBHcm91cChwcm9qZWN0KSB7XHJcbiAgLy8gbGlcclxuICBjb25zdCBwcm9qZWN0SXRlbSA9IERvYyhjLCAnbGknKTtcclxuICBwcm9qZWN0SXRlbS5pZCA9IHByb2plY3QuaWQ7XHJcbiAgcHJvamVjdEl0ZW0uY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpO1xyXG5cclxuICAgIC8vIGRpdlxyXG4gICAgY29uc3QgcHJvamVjdEluZm8gPSBEb2MoYywgJ2RpdicpO1xyXG4gICAgcHJvamVjdEluZm8uY2xhc3NMaXN0LmFkZCgncHJvamVjdC1pbmZvJyk7XHJcblxyXG4gICAgICAvLyBpY29uXHJcbiAgICAgIGNvbnN0IHByb2plY3RJY29uID0gRG9jKGMsICdpJyk7ICAgICAgXHJcbiAgICAgIHByb2plY3RJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhcycpO1xyXG4gICAgICBwcm9qZWN0SWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1jaXJjbGUnKTtcclxuICAgICAgcHJvamVjdEljb24uY2xhc3NMaXN0LmFkZCgncHJvamVjdC1pY29uJyk7XHJcbiAgICAgIC8vcHJvamVjdEljb24uc3R5bGUuY29sb3IgPSBwcm9qZWN0LmNvbG9yOyAgLy9zZXRDb2xvclxyXG4gICAgICBwcm9qZWN0SW5mby5hcHBlbmRDaGlsZChwcm9qZWN0SWNvbik7XHJcbiAgICBcclxuICAgICAgLy8gcGFyYWdyYXBoXHJcbiAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gRG9jKGMsICdwJyk7XHJcbiAgICAgIHByb2plY3ROYW1lLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtbmFtZScpO1xyXG4gICAgICBwcm9qZWN0TmFtZS50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcclxuICAgICAgcHJvamVjdEluZm8uYXBwZW5kQ2hpbGQocHJvamVjdE5hbWUpO1xyXG4gICAgXHJcbiAgICBwcm9qZWN0SXRlbS5hcHBlbmRDaGlsZChwcm9qZWN0SW5mbyk7XHJcblxyXG4gICAgY29uc3QgdGFza0NvdW50ID0gRG9jKGMsICdwJyk7XHJcbiAgICB0YXNrQ291bnQuY2xhc3NMaXN0LmFkZCgncHJvamVjdC10YXNrLWNvdW50Jyk7XHJcbiAgICB0YXNrQ291bnQudGV4dENvbnRlbnQgPSBwcm9qZWN0LnRhc2tzLmxlbmd0aDtcclxuICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKHRhc2tDb3VudCk7XHJcblxyXG4gICAgdGFiUHJvamVjdHNMaXN0LmFwcGVuZENoaWxkKHByb2plY3RJdGVtKTtcclxuXHJcbiAgcmV0dXJuIHByb2plY3RJdGVtO1xyXG59XHJcbiIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZ2V0RGF5XG4gKiBAY2F0ZWdvcnkgV2Vla2RheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGRheSBvZiB0aGUgd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7MHwxfDJ8M3w0fDV8Nn0gdGhlIGRheSBvZiB3ZWVrLCAwIHJlcHJlc2VudHMgU3VuZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSB3ZWVrIGlzIDI5IEZlYnJ1YXJ5IDIwMTI/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXkobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAzXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXk7XG59Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiY3J5cHRvIiwiYmluZCIsIm1zQ3J5cHRvIiwidXVpZCIsImJ5dGVUb0hleCIsInN1YnN0ciIsImJ1ZiIsIm9mZnNldCIsInJuZHMiLCJyYW5kb20iLCJhcnIiLCJhcmd1bWVudHMiLCJ0b0xvd2VyQ2FzZSIsIlR5cGVFcnJvciIsIm5hbWUiLCJwcm9qZWN0IiwiZHVlRGF0ZSIsImNyZWF0aW9uRGF0ZSIsImxhYmVsVGFnIiwidGltZSIsImFsYXJtIiwicHJpb3JpdHlGbGFnIiwiY29tbWVudCIsInRhc2tzIiwidmFsdWUiLCJsYXN0IiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmdTdHIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiTmFOIiwiZ2V0TW9udGgiLCJkaXJ0eURhdGUiLCJkYXRlIiwibW9udGgiLCJnZXRZZWFyIiwiZ2V0RnVsbFllYXIiLCJpc0Z1dHVyZSIsIm5vdyIsImlzRGF0ZSIsImlzVmFsaWQiLCJpc05hTiIsIk51bWJlciIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0IiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJkYXRlVGltZSIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwiZGlydHlPcHRpb25zIiwidmFsdWVzQXJyYXkiLCJjb250ZXh0IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIl9vcHRpb25zIiwibnVtYmVyIiwicmVtMTAwIiwiZXJhIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicXVhcnRlciIsImRheSIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJmaW5kSW5kZXgiLCJwYXR0ZXJuIiwidGVzdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwib2JqZWN0IiwicHJlZGljYXRlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsInRva2VuVmFsdWUiLCJyZXBsYWNlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdExvbmciLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwibG9jYWxpemUiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJ0b0ludGVnZXIiLCJNYXRoIiwiY2VpbCIsImZsb29yIiwiYWRkTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJ0aW1lc3RhbXAiLCJhbW91bnQiLCJzdWJNaWxsaXNlY29uZHMiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeSIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwic3RhcnRPZlVUQ1dlZWsiLCJsb2NhbGUiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwibG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZmlyc3RXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsImZvcm1hdHRlcnMiLCJ5Iiwic2lnbmVkWWVhciIsIk0iLCJnZXRVVENNb250aCIsImQiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZ2V0VVRDSG91cnMiLCJ0b1VwcGVyQ2FzZSIsImgiLCJIIiwibSIsImdldFVUQ01pbnV0ZXMiLCJzIiwiZ2V0VVRDU2Vjb25kcyIsIlMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxIiwiTCIsInciLCJ3ZWVrIiwicm91bmQiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImIiLCJob3VycyIsIkIiLCJLIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInRpbWVMb25nRm9ybWF0dGVyIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJpbnB1dCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiaXNMZWFwWWVhciIsImRvbSIsImFjdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcm9wZXJ0eSIsImdlbmVyYXRlRGF5cyIsImRheXMiLCJwYXJlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsIlRvZG8iLCJwcm9qZWN0cyIsIl9yZW1vdmVBbGxUYXNrc0Zyb21Qcm9qZWN0IiwiZWxlbWVudHMiLCJub3RpZmljYXRpb25zIiwiYXNpZGUiLCJkYXNoYm9hcmQiLCJjb250cm9sbGVyIiwib2JzZXJ2ZXJzIiwiY29uZmlnIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsInNvcnQiLCJzb3J0QnkiLCJmaWx0ZXIiLCJ0YXNrIiwibG9nIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9uTGlzdCIsIm9ic2VydmVyIiwicHJvamVjdExpc3QiLCJjaGlsZHJlbiIsInZpZXciLCJvYnNlcnZlIiwiX25vdGlmeVByb2plY3QiLCJ0YXNrVG9IYW5kbGUiLCJmb3JFYWNoIiwiX2dldFRhc2tQcm9qZWN0IiwicHJvamVjdE5hbWUiLCJfYWRkVGFza1RvUHJvamVjdCIsInByb2plY3RJRCIsIl9yZW1vdmVQcm9qZWN0RnJvbUxpc3QiLCJwcm9qZWN0VG9SZW1vdmUiLCJfYWRkUHJvamVjdFRvUHJvamVjdHNJbmRleCIsIml0ZW1Ub0NoZWNrIiwiZXhpc3RzIiwiX2V4aXN0cyIsInMxIiwiYnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNob3dUYXNrRm9ybSIsInRhc2tNb2RhbCIsIm15RGF5IiwibXlNb250aCIsIm15WWVhciIsImxhc3RTZWxlY3RlZE1vbnRoIiwiY2FsZW5kYXIiLCJjb250YWluZXIiLCJtb250aFRhYnMiLCJoMiIsImNsb3NlQ2FsIiwidHlwZSIsIm5hdkxlZnQiLCJuYXZSaWdodCIsImRhdGFzZXQiLCJkaXIiLCJ0YWdOYW1lIiwidmlzaWJpbGl0eSIsImNoaWxkTm9kZXMiLCJoYW5kbGVDYWxlbmRhciIsImZvY3VzIiwieWVhclVwIiwieWVhckRuIiwic2hvd01vZGFsIiwibmV3VGFzayIsImZvcm0iLCJpbnB1dHMiLCJmbGFnSWNvbnMiLCJjbG9zZUJ1dHRvbiIsImZvcm1IYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJteURhdGUiLCJ0YWJsZSIsInVwY29taW5nIiwibGFzdEluZGV4IiwicHJvamVjdEl0ZW0iLCJwcm9qZWN0SW5mbyIsInByb2plY3RJY29uIiwidGFza0NvdW50IiwidGFiUHJvamVjdHNMaXN0IiwiR3JvdXAiLCJuZXdUYXNrQ2FyZCIsImNhcmRJdGVtIiwiaUZsYWciLCJjb2xvciIsInRhc2tJbmZvQm94IiwiaGVhZGluZyIsInRhc2tMaXN0IiwidGltZUl0ZW0iLCJpVGltZSIsInBUaW1lIiwiZGF0ZUl0ZW0iLCJpRGF0ZSIsInBEYXRlIiwiZGlydHlGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJmb3JtYXR0ZXJPcHRpb25zIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsInBQcm9qZWN0IiwiaVByb2plY3QiLCJyZW1vdmVJdGVtIiwiaVJlbW92ZSIsInNldFRpbWVvdXQiLCJDYXJkIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmxhZyIsInNldFByaW9ydGl5IiwiaGlkZVRhc2tGb3JtIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm5vZGUiLCJ0b2dnbGUiLCJpbmNyZW1lbnQiLCJnZXREYXkiLCJkZWluY3JlbWVudCIsInRha3NJY29ucyIsIm5ld1Rhc2tJbnB1dCIsImJsdXIiLCJwcm9qZWN0SW5wdXQiLCJwcm9qZWN0RHJwRG4iLCJwcm9qZWN0SW5wdXRHcnAiLCJtb2RhbEljb25zIiwiZ3JvdXAiLCJpY29uIiwibWVudSIsInRpbWVJbnB1dCIsImNvbW1lbnRJbnB1dCIsInNlbGVjdENvbnRhaW5lciIsImhlaWdodCIsInBvc2l0aW9uIiwic2VsZWN0b3IiLCJjdXJzb3IiLCJkYXRlc0FzaWRlIiwic2VjdGlvbiIsImdldFRvZGF5c1Rhc2tzIiwidHJpbSIsImNvbiJdLCJzb3VyY2VSb290IjoiIn0=