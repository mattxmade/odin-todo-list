"use strict";(self.webpackChunkodin_todo_list=self.webpackChunkodin_todo_list||[]).push([[179],{426:(n,A,e)=>{e.d(A,{Z:()=>i});var t=e(537),r=e.n(t),o=e(645),a=e.n(o)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu&display=swap);"]),a.push([n.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  font-size: 1.6rem;\n}\n\np, li, legend {\n  font-family: "Ubuntu", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\ni, button {\n  cursor: pointer;\n}\n\n.wrapper {\n  background-color: rgb(223, 222, 222);\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.dialog-task-bar {\n  width: 70%;\n  min-height: 13rem;\n  padding: 2.5rem 1.5rem 1.5rem;\n  overflow: hidden;\n  margin: 18rem auto 0;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: 0 0 0.5rem 0.1rem black;\n}\n\nform {\n  margin-bottom: 1.5rem;\n}\n\nform input {\n  min-width: 35%;\n  padding: 1rem;\n}\n\nfieldset {\n  width: 100%;\n  border: none;\n  display: flex;\n}\n\nlegend {\n  color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 0.5rem;\n}\n\nfieldset .task-icons {\n  flex: auto;\n  display: flex;\n  position: relative;\n  margin-right: 10rem;\n  align-items: center;\n  justify-self: flex-start;\n  justify-content: space-evenly;\n}\n\n.task-icons i.fas,\n.task-icons i.far {\n  font-size: 2rem;\n  position: relative;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.flag-icon-group {\n  width: 100%;\n  height: 4rem;\n  top: -4.5rem;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  transition: 0.3s;\n}\n\n.flag-icon-group li {\n  margin: 0 1rem;\n  -webkit-text-stroke: 0.1rem rgb(126, 126, 126);\n}\n\ni.fa-flag.flag-r,\ni.fa-flag.flag-o,\ni.fa-flag.flag-y,\ni.fa-flag.flag-w {\n  visibility: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  transition: 0.3s;\n}\n\ni.fa-flag.flag-r {\n  color: red;\n  transform: translate(60px, 35px);\n}\n\ni.fa-flag.flag-o {\n  color: orange;\n  transform: translate(20px, 35px);\n}\n\ni.fa-flag.flag-y {\n  color: yellow;\n  transform: translate(-20px, 35px);\n}\n\ni.fa-flag.flag-w {\n  color: white;\n  transform: translate(-60px, 35px);\n}\n\ni.fa-flag .icon-selector-visibility {\n  transition: 0.3s;\n  -webkit-user-select: auto;\n     -moz-user-select: auto;\n      -ms-user-select: auto;\n          user-select: auto;\n  visibility: visible;\n  transform: translate(0, 0);\n}\n\nfieldset .task-buttons {\n  justify-self: flex-end;\n}\n\n.cancel,\n.add {\n  padding: 0.5rem;\n  min-width: 8rem;\n  height: 3.5rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid black;\n}\n\n.cancel {\n  background-color: white;\n}\n\n.add {\n  color: white;\n  background-color: rgb(157, 157, 252);\n}\n\ndialog .dialog-lip {\n  width: 100vw;\n  height: 2rem;\n  left: -0.1rem;\n  position: absolute;\n  inset: auto 0 -0.2rem;\n}\n\nnav {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n}\n\nnav ul {\n  display: flex;\n}\n\n.pointer {\n  cursor: pointer;\n}\n\n.app-window {\n  flex: auto;\n  display: flex;\n}\n\nmain {\n  width: 80%;\n}\n\naside {\n  width: 20%;\n}\n\nfooter, footer ul {\n  display: flex;\n}/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,SAAA;EACA,UAAA;EACA,sBAAA;ACAF;;ADIA;EACE,gBAAA;ACDF;;ADKA;EACE,iBAAA;ACFF;;ADKA;EACE,iCAAA;ACFF;;ADKA;EACE,gBAAA;ACFF;;ADKA;EACE,eAAA;ACFF;;ADKA;EACE,oCAAA;EACA,iBAAA;EAEA,WAAA;EACA,aAAA;EACA,sBAAA;EACA,8BAAA;ACHF;;ADMA;EACE,UAAA;EACA,iBAAA;EACA,6BAAA;EACA,gBAAA;EACA,oBAAA;EAEA,YAAA;EACA,mBAAA;EACA,mCAAA;ACJF;;ADOA;EACE,qBAAA;ACJF;;ADOA;EACE,cAAA;EACA,aAAA;ACJF;;ADOA;EACE,WAAA;EACA,YAAA;EACA,aAAA;ACJF;;ADOA;EACE,yBAAA;EACA,qBAAA;ACJF;;ADOA;EACE,UAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;EACA,mBAAA;EACA,wBAAA;EACA,6BAAA;ACJF;;ADOA;;EAEE,eAAA;EACA,kBAAA;EACA,yBAAA;ACJF;;ADOA;EACE,WAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;EACA,uBAAA;EACA,kBAAA;EACA,gBAAA;ACJF;;ADOA;EACE,cAAA;EACA,8CAAA;ACJF;;ADwCA;;;;EAIE,kBAAA;EACA,yBAAA;KAAA,sBAAA;MAAA,qBAAA;UAAA,iBAAA;EACA,gBAAA;ACrCF;;ADwCA;EACE,UAAA;EACA,gCAAA;ACrCF;;ADuCA;EACE,aAAA;EACA,gCAAA;ACpCF;;ADsCA;EACE,aAAA;EACA,iCAAA;ACnCF;;ADqCA;EACE,YAAA;EACA,iCAAA;AClCF;;ADqCA;EACE,gBAAA;EACA,yBAAA;KAAA,sBAAA;MAAA,qBAAA;UAAA,iBAAA;EACA,mBAAA;EACA,0BAAA;AClCF;;ADqCA;EACE,sBAAA;AClCF;;ADqCA;;EAEE,eAAA;EACA,eAAA;EACA,cAAA;EACA,qBAAA;EACA,0BAAA;AClCF;;ADqCA;EACE,uBAAA;AClCF;;ADqCA;EACE,YAAA;EACA,oCAAA;AClCF;;ADqCA;EACE,YAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,qBAAA;AClCF;;ADqCA;EACE,WAAA;EACA,aAAA;EACA,8BAAA;AClCF;;ADqCA;EACE,aAAA;AClCF;;ADqCA;EACE,eAAA;AClCF;;ADqCA;EACE,UAAA;EACA,aAAA;AClCF;;ADqCA;EACE,UAAA;AClCF;;ADqCA;EACE,UAAA;AClCF;;ADsCA;EACE,aAAA;ACnCF,CAAA,oCAAA",sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var A=[];return A.toString=function(){return this.map((function(A){var e="",t=void 0!==A[5];return A[4]&&(e+="@supports (".concat(A[4],") {")),A[2]&&(e+="@media ".concat(A[2]," {")),t&&(e+="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {")),e+=n(A),t&&(e+="}"),A[2]&&(e+="}"),A[4]&&(e+="}"),e})).join("")},A.i=function(n,e,t,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);t&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),A.push(l))}},A}},537:n=>{n.exports=function(n){var A=n[1],e=n[3];if(!e)return A;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(r," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[A].concat(a).concat([o]).join("\n")}return[A].join("\n")}},379:n=>{var A=[];function e(n){for(var e=-1,t=0;t<A.length;t++)if(A[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},a=[],i=0;i<n.length;i++){var s=n[i],c=t.base?s[0]+t.base:s[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var d=e(u),C={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)A[d].references++,A[d].updater(C);else{var f=r(C,t);t.byIndex=i,A.splice(i,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function r(n,A){var e=A.domAPI(A);return e.update(n),function(A){if(A){if(A.css===n.css&&A.media===n.media&&A.sourceMap===n.sourceMap&&A.supports===n.supports&&A.layer===n.layer)return;e.update(n=A)}else e.remove()}}n.exports=function(n,r){var o=t(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var i=e(o[a]);A[i].references--}for(var s=t(n,r),c=0;c<o.length;c++){var l=e(o[c]);0===A[l].references&&(A[l].updater(),A.splice(l,1))}o=s}}},569:n=>{var A={};n.exports=function(n,e){var t=function(n){if(void 0===A[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}A[n]=e}return A[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var A=document.createElement("style");return n.setAttributes(A,n.attributes),n.insert(A,n.options),A}},565:(n,A,e)=>{n.exports=function(n){var A=e.nc;A&&n.setAttribute("nonce",A)}},795:n=>{n.exports=function(n){var A=n.insertStyleElement(n);return{update:function(e){!function(n,A,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,r&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),A.styleTagTransform(t,n,A.options)}(A,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(A)}}}},589:n=>{n.exports=function(n,A){if(A.styleSheet)A.styleSheet.cssText=n;else{for(;A.firstChild;)A.removeChild(A.firstChild);A.appendChild(document.createTextNode(n))}}},677:(n,A,e)=>{var t=e(379),r=e.n(t),o=e(795),a=e.n(o),i=e(569),s=e.n(i),c=e(565),l=e.n(c),u=e(216),d=e.n(u),C=e(589),f=e.n(C),p=e(426),E={};E.styleTagTransform=f(),E.setAttributes=l(),E.insert=s().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=d(),r()(p.Z,E),p.Z&&p.Z.locals&&p.Z.locals;var m,g=new Uint8Array(16);function h(){if(!m&&!(m="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return m(g)}const y=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,v=function(n){return"string"==typeof n&&y.test(n)};for(var b=[],w=0;w<256;++w)b.push((w+256).toString(16).substr(1));const B=function(n,A,e){var t=(n=n||{}).random||(n.rng||h)();if(t[6]=15&t[6]|64,t[8]=63&t[8]|128,A){e=e||0;for(var r=0;r<16;++r)A[e+r]=t[r];return A}return function(n){var A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=(b[n[A+0]]+b[n[A+1]]+b[n[A+2]]+b[n[A+3]]+"-"+b[n[A+4]]+b[n[A+5]]+"-"+b[n[A+6]]+b[n[A+7]]+"-"+b[n[A+8]]+b[n[A+9]]+"-"+b[n[A+10]]+b[n[A+11]]+b[n[A+12]]+b[n[A+13]]+b[n[A+14]]+b[n[A+15]]).toLowerCase();if(!v(e))throw TypeError("Stringified UUID is invalid");return e}(t)},F={create:(n,A="default",e=!1,t=!1,r=!1,o="white",a=!1)=>{if(void 0!==n)return{name:n,project:A,dueDate:e,labelTag:t,time:r,priorityFlag:o,comment:a,id:B()}}},k=F,D=(n="default")=>({name:n,tasks:[],id:B()}),x=(()=>{const n=[];return{projects:n,addTaskToProject:A=>{(A=>{for(let e of n)if(A.project===e.name)return e.tasks.push(A),void(A.projectID=e.id);const e=D(A.project);A.projectID=e.id,e.tasks.push(A),n.push(e)})(A)}}})(),q=document.querySelector("dialog");document.querySelector(".pointer").addEventListener("click",(function(n){q.showModal()})),document.querySelector(".cancel").addEventListener("click",(function(n){q.close()})),document.querySelectorAll(".task-icons").forEach((n=>{n.addEventListener("click",(n=>{switch(n.target.classList[2]){case"cal":case"tag":case"clk":case"cmt":break;case"flg":n.target.childNodes[1].childNodes.forEach((n=>{"LI"===n.tagName&&n.childNodes[0].classList.toggle("icon-selector-visibility")}))}}))}));let j="default",U=!1,S=!1,L=!1,T="white",I=!1;document.querySelectorAll(".priority-flag").forEach((n=>{n.addEventListener("click",(n=>{T=getComputedStyle(n.target).color}))}));const M=document.querySelector("form"),R=M.elements;M.addEventListener("submit",(n=>{n.preventDefault();const A=R.task.value;k.create(A,j,U,S,L,T,I),x.addTaskToProject(A),j="default",U=!1,S=!1,L=!1,T="white",I=!1}))}},n=>{n(n.s=677)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,