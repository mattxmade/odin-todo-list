"use strict";(self.webpackChunkodin_todo_list=self.webpackChunkodin_todo_list||[]).push([[179],{426:(e,t,n)=>{n.d(t,{Z:()=>o});var A=n(537),a=n.n(A),r=n(645),i=n.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Ubuntu&display=swap);"]),i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Teko:wght@600&display=swap);"]),i.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  font-size: 1.6rem;\n}\n\np, li, legend, h1, h2 {\n  font-family: "Ubuntu", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\ni, button {\n  cursor: pointer;\n}\n\n.wrapper {\n  background-color: rgb(223, 222, 222);\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n/*=========\n  Nav Bar\n===========*/\nnav, footer {\n  z-index: 1;\n  position: relative;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 1.2rem;\n  background-color: #9d9dfc;\n}\n\nnav i {\n  color: white;\n  font-size: 2.3rem;\n}\n\nnav .user-alerts {\n  position: relative;\n}\n\n.user-alerts i:last-child {\n  position: absolute;\n}\n\n.user-notify {\n  z-index: 1;\n  top: -0.1rem;\n  left: 1.3rem;\n  transition: 0.9s;\n  font-size: 3rem;\n  color: transparent;\n}\n\n.notify {\n  color: red;\n  font-size: 1.1rem;\n}\n\nnav ul {\n  width: 35%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.pointer, i {\n  cursor: pointer;\n}\n\nnav .logo {\n  width: 35%;\n  cursor: auto;\n  font-size: 4rem;\n  margin-right: 1rem;\n}\n\n.nav-search {\n  width: 80%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nav-search input {\n  width: 60%;\n  height: 3rem;\n  margin: 0 1rem;\n  padding: 0.5rem;\n  font-size: 1.4rem;\n  border-radius: 0.5rem;\n  border: none;\n}\n\n.nav-search input:focus-visible {\n  outline: 0.2rem solid lightblue;\n}\n\n@media (max-width: 620px) {\n  .nav-settings li:last-child i {\n    position: absolute;\n    left: -100vw;\n    visibility: hidden;\n  }\n}\n\n/*===========\n  Dashboard\napp-window: div\n  -aside\n    -ul: app-aside-calendar\n    -ul: app-aside-projects-list\n\n  -main: app-main-task-window\n    -dashboard\n=============*/\n.app-window {\n  flex: auto;\n  display: flex;\n}\n\naside {\n  width: 28rem;\n  min-width: 28rem;\n  position: relative;\n  background-color: #fafafa;\n  padding: 2rem 2rem 5rem 2rem;\n  filter: drop-shadow(0 0.1rem 0.2rem rgba(0, 0, 0, 0.5));\n  display: flex;\n  flex-direction: column;\n  transition: 0.3s;\n}\n@media (max-width: 880px) {\n  aside {\n    top: 0;\n    z-index: 2;\n    position: absolute;\n    height: 100%;\n    left: -28rem;\n  }\n}\n\n.aside-drawer-position {\n  left: 0;\n}\n\n.aside-drawer-icon {\n  width: 3rem;\n  height: 5rem;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  padding: 0.5rem 0.5rem;\n  position: absolute;\n  visibility: hidden;\n  border-top-right-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n  background-color: inherit;\n  cursor: pointer;\n  right: -2rem;\n  top: 13.5rem;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n}\n.aside-drawer-icon i {\n  right: -0.3rem;\n  position: relative;\n  font-size: 3rem;\n  color: #9d9dfc;\n}\n@media (max-width: 880px) {\n  .aside-drawer-icon {\n    visibility: visible;\n  }\n}\n\naside ul {\n  margin-bottom: 2rem;\n}\n\naside li {\n  gap: 1rem;\n  width: 100%;\n  padding: 1rem;\n  height: 3.5rem;\n  cursor: pointer;\n  font-size: 1.7rem;\n  border-radius: 0.5rem;\n  display: flex;\n  align-items: center;\n}\n\n/*==================\n  Aside:\n    Task Overview\n====================*/\naside ul:first-child {\n  height: 25%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.js-aside-highlight {\n  background-color: #efefef;\n}\n\n/*==================\n  <li> Button Mask\n====================*/\nli {\n  position: relative;\n}\n\n.mask-button {\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  position: absolute;\n}\n\n/*============\n  Aside:\n    Projects\n==============*/\naside ul:last-child {\n  flex: 1;\n  height: auto;\n  display: flex;\n  overflow: hidden;\n  flex-direction: column;\n  transition: 0.3s;\n}\naside ul:last-child li {\n  display: flex;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\naside ul:last-child li:not(:first-child) {\n  width: calc(100% - 2rem);\n  margin-top: 1rem;\n  margin-left: 2rem;\n  display: flex;\n  justify-content: space-between;\n}\naside ul:last-child li:not(:first-child) i {\n  color: blue;\n  font-size: 1.3rem;\n}\naside ul:last-child li:not(:first-child) .project-info {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.projects-dropdown-icon {\n  font-size: 2.2rem;\n  transition: 0.3s;\n  transform: rotate(0);\n}\n\n.dropdown-state {\n  transition: 0.3s;\n  transform: rotate(-90deg);\n}\n\naside ul:last-child.dropdown-menu {\n  flex: 0 0 4.9rem;\n  transition: 0.3s;\n}\n\n/*=============\n  Dashboard:\n    Task view\n===============*/\nmain {\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 3rem 4rem 3rem 7rem;\n  background-color: white;\n  overflow-y: hidden;\n}\n@media (max-width: 880px) {\n  main {\n    padding: 3rem 2.8rem;\n  }\n}\n\nmain h2 {\n  margin-bottom: 4rem;\n}\n\n.new-task {\n  gap: 1rem;\n  display: flex;\n  margin-left: 1.5rem;\n  margin-bottom: 2rem;\n  color: rgb(110, 110, 110);\n}\n\n.dashboard-tasks,\n.dashboard-today,\n.dashboard-upcoming,\n.dashboard-project {\n  overflow: hidden;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  margin-bottom: 2rem;\n  position: absolute;\n}\n\n.dashboard-tasks {\n  position: relative;\n}\n\n.complete-task {\n  transform: translate(0, 100vw);\n}\n\n.remove-task {\n  transform: translate(-100vw);\n}\n\n.congrats-mask {\n  z-index: -1;\n  visibility: hidden;\n  background-color: transparent;\n  transition: 0.3s;\n  inset: 0;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n.congrats-mask p {\n  top: 0.5rem;\n  position: relative;\n  color: white;\n  transition: 0.3s;\n  font-size: 5rem;\n  font-family: "Teko", sans-serif;\n}\n\n.show-congrats-mask {\n  z-index: 20;\n  visibility: visible;\n  background-color: #9d9dfc;\n}\n.show-congrats-mask p {\n  color: white;\n}\n\n.task-card {\n  width: 100%;\n  display: flex;\n  padding: 1.5rem;\n  position: relative;\n  background-color: rgb(240, 240, 240);\n  border-bottom: 0.1rem solid lightgray;\n  margin-bottom: 1rem;\n  transition: 1.2s;\n}\n\n.task-check-col-1 {\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  justify-content: space-between;\n  margin-right: 1rem;\n}\n.task-check-col-1 i:first-child {\n  color: #9d9dfc;\n  font-size: 2.25rem;\n}\n\n.task-info {\n  gap: 1rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.task-details {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.task-details li {\n  gap: 1rem;\n  display: flex;\n  overflow: hidden;\n}\n.task-details li p {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.task-details li:not(:last-child) {\n  width: 35%;\n}\n@media (max-width: 1080px) {\n  .task-details li:not(:last-child) {\n    width: 100%;\n  }\n}\n.task-details li:first-child {\n  min-width: 10rem;\n}\n.task-details .task-project {\n  width: -webkit-max-content;\n  width: -moz-max-content;\n  width: max-content;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n@media (max-width: 1080px) {\n  .task-details .task-project {\n    width: -webkit-max-content;\n    width: -moz-max-content;\n    width: max-content;\n  }\n}\n.task-details .task-project i {\n  color: blue;\n}\n.task-details .task-project p {\n  text-align: right;\n}\n\n.task-card .task-remove {\n  position: absolute;\n  top: 1rem;\n  right: 1.6rem;\n}\n\n/*================\n  New Task Modal\n==================*/\ndialog {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  margin: auto;\n  border: none;\n  background-color: transparent;\n}\n\n.dialog-task-bar {\n  width: 70%;\n  min-height: 13rem;\n  height: -webkit-max-content;\n  height: -moz-max-content;\n  height: max-content;\n  padding: 2.5rem 1.5rem 1.5rem;\n  margin: 6rem 4rem 0 auto;\n  border: none;\n  border-radius: 1rem;\n  background-color: white;\n  box-shadow: 0 0 0.5rem 0.1rem black;\n}\n@media (max-width: 1080px) {\n  .dialog-task-bar {\n    width: 95%;\n    margin: 6rem auto 0;\n  }\n}\n\n.js-task-icon {\n  height: 4rem;\n  width: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0.5rem;\n  border-bottom: 0.2rem solid transparent;\n  transition: 0.3s;\n}\n\n.modal-icon-select {\n  border-bottom: 0.2rem solid black;\n}\n\nform {\n  margin-bottom: 1.5rem;\n}\n\nform input {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  border: 0.2rem solid rgb(125, 125, 125);\n}\n\n.inputs {\n  width: 35%;\n  height: 3.9rem;\n  position: relative;\n}\n@media (max-width: 880px) {\n  .inputs {\n    width: 57.5%;\n  }\n}\n\n.inputs input {\n  width: 100%;\n  background-color: white;\n}\n\n.inputs .input-task {\n  position: absolute;\n  visibility: visible;\n}\n\n.dropdown-set-project,\n.dropdown-set-date,\n.input-date,\n.input-time,\n.input-comment {\n  width: 100%;\n  height: 100%;\n  visibility: hidden;\n}\n.dropdown-set-project i,\n.dropdown-set-date i,\n.input-date i,\n.input-time i,\n.input-comment i {\n  width: 3rem;\n  height: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0.2rem;\n  right: 0.2rem;\n  position: absolute;\n  border-radius: 0.1rem;\n  background-color: white;\n}\n@media (max-width: 620px) {\n  .dropdown-set-project i,\n.dropdown-set-date i,\n.input-date i,\n.input-time i,\n.input-comment i {\n    height: 85%;\n    top: 0.3rem;\n    left: auto;\n  }\n}\n\n.project-select-menu {\n  z-index: 5;\n  padding: 1rem;\n  border: 0.1rem dashed lightblue;\n  border-top: none;\n  background-color: white;\n  border-bottom-left-radius: 1rem;\n  border-bottom-right-radius: 1rem;\n  gap: 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-selector {\n  overflow: hidden;\n  transition: 0.2s;\n  padding: 1rem 1rem;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  border-radius: 0.5rem;\n  border: 0.1rem solid transparent;\n  background-color: rgb(253, 237, 240);\n}\n\n.project-selector:hover {\n  border: 0.1rem solid black;\n}\n\n.input-date,\n.input-time,\n.input-comment,\n.dropdown-set-date {\n  top: 0;\n  position: absolute;\n}\n\n.input-year {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.dropdown-set-date {\n  height: 100%;\n  gap: 0.5rem;\n  display: grid;\n  grid-template-columns: repeat(3, 33.3333333333%);\n}\n@media (max-width: 620px) {\n  .dropdown-set-date {\n    grid-template-columns: repeat(3, 8rem);\n  }\n}\n\n.input-calendar {\n  z-index: 5;\n  min-width: 20rem;\n  grid-column: span 3;\n  position: relative;\n  top: -13rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar {\n    top: -9.3rem;\n  }\n}\n@media (max-width: 620px) {\n  .input-calendar {\n    top: -7rem;\n  }\n}\n\n.input-calendar button {\n  position: absolute;\n  bottom: 0.6rem;\n  right: 1.5rem;\n  width: 10rem;\n  height: 3rem;\n}\n@media (max-width: 1080px) {\n  .input-calendar button {\n    width: 8rem;\n    bottom: 0.6rem;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n  }\n}\n\n.dropdown-set-date li {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 0.5rem;\n  background-color: white;\n  border: 0.1rem solid lightblue;\n}\n\n.dropdown-set-date p {\n  padding: 1rem;\n}\n\n.dropdown-set-date li p:first-child {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\ni.year-nav {\n  width: 50%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\ni.year-nav-up {\n  top: -2.75rem;\n  left: -5%;\n}\n\ni.year-nav-down {\n  top: -2.75rem;\n  right: -5%;\n}\n\nfieldset {\n  gap: 1rem;\n  width: 100%;\n  border: none;\n  display: flex;\n}\n@media (max-width: 880px) {\n  fieldset {\n    flex-wrap: wrap;\n  }\n}\n@media (max-width: 620px) {\n  fieldset {\n    display: grid;\n    flex-wrap: nowrap;\n  }\n}\n\nlegend {\n  color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 0.5rem;\n}\n\nfieldset .task-icons {\n  min-width: 26rem;\n  flex: auto;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-self: flex-start;\n  justify-content: space-evenly;\n}\n@media (max-width: 880px) {\n  fieldset .task-icons {\n    gap: 1rem;\n    margin-right: 0;\n  }\n}\n@media (max-width: 620px) {\n  fieldset .task-icons {\n    justify-self: end;\n    width: 100%;\n  }\n}\n\n.task-icons i.fas,\n.task-icons i.far {\n  font-size: 2rem;\n  position: relative;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.flag-icon-group {\n  width: 100%;\n  height: 4rem;\n  top: -4.5rem;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  transition: 0.3s;\n}\n\ni.fa-flag {\n  -webkit-text-stroke: 0.1rem rgb(126, 126, 126);\n}\n\n.flag-icon-group li {\n  margin: 0 1rem;\n}\n\ni.fa-flag.flag-r,\ni.fa-flag.flag-o,\ni.fa-flag.flag-y,\ni.fa-flag.flag-w {\n  z-index: -1;\n  visibility: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  transition: 0.3s;\n  border: none;\n}\n\ni.fa-flag.flag-r {\n  color: red;\n  transform: translate(60px, 45px);\n}\n\ni.fa-flag.flag-o {\n  color: orange;\n  transform: translate(20px, 45px);\n}\n\ni.fa-flag.flag-y {\n  color: yellow;\n  transform: translate(-20px, 45px);\n}\n\ni.fa-flag.flag-w {\n  color: white;\n  transform: translate(-60px, 45px);\n}\n\ni.fa-flag .icon-selector-visibility {\n  z-index: 10;\n  transition: 0.3s;\n  -webkit-user-select: auto;\n     -moz-user-select: auto;\n      -ms-user-select: auto;\n          user-select: auto;\n  visibility: visible;\n  transform: translate(0, 0);\n}\n\nfieldset .task-buttons {\n  gap: 1rem;\n  justify-self: flex-end;\n  display: flex;\n}\n\n.cancel,\n.add {\n  padding: 0.5rem;\n  min-width: 8rem;\n  height: 3.5rem;\n  border-radius: 0.5rem;\n  border: 0.1rem solid black;\n}\n\n.cancel {\n  background-color: white;\n}\n\n.add {\n  color: white;\n  background-color: rgb(157, 157, 252);\n}\n\n/*==========\n  Calendar\n============*/\n.calendar {\n  width: 100%;\n  margin: 0 auto;\n  height: 20rem;\n  border-radius: 0.5rem;\n  background-color: white;\n  outline: 0.1rem solid blue;\n  border: 0.1rem solid lightgrey;\n}\n@media (max-width: 1080px) {\n  .calendar {\n    height: 16.1rem;\n  }\n}\n\n.month h3 {\n  margin: 1rem 0 1rem;\n}\n\n.day {\n  margin: 0.4rem;\n  height: 2.125rem;\n  outline: 0.1rem solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n@media (max-width: 1080px) {\n  .day {\n    margin: 0;\n    height: 2.125rem;\n  }\n}\n\n.day p {\n  position: absolute;\n  font-size: 1.2rem;\n}\n\n.calendar button i {\n  width: 96%;\n  font-size: 2rem;\n  background-color: transparent;\n}\n\nfooter, footer ul {\n  width: 100%;\n  display: flex;\n  color: white;\n  font-weight: bold;\n  align-items: center;\n  justify-content: space-around;\n}\n\ni.fa-chevron-circle-left {\n  left: 1rem;\n}\n\ni.fa-chevron-circle-right {\n  right: 1rem;\n}\n\ni.fa-chevron-circle-left,\ni.fa-chevron-circle-right {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  background-color: transparent;\n  top: 1.25rem;\n}/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"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",sourceRoot:""}]);const o=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",A=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),A&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),A&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,A,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(A)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);A&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),r="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,A=0;A<t.length;A++)if(t[A].identifier===e){n=A;break}return n}function A(e,A){for(var r={},i=[],o=0;o<e.length;o++){var s=e[o],d=A.base?s[0]+A.base:s[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=n(l),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=a(h,A);A.byIndex=o,t.splice(o,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=A(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=n(r[i]);t[o].references--}for(var s=A(e,a),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=s}}},569:e=>{var t={};e.exports=function(e,n){var A=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var A="";n.supports&&(A+="@supports (".concat(n.supports,") {")),n.media&&(A+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(A+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),A+=n.css,a&&(A+="}"),n.media&&(A+="}"),n.supports&&(A+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(A+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(A,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},628:(e,t,n)=>{var A=n(379),a=n.n(A),r=n(795),i=n.n(r),o=n(569),s=n.n(o),d=n(565),c=n.n(d),l=n(216),u=n.n(l),h=n(589),m=n.n(h),C=n(426),f={};f.styleTagTransform=m(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=u(),a()(C.Z,f),C.Z&&C.Z.locals&&C.Z.locals;var p,g=new Uint8Array(16);function E(){if(!p&&!(p="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return p(g)}const w=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,b=function(e){return"string"==typeof e&&w.test(e)};for(var v=[],y=0;y<256;++y)v.push((y+256).toString(16).substr(1));const B=function(e,t,n){var A=(e=e||{}).random||(e.rng||E)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=A[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(v[e[t+0]]+v[e[t+1]]+v[e[t+2]]+v[e[t+3]]+"-"+v[e[t+4]]+v[e[t+5]]+"-"+v[e[t+6]]+v[e[t+7]]+"-"+v[e[t+8]]+v[e[t+9]]+"-"+v[e[t+10]]+v[e[t+11]]+v[e[t+12]]+v[e[t+13]]+v[e[t+14]]+v[e[t+15]]).toLowerCase();if(!b(n))throw TypeError("Stringified UUID is invalid");return n}(A)},k=(e="New task",t="User",n={},A={},a="unset",r="",i="unset",o="unset",s="unset")=>{if(void 0!==e)return{name:e,project:t,dueDate:n,creationDate:A,labelTag:a,time:r,priorityFlag:o,comment:s,id:B()}},D=(e="default")=>({name:e,tasks:[],id:B(),index:{value:0,last:0}});function x(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function F(e){x(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function j(e){return x(1,arguments),F(e).getTime()>Date.now()}function T(e){x(1,arguments);var t=F(e);return t.setHours(0,0,0,0),t}function L(e,t){x(2,arguments);var n=T(e),A=T(t);return n.getTime()===A.getTime()}function S(e){return x(1,arguments),L(e,Date.now())}function M(e){x(1,arguments);var t=F(e),n=t.getMonth();return n}function U(e){return x(1,arguments),F(e).getFullYear()}function q(e){return x(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function I(e){if(x(1,arguments),!q(e)&&"number"!=typeof e)return!1;var t=F(e);return!isNaN(Number(t))}var W={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function N(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,A=e.formats[n]||e.formats[e.defaultWidth];return A}}const Y={date:N({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:N({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:N({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var P={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function z(e){return function(t,n){var A,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):r;A=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;A=e.values[s]||e.values[o]}return A[e.argumentCallback?e.argumentCallback(t):t]}}const V={ordinalNumber:function(e,t){var n=Number(e),A=n%100;if(A>20||A<10)switch(A%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function O(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},A=n.width,a=A&&e.matchPatterns[A]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var i,o=r[0],s=A&&e.parsePatterns[A]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?H(s,(function(e){return e.test(o)})):R(s,(function(e){return e.test(o)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=t.slice(o.length);return{value:i,rest:c}}}function R(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function H(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var J,_={ordinalNumber:(J={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(J.matchPattern);if(!n)return null;var A=n[0],a=e.match(J.parsePattern);if(!a)return null;var r=J.valueCallback?J.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var i=e.slice(A.length);return{value:r,rest:i}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const G={code:"en-US",formatDistance:function(e,t,n){var A,a=W[e];return A="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+A:A+" ago":A},formatLong:Y,formatRelative:function(e,t,n,A){return P[e]},localize:V,match:_,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Q(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function X(e,t){x(2,arguments);var n=F(e).getTime(),A=Q(t);return new Date(n+A)}function K(e,t){x(2,arguments);var n=Q(t);return X(e,-n)}var Z=864e5;function $(e){x(1,arguments);var t=1,n=F(e),A=n.getUTCDay(),a=(A<t?7:0)+A-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function ee(e){x(1,arguments);var t=F(e),n=t.getUTCFullYear(),A=new Date(0);A.setUTCFullYear(n+1,0,4),A.setUTCHours(0,0,0,0);var a=$(A),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var i=$(r);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function te(e){x(1,arguments);var t=ee(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var A=$(n);return A}var ne=6048e5;function Ae(e,t){x(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.weekStartsOn,r=null==a?0:Q(a),i=null==n.weekStartsOn?r:Q(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var o=F(e),s=o.getUTCDay(),d=(s<i?7:0)+s-i;return o.setUTCDate(o.getUTCDate()-d),o.setUTCHours(0,0,0,0),o}function ae(e,t){x(1,arguments);var n=F(e),A=n.getUTCFullYear(),a=t||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:Q(i),s=null==a.firstWeekContainsDate?o:Q(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(A+1,0,s),d.setUTCHours(0,0,0,0);var c=Ae(d,t),l=new Date(0);l.setUTCFullYear(A,0,s),l.setUTCHours(0,0,0,0);var u=Ae(l,t);return n.getTime()>=c.getTime()?A+1:n.getTime()>=u.getTime()?A:A-1}function re(e,t){x(1,arguments);var n=t||{},A=n.locale,a=A&&A.options&&A.options.firstWeekContainsDate,r=null==a?1:Q(a),i=null==n.firstWeekContainsDate?r:Q(n.firstWeekContainsDate),o=ae(e,t),s=new Date(0);s.setUTCFullYear(o,0,i),s.setUTCHours(0,0,0,0);var d=Ae(s,t);return d}var ie=6048e5;function oe(e,t){for(var n=e<0?"-":"",A=Math.abs(e).toString();A.length<t;)A="0"+A;return n+A}var se={y:function(e,t){var n=e.getUTCFullYear(),A=n>0?n:1-n;return oe("yy"===t?A%100:A,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):oe(n+1,2)},d:function(e,t){return oe(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return oe(e.getUTCHours()%12||12,t.length)},H:function(e,t){return oe(e.getUTCHours(),t.length)},m:function(e,t){return oe(e.getUTCMinutes(),t.length)},s:function(e,t){return oe(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,A=e.getUTCMilliseconds();return oe(Math.floor(A*Math.pow(10,n-3)),t.length)}};const de=se;var ce={G:function(e,t,n){var A=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(A,{width:"abbreviated"});case"GGGGG":return n.era(A,{width:"narrow"});default:return n.era(A,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var A=e.getUTCFullYear(),a=A>0?A:1-A;return n.ordinalNumber(a,{unit:"year"})}return de.y(e,t)},Y:function(e,t,n,A){var a=ae(e,A),r=a>0?a:1-a;return"YY"===t?oe(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):oe(r,t.length)},R:function(e,t){return oe(ee(e),t.length)},u:function(e,t){return oe(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(A);case"QQ":return oe(A,2);case"Qo":return n.ordinalNumber(A,{unit:"quarter"});case"QQQ":return n.quarter(A,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(A,{width:"narrow",context:"formatting"});default:return n.quarter(A,{width:"wide",context:"formatting"})}},q:function(e,t,n){var A=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(A);case"qq":return oe(A,2);case"qo":return n.ordinalNumber(A,{unit:"quarter"});case"qqq":return n.quarter(A,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(A,{width:"narrow",context:"standalone"});default:return n.quarter(A,{width:"wide",context:"standalone"})}},M:function(e,t,n){var A=e.getUTCMonth();switch(t){case"M":case"MM":return de.M(e,t);case"Mo":return n.ordinalNumber(A+1,{unit:"month"});case"MMM":return n.month(A,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(A,{width:"narrow",context:"formatting"});default:return n.month(A,{width:"wide",context:"formatting"})}},L:function(e,t,n){var A=e.getUTCMonth();switch(t){case"L":return String(A+1);case"LL":return oe(A+1,2);case"Lo":return n.ordinalNumber(A+1,{unit:"month"});case"LLL":return n.month(A,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(A,{width:"narrow",context:"standalone"});default:return n.month(A,{width:"wide",context:"standalone"})}},w:function(e,t,n,A){var a=function(e,t){x(1,arguments);var n=F(e),A=Ae(n,t).getTime()-re(n,t).getTime();return Math.round(A/ie)+1}(e,A);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):oe(a,t.length)},I:function(e,t,n){var A=function(e){x(1,arguments);var t=F(e),n=$(t).getTime()-te(t).getTime();return Math.round(n/ne)+1}(e);return"Io"===t?n.ordinalNumber(A,{unit:"week"}):oe(A,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):de.d(e,t)},D:function(e,t,n){var A=function(e){x(1,arguments);var t=F(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var A=t.getTime(),a=n-A;return Math.floor(a/Z)+1}(e);return"Do"===t?n.ordinalNumber(A,{unit:"dayOfYear"}):oe(A,t.length)},E:function(e,t,n){var A=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(A,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(A,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},e:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return oe(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,A){var a=e.getUTCDay(),r=(a-A.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return oe(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var A=e.getUTCDay(),a=0===A?7:A;switch(t){case"i":return String(a);case"ii":return oe(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(A,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(A,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(A,{width:"short",context:"formatting"});default:return n.day(A,{width:"wide",context:"formatting"})}},a:function(e,t,n){var A=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},b:function(e,t,n){var A,a=e.getUTCHours();switch(A=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},B:function(e,t,n){var A,a=e.getUTCHours();switch(A=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(A,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(A,{width:"narrow",context:"formatting"});default:return n.dayPeriod(A,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var A=e.getUTCHours()%12;return 0===A&&(A=12),n.ordinalNumber(A,{unit:"hour"})}return de.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):de.H(e,t)},K:function(e,t,n){var A=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(A,{unit:"hour"}):oe(A,t.length)},k:function(e,t,n){var A=e.getUTCHours();return 0===A&&(A=24),"ko"===t?n.ordinalNumber(A,{unit:"hour"}):oe(A,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):de.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):de.s(e,t)},S:function(e,t){return de.S(e,t)},X:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return ue(a);case"XXXX":case"XX":return he(a);default:return he(a,":")}},x:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"x":return ue(a);case"xxxx":case"xx":return he(a);default:return he(a,":")}},O:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+le(a,":");default:return"GMT"+he(a,":")}},z:function(e,t,n,A){var a=(A._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+le(a,":");default:return"GMT"+he(a,":")}},t:function(e,t,n,A){var a=A._originalDate||e;return oe(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,A){return oe((A._originalDate||e).getTime(),t.length)}};function le(e,t){var n=e>0?"-":"+",A=Math.abs(e),a=Math.floor(A/60),r=A%60;if(0===r)return n+String(a);var i=t||"";return n+String(a)+i+oe(r,2)}function ue(e,t){return e%60==0?(e>0?"-":"+")+oe(Math.abs(e)/60,2):he(e,t)}function he(e,t){var n=t||"",A=e>0?"-":"+",a=Math.abs(e);return A+oe(Math.floor(a/60),2)+n+oe(a%60,2)}const me=ce;function Ce(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function fe(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const pe={p:fe,P:function(e,t){var n,A=e.match(/(P+)(p+)?/)||[],a=A[1],r=A[2];if(!r)return Ce(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Ce(a,t)).replace("{{time}}",fe(r,t))}};function ge(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Ee=["D","DD"],we=["YY","YYYY"];function be(e){return-1!==Ee.indexOf(e)}function ve(e){return-1!==we.indexOf(e)}function ye(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Be=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ke=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,De=/^'([^]*?)'?$/,xe=/''/g,Fe=/[a-zA-Z]/;function je(e){return e.match(De)[1].replace(xe,"'")}function Te(e){x(1,arguments);var t=F(e),n=t.getFullYear();return n%400==0||n%4==0&&n%100!=0}function Le(e,t){switch(e){case 0:return document.createElement(t);case 1:return document.querySelector(t);case 2:return document.querySelectorAll(t)}}function Se(e,t,n){e.style[t]=n}function Me(e,t){for(let n=1;n<=e;n++){let e=Le(0,"div");e.classList.add("day");let A=Le(0,"p");A.textContent=n,e.appendChild(A),t.appendChild(e)}}const Ue=function(e,t){switch(e){case"create":return document.createElement(t);case"selectOne":return document.querySelector(t);case"selectAll":return document.querySelectorAll(t)}},qe=(()=>{const e=[],t=localStorage.getItem("projectList"),n=(e,t)=>{for(let n of t)if(e===n.name)return n;return D(e)},A=(e,t)=>{t.tasks.push(e),e.projectID=t.id},a=e=>{const t=e.tasks;0!==t.length&&t.splice(0,t.length-1)},r={notifications:document.querySelector(".user-notify"),aside:document.querySelector(".app-aside-projects"),mainWindow:document.querySelector(".app-main-task-window"),dbHeading:document.querySelector(".dashboard-title"),dashboard:document.querySelector(".dashboard-tasks"),today:document.querySelector(".dashboard-today"),upcoming:document.querySelector(".dashboard-upcoming"),dbProject:document.querySelector(".dashboard-project")},i={lastView:r.dashboard,currentView:r.dashboard,updateProjectTaskTotal:function(e){for(const t of e)for(const e of r.aside.children)if(t.id===e.id){if(0===t.tasks.length)return e.children[1].textContent="";e.children[1].textContent=t.tasks.length}},updateNotifications:function(e){for(const t of e)if(0!==t.tasks.length)return r.notifications.classList.add("notify");r.notifications.classList.remove("notify")},populateByProject:function(t,n){this.currentView=t,this.lastView.style.position="absolute",this.currentView.style.position="relative";let A=[],a=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)a.push(e);a.forEach((e=>e.remove())),a=[];for(const t of e)0!==t.tasks.length&&t.tasks.forEach((e=>{t.id===n&&A.push(dt(e))}));A.forEach((e=>this.currentView.appendChild(e))),A=[],this.lastView=this.currentView},sort:function(t,n){if(this.currentView=t,this.currentView===this.lastView)return;this.lastView.style.position="absolute",this.currentView.style.position="relative";let A=[],a=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)a.push(e);a.forEach((e=>e.remove())),a=[];for(const t of e)0!==t.tasks.length&&t.tasks.forEach((e=>{switch(n){case"all":A.push(dt(e));break;case"today":S(new Date(e.dueDate.year,e.dueDate.month,e.dueDate.day))&&A.push(dt(e));break;case"upcoming":j(new Date(e.dueDate.year,e.dueDate.month,e.dueDate.day))&&A.push(dt(e))}}));A.forEach((e=>this.currentView.appendChild(e))),A=[],this.lastView=this.currentView},populateAll:function(){if(this.currentView=r.dashboard,this.currentView===this.lastView)return;let t=[],n=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)n.push(e);n.forEach((e=>e.remove())),n=[];for(const n of e)0!==n.tasks.length&&n.tasks.forEach((e=>{t.push(dt(e))}));t.forEach((e=>this.currentView.appendChild(e))),t=[],this.lastView=this.currentView},populateToday:function(){if(this.currentView=r.today,this.currentView===this.lastView)return;let t=[],n=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)n.push(e);n.forEach((e=>e.remove())),n=[];for(const n of e)0!==n.tasks.length&&n.tasks.forEach((e=>{S(e.dueDate)&&t.push(dt(e))}));t.forEach((e=>this.currentView.appendChild(e))),t=[],this.lastView=this.currentView},populateUpcoming:function(){if(this.currentView=r.upcoming,this.currentView===this.lastView)return;let t=[],n=[];if(0!==this.lastView.children.length)for(const e of this.lastView.children)n.push(e);n.forEach((e=>e.remove())),n=[];for(const n of e)0!==n.tasks.length&&n.tasks.forEach((e=>{j(e.dueDate)&&t.push(dt(e))}));t.forEach((e=>this.currentView.appendChild(e))),t=[],this.lastView=this.currentView}},o={observers:{config:{attributes:!0,childList:!0,subtree:!0}}};return o.observers.mainWindow=new MutationObserver(((t,n)=>{i.updateProjectTaskTotal(e),i.updateNotifications(e)})),o.observers.mainWindow.observe(r.mainWindow,o.observers.config),{projects:e,elements:r,view:i,_notifyProject:(t,n)=>{for(const A of e)A.tasks.forEach(((e,a)=>{switch(n){case"add":e.id===t.id&&A.tasks.push(e);break;case"remove":e.id===t.id&&A.tasks.splice(a,1)}}))},restore:()=>(()=>{let a=!0;t&&t.length&&JSON.parse(t).forEach((t=>{if(0!==t.tasks.length)for(const a of t.tasks){const t=n(a.project,e);A(a,t);let o=e.length;qe._addProjectToProjectsIndex(t,e),o!==e.length&&ut(t);const s=dt(a);switch(i.currentView){case r.dashboard:i.currentView.appendChild(s);break;case r.today:j(new Date(a.dueDate.year,a.dueDate.month,a.dueDate.day))||i.currentView.appendChild(s);break;case r.upcoming:j(new Date(a.dueDate.year,a.dueDate.month,a.dueDate.day))&&i.currentView.appendChild(s)}}}))})(),_updateStorage:()=>localStorage.setItem("projectList",JSON.stringify(e)),_getTaskProject:n,_addTaskToProject:A,_removeProjectFromList:(e,t)=>{0!==t.length&&t.forEach(((n,A)=>{e.id===n.id&&(a(n),t.splice(A))}))},_removeAllTasksFromProject:a,_addProjectToProjectsIndex:(e,t)=>{!1===((e,t)=>{let n=!1;return t.forEach((t=>{if(e.id===t.id)return console.log(e.id,t.id),void(n=!0)})),n})(e,t)&&t.push(e)}}})();let Ie="create",We="selectOne";Ue(We,".dashboard-tasks"),document.querySelectorAll(".pointer").forEach((e=>{e.addEventListener("click",Je)}));const Ne=document.querySelector("dialog"),Ye=document.querySelector(".input-day").children[0],Pe=document.querySelector(".input-month").children[0],ze=document.querySelector(".input-year").children[0];Ye.textContent="day",Pe.textContent="month",ze.textContent="year";let Ve="";const Oe=function(){const e=Le(0,"div");e.classList.add("calendar"),Se(e,"display","grid"),Se(e,"align-items","center");const t=[];for(let n=1;n<=12;n++){let A,a=Le(0,"div");a.classList.add("calendar-month");let r=Le(0,"h3"),i=Le(0,"div");switch(i.classList.add("calendar-days"),n){case 1:A="January",Me(31,i);break;case 2:A="February",Te(Date.now())?Me(29,i):Me(28,i);break;case 3:A="March",Me(31,i);break;case 4:A="April",Me(30,i);break;case 5:A="May",Me(31,i);break;case 6:A="June",Me(30,i);break;case 7:A="July",Me(31,i);break;case 8:A="August",Me(31,i);break;case 9:A="September",Me(30,i);break;case 10:A="October",Me(31,i);break;case 11:A="November",Me(30,i);break;case 12:A="December",Me(31,i)}r.textContent=A,a.appendChild(r),a.appendChild(i),a.id=n,a.classList.add(A),a.classList.add("month"),e.appendChild(a),Number(a.id)!==M(Date.now())+1&&Se(a,"visibility","hidden"),Se(a,"width","90%"),Se(a,"height","100%"),Se(i,"display","grid"),Se(a,"textAlign","center"),Se(a,"position","absolute"),Se(a,"backgroundColor","white"),Se(a,"justify-self","center"),Se(i,"grid-template-columns","repeat(7, 1fr)"),t.push(a)}Se(e,"position","relative");const n=Le(0,"button");n.type="button",n.classList.add("close-calendar-btn"),n.textContent="close",e.appendChild(n);const A=Le(0,"i");A.classList.add("fas"),A.classList.add("fa-chevron-circle-left");const a=Le(0,"i");return a.classList.add("fas"),a.classList.add("fa-chevron-circle-right"),e.appendChild(A),e.appendChild(a),Se(A,"position","absolute"),Se(a,"position","absolute"),Se(A,"fontSize","2rem"),Se(a,"fontSize","2rem"),Se(A,"margin-left","0.65rem"),Se(a,"margin-right","0.65rem"),{container:e,navLeft:A,navRight:a,closeCal:n}}();document.querySelector(".input-calendar").appendChild(Oe.container),Oe.navLeft.dataset.index=M(Date.now())+1,Oe.navLeft.addEventListener("click",(()=>{Oe.navLeft.dataset.index=Number(Oe.navLeft.dataset.index),Oe.navRight.dataset.index=Number(Oe.navRight.dataset.index),Oe.navLeft.dataset.index--,Oe.navRight.dataset.index--,Number(Oe.navLeft.dataset.index)<=0&&(Oe.navLeft.dataset.index=12,Oe.navRight.dataset.index=12);for(let e of Oe.container.children)console.dir(e),"DIV"===e.tagName&&(Number(Oe.navLeft.dataset.index)===Number(e.id)?(e.style.visibility="visible",Ve=e):e.style.visibility="hidden")})),Oe.navRight.dataset.index=M(Date.now())+1,Oe.navRight.addEventListener("click",(()=>{Oe.navRight.dataset.index=Number(Oe.navRight.dataset.index),Oe.navLeft.dataset.index=Number(Oe.navLeft.dataset.index),Oe.navRight.dataset.index++,Oe.navLeft.dataset.index++,Number(Oe.navRight.dataset.index)>=13&&(Oe.navRight.dataset.index=1,Oe.navLeft.dataset.index=1);for(let e of Oe.container.children)console.dir(e),"DIV"===e.tagName&&(Number(Oe.navRight.dataset.index)===Number(e.id)?(e.style.visibility="visible",Ve=e):e.style.visibility="hidden")})),Oe.container.childNodes.forEach((e=>{"DIV"===e.tagName&&e.children[1].childNodes.forEach((t=>t.addEventListener("click",(t=>{!function(e,t){Ye.textContent=e.target.textContent,Pe.textContent=t.id,"year"===ze.textContent&&(ze.textContent=U(Date.now()))}(t,e)}))))})),Ue(We,".close-calendar-btn").addEventListener("click",(()=>{""!==Ve&&(Ve.style.visibility="hidden"),tt.focus(),Oe.container.style.visibility="hidden"}));const Re=document.querySelector(".year-nav-up"),He=document.querySelector(".year-nav-down");function Je(e){Ne.showModal();const t=k(),n=document.querySelector("form"),A=n.elements,a=document.querySelectorAll(".priority-flag"),r=document.querySelector(".cancel");function i(e){e.preventDefault(),t.name=A.task.value,t.project=A.project.value,""===t.project&&(t.project="User");const d=qe._getTaskProject(t.project,qe.projects);qe._addTaskToProject(t,d);const c=Date.now(),l=function(e){return x(1,arguments),F(e).getDate()}(c),u=M(c),h=U(c);t.creationDate.year=h,t.creationDate.month=u,t.creationDate.day=l;const m=[Number(Ye.textContent),Number(Pe.textContent)-1,Number(ze.textContent)];m.forEach((e=>{isNaN(e)?t.dueDate="":(t.dueDate.year=m[2],t.dueDate.month=m[1],t.dueDate.day=m[0])})),t.time=A.time.value,t.comment=A.comment.value;let C=qe.projects.length;qe._addProjectToProjectsIndex(d,qe.projects),C!==qe.projects.length&&ut(d);const f=dt(t);switch(qe.view.currentView){case qe.elements.dashboard:qe.view.currentView.appendChild(f);break;case qe.elements.today:j(t.dueDate)||qe.view.currentView.appendChild(f);break;case qe.elements.upcoming:j(t.dueDate)&&qe.view.currentView.appendChild(f)}qe._updateStorage(),Ne.close(),n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}function o(e){t.priorityFlag=getComputedStyle(e.target).color,e.target.parentNode.parentNode.parentNode.style.color=t.priorityFlag;for(let t of e.target.parentNode.parentNode.children)t.children[0].classList.toggle("icon-selector-visibility")}function s(e){e.preventDefault(),Ne.close();for(let e in t)delete t[e];n.removeEventListener("submit",i),a.forEach((e=>{e.removeEventListener("click",o)})),r.removeEventListener("click",s)}n.addEventListener("submit",i),a.forEach((e=>{e.addEventListener("click",o)})),r.addEventListener("click",s)}Re.addEventListener("click",(e=>{if("year"===ze.textContent)return ze.textContent=U(Date.now());let t=Number(ze.textContent);t++,ze.textContent=t,"day"===Ye.textContent&&(Ye.textContent=function(e){return x(1,arguments),F(e).getDay()}(Date.now())),"month"===Pe.textContent&&(Ye.textContent=M(Date.now))})),He.addEventListener("click",(e=>{if("year"===ze.textContent)return ze.textContent=U(Date.now());let t=Number(ze.textContent);t--,ze.textContent=t}));const _e=document.querySelectorAll(".js-task-icon"),Ge=Ue(We,".input-task");Ge.blur();const Qe=Ue(We,".input-project"),Xe=Ue(We,".input-dropdown-icon"),Ke=Ue(We,".dropdown-set-project"),Ze={task:{input:Ge},project:{group:Ke,input:Qe,icon:Xe,menu:[],count:0}},$e=Ue(We,".input-day"),et=Ue(We,".input-month"),tt=Ue(We,".input-year"),nt=[$e,et,tt,Oe.container],At=Ue(We,".input-time"),at=Ue(We,".input-comment"),rt=[Ge,Qe,Xe,$e,et,tt,Oe.container,Ve,At,at];Xe.addEventListener("click",(()=>{if(0===Ze.project.menu.length){const e=Ue(Ie,"ul");if(e.classList.add("project-select-menu"),e.style.width="100%",e.style.height="auto",e.style.position="relative",e.style.visibility="visible",0===qe.projects.length){const t=Ue(Ie,"li");t.classList.add("project-selector"),t.textContent="Empty",t.style.position="relative",t.style.cursor="pointer",e.appendChild(t)}else for(const t of qe.projects){const n=Ue(Ie,"li");n.classList.add("project-selector"),n.style.cursor="pointer",n.textContent=t.name,n.addEventListener("click",(e=>{Qe.value=n.textContent})),e.appendChild(n)}Ze.project.menu.push(e),Ze.project.group.appendChild(e)}else Ze.project.menu[0].remove(),Ze.project.menu=[]})),_e.forEach((e=>{e.addEventListener("click",(e=>{for(const e of _e)e.classList.remove("modal-icon-select");switch(rt.forEach((e=>{""!==e&&(e.style.visibility="hidden")})),e.target.classList.add("modal-icon-select"),e.target.classList[2]){case"pen":Ge.style.visibility="visible",Ge.focus();break;case"prj":Qe.style.visibility="visible",Xe.style.visibility="visible",Qe.focus();break;case"cal":""!==Ve&&(Ve.style.visibility="visible",Ve="");for(const e of nt)e.style.visibility="visible";break;case"clk":At.style.visibility="visible",At.focus();break;case"flg":e.target.children[0].childNodes.forEach((e=>{"LI"===e.tagName&&e.childNodes[0].classList.toggle("icon-selector-visibility")}));break;case"cmt":at.style.visibility="visible",at.focus()}}))}));const it=document.querySelector("aside");document.querySelector(".aside-drawer-icon").addEventListener("click",(()=>it.classList.toggle("aside-drawer-position")));const ot=document.querySelector(".app-aside-calendar");for(let e of ot.children)e.addEventListener("click",(e=>{void 0!==ct&&ct.remove("js-aside-highlight");for(let e of ot.children)e.classList.remove("js-aside-highlight");e.target.classList.add("js-aside-highlight"),st(e)}));function st(e){switch(e.target.textContent.trim()){case"Tasks":console.log("tasks-tab"),qe.elements.dbHeading.textContent="Tasks",qe.view.sort(qe.elements.dashboard,"all");break;case"Today":console.log("today-tab"),qe.elements.dbHeading.textContent="Today",qe.view.sort(qe.elements.today,"today");break;case"Upcoming":console.log("upcoming-tab"),qe.elements.dbHeading.textContent="Upcoming",qe.view.sort(qe.elements.upcoming,"upcoming")}}function dt(e){const t=Ue(Ie,"li");t.id=e.id,t.dataset.project=e.projectID,t.classList.add("task-card");const n=Ue(Ie,"div");n.classList.add("congrats-mask"),n.style.position="absolute",n.style.width="100%",n.style.height="100%";const A=Ue(Ie,"p");A.classList.add("congrats-message"),A.textContent="Great Work!",n.appendChild(A),t.appendChild(n);const a=Ue(Ie,"div");a.classList.add("task-check-col-1");const r=Ue(Ie,"i");r.classList.add("far"),r.classList.add("fa-circle"),r.classList.add("task-complete"),r.addEventListener("click",(A=>{A.target.classList.remove("far"),A.target.classList.remove("fa-circle"),A.target.classList.add("fas"),A.target.classList.add("fa-check-circle"),A.target.style.color="green",setTimeout((()=>{n.classList.add("show-congrats-mask")}),1200),setTimeout((()=>{t.classList.add("remove-task")}),2400),setTimeout((()=>{qe._notifyProject(e,"remove"),qe._updateStorage(),t.remove()}),3600)}));const i=Ue(Ie,"i");i.classList.add("fas"),i.classList.add("fa-flag"),i.classList.add("task-priority"),i.style.color=e.priorityFlag,a.appendChild(r),a.appendChild(i),t.appendChild(a);const o=Ue(Ie,"div");o.classList.add("task-info");const s=Ue(Ie,"h4");s.classList.add("task-heading"),s.textContent=e.name,o.appendChild(s);const d=Ue(Ie,"ul");d.classList.add("task-details"),o.appendChild(d);const c=Ue(Ie,"li");c.classList.add("task-date");const l=Ue(Ie,"i");l.classList.add("far"),""===e.dueDate?l.classList.add("fa-calendar"):l.classList.add("fa-calendar-check"),l.classList.add("task-date-icon"),c.appendChild(l);const u=Ue(Ie,"p");u.classList.add("task-date-text"),""!==e.dueDate?u.textContent=function(e,t,n){x(2,arguments);var A=String(t),a=n||{},r=a.locale||G,i=r.options&&r.options.firstWeekContainsDate,o=null==i?1:Q(i),s=null==a.firstWeekContainsDate?o:Q(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=r.options&&r.options.weekStartsOn,c=null==d?0:Q(d),l=null==a.weekStartsOn?c:Q(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var u=F(e);if(!I(u))throw new RangeError("Invalid time value");var h=ge(u),m=K(u,h),C={firstWeekContainsDate:s,weekStartsOn:l,locale:r,_originalDate:u};return A.match(ke).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,pe[t])(e,r.formatLong,C):e})).join("").match(Be).map((function(n){if("''"===n)return"'";var A=n[0];if("'"===A)return je(n);var i=me[A];if(i)return!a.useAdditionalWeekYearTokens&&ve(n)&&ye(n,t,e),!a.useAdditionalDayOfYearTokens&&be(n)&&ye(n,t,e),i(m,n,r.localize,C);if(A.match(Fe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+A+"`");return n})).join("")}(new Date(e.dueDate.year,e.dueDate.month,e.dueDate.day),"eee dd MMM yyyy"):u.textContent="",c.appendChild(u),""===e.dueDate&&(l.style.color="lightgrey",u.textContent=""),d.appendChild(c);const h=Ue(Ie,"li");h.classList.add("task-project"),h.style.width="45%";const m=Ue(Ie,"p");m.classList.add("task-project-text"),m.textContent=e.project,h.appendChild(m);const C=Ue(Ie,"i");C.classList.add("fas"),C.classList.add("fa-circle"),C.classList.add("task-project-icon"),h.appendChild(C),d.appendChild(h);const f=Ue(Ie,"li");f.classList.add("task-remove");const p=Ue(Ie,"i");return p.classList.add("far"),p.classList.add("fa-trash-alt"),C.classList.add("task-remove-icon"),f.appendChild(p),d.appendChild(f),console.log(`Task ID: ${t.id}`),p.addEventListener("click",(()=>{t.classList.add("remove-task"),setTimeout((()=>{qe._notifyProject(e,"remove"),qe._updateStorage(),t.remove()}),1200)})),t.appendChild(o),t}let ct;document.querySelector(".js-projects-dropdown").addEventListener("click",(e=>{e.target.style.backgroundColor="transparent",e.target.parentNode.parentNode.classList.toggle("dropdown-menu"),e.target.parentNode.children[1].classList.toggle("dropdown-state"),e.target.classList.add("js-aside-highlight")}));const lt=document.querySelector(".app-aside-projects");function ut(e){const t=Ue(Ie,"li");t.id=e.id,t.classList.add("project");const n=Ue(Ie,"div");n.classList.add("project-info");const A=Ue(Ie,"i");A.classList.add("fas"),A.classList.add("fa-circle"),A.classList.add("project-icon"),n.appendChild(A);const a=Ue(Ie,"p");a.classList.add("project-name"),a.textContent=e.name,n.appendChild(a),t.appendChild(n);const r=Ue(Ie,"p");return r.classList.add("project-task-count"),r.textContent=e.tasks.length,t.appendChild(r),t.addEventListener("click",(n=>{qe.elements.dbHeading.textContent=e.name,qe.view.populateByProject(qe.elements.dbProject,e.id);for(let e of ot.children)e.classList.remove("js-aside-highlight");void 0!==ct&&ct.remove("js-aside-highlight"),t.classList.add("js-aside-highlight"),ct=t.classList})),lt.appendChild(t),t}qe.restore()}},e=>{e(e.s=628)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,